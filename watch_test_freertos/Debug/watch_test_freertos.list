
watch_test_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c408  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013ec  0800c548  0800c548  0001c548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d934  0800d934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d938  0800d938  0001d938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000004  0800d93c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003adc  20000078  0800d9b0  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20003b54  0800d9b0  00023b54  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029109  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004725  00000000  00000000  000491b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002488  00000000  00000000  0004d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002290  00000000  00000000  0004fd60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026eee  00000000  00000000  00051ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001ae5c  00000000  00000000  00078ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000f168c  00000000  00000000  00093d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001853c6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009ee0  00000000  00000000  00185444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c530 	.word	0x0800c530

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	0800c530 	.word	0x0800c530

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a3a:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	889a      	ldrh	r2, [r3, #4]
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a42:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 8000a44:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	799b      	ldrb	r3, [r3, #6]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a56:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	799b      	ldrb	r3, [r3, #6]
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a68:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	799b      	ldrb	r3, [r3, #6]
 8000a6e:	091b      	lsrs	r3, r3, #4
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a7a:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a7e:	7b1a      	ldrb	r2, [r3, #12]
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a82:	7b5b      	ldrb	r3, [r3, #13]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d10c      	bne.n	8000aa2 <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a8a:	889a      	ldrh	r2, [r3, #4]
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000a8e:	889b      	ldrh	r3, [r3, #4]
 8000a90:	3303      	adds	r3, #3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	da00      	bge.n	8000a98 <Dotstar_Init+0x6c>
 8000a96:	3303      	adds	r3, #3
 8000a98:	109b      	asrs	r3, r3, #2
 8000a9a:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000a9c:	4413      	add	r3, r2
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	e005      	b.n	8000aae <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000aa4:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	0052      	lsls	r2, r2, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	81fb      	strh	r3, [r7, #14]

   dotstar_state.pixels = (uint8_t *)malloc(bytes);
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00b f8c4 	bl	800bc40 <malloc>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <Dotstar_Init+0x9c>)
 8000abe:	609a      	str	r2, [r3, #8]
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200038d0 	.word	0x200038d0

08000acc <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 8000ad2:	4b4b      	ldr	r3, [pc, #300]	; (8000c00 <ds_show+0x134>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 808e 	beq.w	8000bf8 <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 8000adc:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <ds_show+0x134>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 8000ae2:	4b47      	ldr	r3, [pc, #284]	; (8000c00 <ds_show+0x134>)
 8000ae4:	889b      	ldrh	r3, [r3, #4]
 8000ae6:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 8000ae8:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <ds_show+0x134>)
 8000aea:	799b      	ldrb	r3, [r3, #6]
 8000aec:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 8000af2:	2300      	movs	r3, #0
 8000af4:	72fb      	strb	r3, [r7, #11]
 8000af6:	e00a      	b.n	8000b0e <ds_show+0x42>
 8000af8:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <ds_show+0x134>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	1d79      	adds	r1, r7, #5
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	2201      	movs	r2, #1
 8000b04:	f005 fe83 	bl	800680e <HAL_SPI_Transmit>
 8000b08:	7afb      	ldrb	r3, [r7, #11]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	72fb      	strb	r3, [r7, #11]
 8000b0e:	7afb      	ldrb	r3, [r7, #11]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d9f1      	bls.n	8000af8 <ds_show+0x2c>
    
    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 8000b14:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <ds_show+0x134>)
 8000b16:	799b      	ldrb	r3, [r3, #6]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d02c      	beq.n	8000b76 <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 8000b1c:	23ff      	movs	r3, #255	; 0xff
 8000b1e:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <ds_show+0x134>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	1d79      	adds	r1, r7, #5
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f005 fe6f 	bl	800680e <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	72fb      	strb	r3, [r7, #11]
 8000b34:	e015      	b.n	8000b62 <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	60fa      	str	r2, [r7, #12]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	fb03 f302 	mul.w	r3, r3, r2
 8000b46:	121b      	asrs	r3, r3, #8
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <ds_show+0x134>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	1d79      	adds	r1, r7, #5
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	2201      	movs	r2, #1
 8000b58:	f005 fe59 	bl	800680e <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000b5c:	7afb      	ldrb	r3, [r7, #11]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	72fb      	strb	r3, [r7, #11]
 8000b62:	7afb      	ldrb	r3, [r7, #11]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d9e6      	bls.n	8000b36 <ds_show+0x6a>
        }
      } while(--n);
 8000b68:	893b      	ldrh	r3, [r7, #8]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	813b      	strh	r3, [r7, #8]
 8000b6e:	893b      	ldrh	r3, [r7, #8]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1d3      	bne.n	8000b1c <ds_show+0x50>
 8000b74:	e025      	b.n	8000bc2 <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 8000b76:	23ff      	movs	r3, #255	; 0xff
 8000b78:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <ds_show+0x134>)
 8000b7c:	6818      	ldr	r0, [r3, #0]
 8000b7e:	1d79      	adds	r1, r7, #5
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	2201      	movs	r2, #1
 8000b86:	f005 fe42 	bl	800680e <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	72fb      	strb	r3, [r7, #11]
 8000b8e:	e00f      	b.n	8000bb0 <ds_show+0xe4>
        	sendval = *ptr++;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60fa      	str	r2, [r7, #12]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <ds_show+0x134>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	1d79      	adds	r1, r7, #5
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f005 fe32 	bl	800680e <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000baa:	7afb      	ldrb	r3, [r7, #11]
 8000bac:	3301      	adds	r3, #1
 8000bae:	72fb      	strb	r3, [r7, #11]
 8000bb0:	7afb      	ldrb	r3, [r7, #11]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d9ec      	bls.n	8000b90 <ds_show+0xc4>
        }
      } while(--n);
 8000bb6:	893b      	ldrh	r3, [r7, #8]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	813b      	strh	r3, [r7, #8]
 8000bbc:	893b      	ldrh	r3, [r7, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1d9      	bne.n	8000b76 <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 8000bc2:	23ff      	movs	r3, #255	; 0xff
 8000bc4:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	72fb      	strb	r3, [r7, #11]
 8000bca:	e00a      	b.n	8000be2 <ds_show+0x116>
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <ds_show+0x134>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	1d79      	adds	r1, r7, #5
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f005 fe19 	bl	800680e <HAL_SPI_Transmit>
 8000bdc:	7afb      	ldrb	r3, [r7, #11]
 8000bde:	3301      	adds	r3, #1
 8000be0:	72fb      	strb	r3, [r7, #11]
 8000be2:	7afa      	ldrb	r2, [r7, #11]
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <ds_show+0x134>)
 8000be6:	889b      	ldrh	r3, [r3, #4]
 8000be8:	330f      	adds	r3, #15
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da00      	bge.n	8000bf0 <ds_show+0x124>
 8000bee:	330f      	adds	r3, #15
 8000bf0:	111b      	asrs	r3, r3, #4
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dbea      	blt.n	8000bcc <ds_show+0x100>
 8000bf6:	e000      	b.n	8000bfa <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 8000bf8:	bf00      	nop
   
}
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200038d0 	.word	0x200038d0

08000c04 <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <ds_clear+0x44>)
 8000c0a:	6898      	ldr	r0, [r3, #8]
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <ds_clear+0x44>)
 8000c0e:	7b1a      	ldrb	r2, [r3, #12]
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <ds_clear+0x44>)
 8000c12:	7b5b      	ldrb	r3, [r3, #13]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d10b      	bne.n	8000c30 <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <ds_clear+0x44>)
 8000c1a:	889b      	ldrh	r3, [r3, #4]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <ds_clear+0x44>)
 8000c20:	889b      	ldrh	r3, [r3, #4]
 8000c22:	3303      	adds	r3, #3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da00      	bge.n	8000c2a <ds_clear+0x26>
 8000c28:	3303      	adds	r3, #3
 8000c2a:	109b      	asrs	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	e005      	b.n	8000c3c <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <ds_clear+0x44>)
 8000c32:	889b      	ldrh	r3, [r3, #4]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4613      	mov	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f00b f811 	bl	800bc66 <memset>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200038d0 	.word	0x200038d0

08000c4c <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <ds_setPixelColor32B+0x68>)
 8000c5a:	889b      	ldrh	r3, [r3, #4]
 8000c5c:	88fa      	ldrh	r2, [r7, #6]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d221      	bcs.n	8000ca6 <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <ds_setPixelColor32B+0x68>)
 8000c64:	6899      	ldr	r1, [r3, #8]
 8000c66:	88fa      	ldrh	r2, [r7, #6]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	0c1a      	lsrs	r2, r3, #16
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <ds_setPixelColor32B+0x68>)
 8000c78:	7b1b      	ldrb	r3, [r3, #12]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	440b      	add	r3, r1
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	0a1a      	lsrs	r2, r3, #8
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <ds_setPixelColor32B+0x68>)
 8000c8a:	7b5b      	ldrb	r3, [r3, #13]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	440b      	add	r3, r1
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <ds_setPixelColor32B+0x68>)
 8000c98:	7b9b      	ldrb	r3, [r3, #14]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	701a      	strb	r2, [r3, #0]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	200038d0 	.word	0x200038d0

08000cb8 <ds_fill>:
  @param   first  Index of first pixel to fill, starting from 0. Must be
                  in-bounds, no clipping is performed. 0 if unspecified.
  @param   count  Number of pixels to fill, as a positive value. Passing
                  0 or leaving unspecified will fill to end of strip.
*/
void ds_fill(uint32_t c, uint16_t first, uint16_t count) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	803b      	strh	r3, [r7, #0]
  uint16_t i, end;

  if(first >= dotstar_state.numLEDs) {
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <ds_fill+0x68>)
 8000cca:	889b      	ldrh	r3, [r3, #4]
 8000ccc:	887a      	ldrh	r2, [r7, #2]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d222      	bcs.n	8000d18 <ds_fill+0x60>
    return; // If first LED is past end of strip, nothing to do
  }

  // Calculate the index ONE AFTER the last pixel to fill
  if(count == 0) {
 8000cd2:	883b      	ldrh	r3, [r7, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <ds_fill+0x28>
    // Fill to end of strip
    end = dotstar_state.numLEDs;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <ds_fill+0x68>)
 8000cda:	889b      	ldrh	r3, [r3, #4]
 8000cdc:	81bb      	strh	r3, [r7, #12]
 8000cde:	e00b      	b.n	8000cf8 <ds_fill+0x40>
  } else {
    // Ensure that the loop won't go past the last pixel
    end = first + count;
 8000ce0:	887a      	ldrh	r2, [r7, #2]
 8000ce2:	883b      	ldrh	r3, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	81bb      	strh	r3, [r7, #12]
    if(end > dotstar_state.numLEDs) end = dotstar_state.numLEDs;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <ds_fill+0x68>)
 8000cea:	889b      	ldrh	r3, [r3, #4]
 8000cec:	89ba      	ldrh	r2, [r7, #12]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d902      	bls.n	8000cf8 <ds_fill+0x40>
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <ds_fill+0x68>)
 8000cf4:	889b      	ldrh	r3, [r3, #4]
 8000cf6:	81bb      	strh	r3, [r7, #12]
  }

  for(i = first; i < end; i++) {
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	81fb      	strh	r3, [r7, #14]
 8000cfc:	e007      	b.n	8000d0e <ds_fill+0x56>
    ds_setPixelColor32B(i, c);
 8000cfe:	89fb      	ldrh	r3, [r7, #14]
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ffa2 	bl	8000c4c <ds_setPixelColor32B>
  for(i = first; i < end; i++) {
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	81fb      	strh	r3, [r7, #14]
 8000d0e:	89fa      	ldrh	r2, [r7, #14]
 8000d10:	89bb      	ldrh	r3, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d3f3      	bcc.n	8000cfe <ds_fill+0x46>
 8000d16:	e000      	b.n	8000d1a <ds_fill+0x62>
    return; // If first LED is past end of strip, nothing to do
 8000d18:	bf00      	nop
  }
}
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200038d0 	.word	0x200038d0

08000d24 <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	3301      	adds	r3, #1
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <ds_setBrightness+0x20>)
 8000d36:	719a      	strb	r2, [r3, #6]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	200038d0 	.word	0x200038d0

08000d48 <I2C_Write_Byte>:
//#include "stm32wbxx_hal_i2c.h"
//#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 8000d58:	2378      	movs	r3, #120	; 0x78
 8000d5a:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 8000d64:	f107 020c 	add.w	r2, r7, #12
 8000d68:	89f9      	ldrh	r1, [r7, #14]
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2302      	movs	r3, #2
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <I2C_Write_Byte+0x38>)
 8000d74:	f002 fd5e 	bl	8003834 <HAL_I2C_Master_Transmit>
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200038ec 	.word	0x200038ec

08000d84 <er_oled_begin>:

void er_oled_begin()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 8000d88:	2100      	movs	r1, #0
 8000d8a:	20ae      	movs	r0, #174	; 0xae
 8000d8c:	f7ff ffdc 	bl	8000d48 <I2C_Write_Byte>
	
    command(0xd5);//--set display clock divide ratio/oscillator frequency
 8000d90:	2100      	movs	r1, #0
 8000d92:	20d5      	movs	r0, #213	; 0xd5
 8000d94:	f7ff ffd8 	bl	8000d48 <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	f7ff ffd4 	bl	8000d48 <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 8000da0:	2100      	movs	r1, #0
 8000da2:	20a8      	movs	r0, #168	; 0xa8
 8000da4:	f7ff ffd0 	bl	8000d48 <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 8000da8:	2100      	movs	r1, #0
 8000daa:	2027      	movs	r0, #39	; 0x27
 8000dac:	f7ff ffcc 	bl	8000d48 <I2C_Write_Byte>

    command(0xd3);//-set display offset
 8000db0:	2100      	movs	r1, #0
 8000db2:	20d3      	movs	r0, #211	; 0xd3
 8000db4:	f7ff ffc8 	bl	8000d48 <I2C_Write_Byte>
    command(0x00);//-not offset
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff ffc4 	bl	8000d48 <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting	
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	20ad      	movs	r0, #173	; 0xad
 8000dc4:	f7ff ffc0 	bl	8000d48 <I2C_Write_Byte>
    command(0x30);//--
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2030      	movs	r0, #48	; 0x30
 8000dcc:	f7ff ffbc 	bl	8000d48 <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	208d      	movs	r0, #141	; 0x8d
 8000dd4:	f7ff ffb8 	bl	8000d48 <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2014      	movs	r0, #20
 8000ddc:	f7ff ffb4 	bl	8000d48 <I2C_Write_Byte>

    command(0x40);//--set start line address
 8000de0:	2100      	movs	r1, #0
 8000de2:	2040      	movs	r0, #64	; 0x40
 8000de4:	f7ff ffb0 	bl	8000d48 <I2C_Write_Byte>

    command(0xa6);//--set normal display
 8000de8:	2100      	movs	r1, #0
 8000dea:	20a6      	movs	r0, #166	; 0xa6
 8000dec:	f7ff ffac 	bl	8000d48 <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 8000df0:	2100      	movs	r1, #0
 8000df2:	20a4      	movs	r0, #164	; 0xa4
 8000df4:	f7ff ffa8 	bl	8000d48 <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	20a1      	movs	r0, #161	; 0xa1
 8000dfc:	f7ff ffa4 	bl	8000d48 <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 8000e00:	2100      	movs	r1, #0
 8000e02:	20c8      	movs	r0, #200	; 0xc8
 8000e04:	f7ff ffa0 	bl	8000d48 <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 8000e08:	2100      	movs	r1, #0
 8000e0a:	20da      	movs	r0, #218	; 0xda
 8000e0c:	f7ff ff9c 	bl	8000d48 <I2C_Write_Byte>
    command(0x12);
 8000e10:	2100      	movs	r1, #0
 8000e12:	2012      	movs	r0, #18
 8000e14:	f7ff ff98 	bl	8000d48 <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2081      	movs	r0, #129	; 0x81
 8000e1c:	f7ff ff94 	bl	8000d48 <I2C_Write_Byte>
    command(0xaf);
 8000e20:	2100      	movs	r1, #0
 8000e22:	20af      	movs	r0, #175	; 0xaf
 8000e24:	f7ff ff90 	bl	8000d48 <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 8000e28:	2100      	movs	r1, #0
 8000e2a:	20d9      	movs	r0, #217	; 0xd9
 8000e2c:	f7ff ff8c 	bl	8000d48 <I2C_Write_Byte>
    command(0x22);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2022      	movs	r0, #34	; 0x22
 8000e34:	f7ff ff88 	bl	8000d48 <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 8000e38:	2100      	movs	r1, #0
 8000e3a:	20db      	movs	r0, #219	; 0xdb
 8000e3c:	f7ff ff84 	bl	8000d48 <I2C_Write_Byte>
    command(0x20);
 8000e40:	2100      	movs	r1, #0
 8000e42:	2020      	movs	r0, #32
 8000e44:	f7ff ff80 	bl	8000d48 <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 8000e48:	2100      	movs	r1, #0
 8000e4a:	20af      	movs	r0, #175	; 0xaf
 8000e4c:	f7ff ff7c 	bl	8000d48 <I2C_Write_Byte>
    
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e007      	b.n	8000e72 <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000e78:	dbf3      	blt.n	8000e62 <er_oled_clear+0xe>
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4613      	mov	r3, r2
 8000e94:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2b48      	cmp	r3, #72	; 0x48
 8000e9a:	dc61      	bgt.n	8000f60 <er_oled_pixel+0xda>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b28      	cmp	r3, #40	; 0x28
 8000ea0:	dc5e      	bgt.n	8000f60 <er_oled_pixel+0xda>
    if(color)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d02c      	beq.n	8000f02 <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	da00      	bge.n	8000eb0 <er_oled_pixel+0x2a>
 8000eae:	3307      	adds	r3, #7
 8000eb0:	10db      	asrs	r3, r3, #3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	440b      	add	r3, r1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	440b      	add	r3, r1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b259      	sxtb	r1, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4258      	negs	r0, r3
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	f000 0007 	and.w	r0, r0, #7
 8000ed8:	bf58      	it	pl
 8000eda:	4243      	negpl	r3, r0
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f303 	lsl.w	r3, r0, r3
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	b259      	sxtb	r1, r3
 8000ee8:	4613      	mov	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	b2ca      	uxtb	r2, r1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e02f      	b.n	8000f62 <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da00      	bge.n	8000f0a <er_oled_pixel+0x84>
 8000f08:	3307      	adds	r3, #7
 8000f0a:	10db      	asrs	r3, r3, #3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4619      	mov	r1, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	440b      	add	r3, r1
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	440b      	add	r3, r1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b259      	sxtb	r1, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	4258      	negs	r0, r3
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	f000 0007 	and.w	r0, r0, #7
 8000f32:	bf58      	it	pl
 8000f34:	4243      	negpl	r3, r0
 8000f36:	2001      	movs	r0, #1
 8000f38:	fa00 f303 	lsl.w	r3, r0, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	400b      	ands	r3, r1
 8000f44:	b259      	sxtb	r1, r3
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b2ca      	uxtb	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e000      	b.n	8000f62 <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 8000f60:	bf00      	nop
}
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71bb      	strb	r3, [r7, #6]
 8000f82:	460b      	mov	r3, r1
 8000f84:	717b      	strb	r3, [r7, #5]
 8000f86:	4613      	mov	r3, r2
 8000f88:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 8000f92:	2308      	movs	r3, #8
 8000f94:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 8000f96:	797b      	ldrb	r3, [r7, #5]
 8000f98:	3b20      	subs	r3, #32
 8000f9a:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 8000f9c:	793b      	ldrb	r3, [r7, #4]
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	d104      	bne.n	8000fac <er_oled_char+0x40>
    	position = 0x8000;
 8000fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa6:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 8000fa8:	2310      	movs	r3, #16
 8000faa:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 8000fac:	2300      	movs	r3, #0
 8000fae:	75fb      	strb	r3, [r7, #23]
 8000fb0:	e0b1      	b.n	8001116 <er_oled_char+0x1aa>
        if(size == 12)
 8000fb2:	793b      	ldrb	r3, [r7, #4]
 8000fb4:	2b0c      	cmp	r3, #12
 8000fb6:	d11d      	bne.n	8000ff4 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 8000fb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00b      	beq.n	8000fd8 <er_oled_char+0x6c>
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	7df9      	ldrb	r1, [r7, #23]
 8000fc4:	4858      	ldr	r0, [pc, #352]	; (8001128 <er_oled_char+0x1bc>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4403      	add	r3, r0
 8000fd0:	440b      	add	r3, r1
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	82bb      	strh	r3, [r7, #20]
 8000fd6:	e06c      	b.n	80010b2 <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	7df9      	ldrb	r1, [r7, #23]
 8000fdc:	4852      	ldr	r0, [pc, #328]	; (8001128 <er_oled_char+0x1bc>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4403      	add	r3, r0
 8000fe8:	440b      	add	r3, r1
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	82bb      	strh	r3, [r7, #20]
 8000ff2:	e05e      	b.n	80010b2 <er_oled_char+0x146>
        }
        else if(size == 16)
 8000ff4:	793b      	ldrb	r3, [r7, #4]
 8000ff6:	2b10      	cmp	r3, #16
 8000ff8:	d117      	bne.n	800102a <er_oled_char+0xbe>
        {            
            if(mode)temp = Font1608[ch][i];
 8000ffa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d008      	beq.n	8001014 <er_oled_char+0xa8>
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	4949      	ldr	r1, [pc, #292]	; (800112c <er_oled_char+0x1c0>)
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	440a      	add	r2, r1
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	82bb      	strh	r3, [r7, #20]
 8001012:	e04e      	b.n	80010b2 <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	4944      	ldr	r1, [pc, #272]	; (800112c <er_oled_char+0x1c0>)
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	440a      	add	r2, r1
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	82bb      	strh	r3, [r7, #20]
 8001028:	e043      	b.n	80010b2 <er_oled_char+0x146>
        }
        else {
            if(mode) {
 800102a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01c      	beq.n	800106c <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	f1a3 0210 	sub.w	r2, r3, #16
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	493c      	ldr	r1, [pc, #240]	; (8001130 <er_oled_char+0x1c4>)
 800103e:	0192      	lsls	r2, r2, #6
 8001040:	440a      	add	r2, r1
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f1a3 0210 	sub.w	r2, r3, #16
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	3301      	adds	r3, #1
 8001058:	4935      	ldr	r1, [pc, #212]	; (8001130 <er_oled_char+0x1c4>)
 800105a:	0192      	lsls	r2, r2, #6
 800105c:	440a      	add	r2, r1
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b29a      	uxth	r2, r3
 8001064:	8abb      	ldrh	r3, [r7, #20]
 8001066:	4313      	orrs	r3, r2
 8001068:	82bb      	strh	r3, [r7, #20]
 800106a:	e022      	b.n	80010b2 <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	f1a3 0210 	sub.w	r2, r3, #16
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	492e      	ldr	r1, [pc, #184]	; (8001130 <er_oled_char+0x1c4>)
 8001078:	0192      	lsls	r2, r2, #6
 800107a:	440a      	add	r2, r1
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b29b      	uxth	r3, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	b29b      	uxth	r3, r3
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	f1a3 0210 	sub.w	r2, r3, #16
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	3301      	adds	r3, #1
 8001096:	4926      	ldr	r1, [pc, #152]	; (8001130 <er_oled_char+0x1c4>)
 8001098:	0192      	lsls	r2, r2, #6
 800109a:	440a      	add	r2, r1
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	75bb      	strb	r3, [r7, #22]
 80010b6:	e027      	b.n	8001108 <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 80010b8:	8aba      	ldrh	r2, [r7, #20]
 80010ba:	8a7b      	ldrh	r3, [r7, #18]
 80010bc:	4013      	ands	r3, r2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <er_oled_char+0x166>
 80010c4:	79f8      	ldrb	r0, [r7, #7]
 80010c6:	79b9      	ldrb	r1, [r7, #6]
 80010c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ca:	2201      	movs	r2, #1
 80010cc:	f7ff fedb 	bl	8000e86 <er_oled_pixel>
 80010d0:	e005      	b.n	80010de <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 80010d2:	79f8      	ldrb	r0, [r7, #7]
 80010d4:	79b9      	ldrb	r1, [r7, #6]
 80010d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d8:	2200      	movs	r2, #0
 80010da:	f7ff fed4 	bl	8000e86 <er_oled_pixel>
            temp <<= 1;
 80010de:	8abb      	ldrh	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	82bb      	strh	r3, [r7, #20]
            y++;
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	3301      	adds	r3, #1
 80010e8:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 80010ea:	79ba      	ldrb	r2, [r7, #6]
 80010ec:	7c3b      	ldrb	r3, [r7, #16]
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	793b      	ldrb	r3, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d105      	bne.n	8001102 <er_oled_char+0x196>
            {
                y = y0;
 80010f6:	7c3b      	ldrb	r3, [r7, #16]
 80010f8:	71bb      	strb	r3, [r7, #6]
                x++;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	3301      	adds	r3, #1
 80010fe:	71fb      	strb	r3, [r7, #7]
                break;
 8001100:	e006      	b.n	8001110 <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 8001102:	7dbb      	ldrb	r3, [r7, #22]
 8001104:	3301      	adds	r3, #1
 8001106:	75bb      	strb	r3, [r7, #22]
 8001108:	7dba      	ldrb	r2, [r7, #22]
 800110a:	7c7b      	ldrb	r3, [r7, #17]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3d3      	bcc.n	80010b8 <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	3301      	adds	r3, #1
 8001114:	75fb      	strb	r3, [r7, #23]
 8001116:	7dfa      	ldrb	r2, [r7, #23]
 8001118:	793b      	ldrb	r3, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	f4ff af49 	bcc.w	8000fb2 <er_oled_char+0x46>
            }
        }
    }
}
 8001120:	bf00      	nop
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}
 8001128:	0800c698 	.word	0x0800c698
 800112c:	0800cb0c 	.word	0x0800cb0c
 8001130:	0800d0fc 	.word	0x0800d0fc

08001134 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af02      	add	r7, sp, #8
 800113a:	603a      	str	r2, [r7, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	460b      	mov	r3, r1
 8001144:	71bb      	strb	r3, [r7, #6]
 8001146:	4613      	mov	r3, r2
 8001148:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {       
 800114a:	e02c      	b.n	80011a6 <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 800114c:	79fa      	ldrb	r2, [r7, #7]
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 8001158:	429a      	cmp	r2, r3
 800115a:	dd0f      	ble.n	800117c <er_oled_string+0x48>
            x = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	71fb      	strb	r3, [r7, #7]
            y += Size;
 8001160:	79ba      	ldrb	r2, [r7, #6]
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	4413      	add	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 8001168:	79ba      	ldrb	r2, [r7, #6]
 800116a:	797b      	ldrb	r3, [r7, #5]
 800116c:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001170:	429a      	cmp	r2, r3
 8001172:	dd03      	ble.n	800117c <er_oled_string+0x48>
                y = x = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	71bb      	strb	r3, [r7, #6]
            }
        }
        
        er_oled_char(x, y, *pString, Size, Mode, buffer);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	797c      	ldrb	r4, [r7, #5]
 8001182:	79b9      	ldrb	r1, [r7, #6]
 8001184:	79f8      	ldrb	r0, [r7, #7]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	7e3b      	ldrb	r3, [r7, #24]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	4623      	mov	r3, r4
 8001190:	f7ff feec 	bl	8000f6c <er_oled_char>
        x += Size / 2;
 8001194:	797b      	ldrb	r3, [r7, #5]
 8001196:	085b      	lsrs	r3, r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4413      	add	r3, r2
 800119e:	71fb      	strb	r3, [r7, #7]
        pString++;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {       
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ce      	bne.n	800114c <er_oled_string+0x18>
    }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}

080011b6 <er_oled_bitmap>:
        }
    }
}

void er_oled_bitmap(uint8_t x,uint8_t y,const uint8_t *pBmp, uint8_t chWidth, uint8_t chHeight, uint8_t* buffer)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	603a      	str	r2, [r7, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	460b      	mov	r3, r1
 80011c6:	71bb      	strb	r3, [r7, #6]
 80011c8:	4613      	mov	r3, r2
 80011ca:	717b      	strb	r3, [r7, #5]
	uint8_t i, j, byteWidth = (chWidth + 7)/8;
 80011cc:	797b      	ldrb	r3, [r7, #5]
 80011ce:	3307      	adds	r3, #7
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da00      	bge.n	80011d6 <er_oled_bitmap+0x20>
 80011d4:	3307      	adds	r3, #7
 80011d6:	10db      	asrs	r3, r3, #3
 80011d8:	737b      	strb	r3, [r7, #13]
	for(j = 0;j < chHeight;j++){
 80011da:	2300      	movs	r3, #0
 80011dc:	73bb      	strb	r3, [r7, #14]
 80011de:	e02c      	b.n	800123a <er_oled_bitmap+0x84>
		for(i = 0;i <chWidth;i++){
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e022      	b.n	800122c <er_oled_bitmap+0x76>
			if((pBmp[j * byteWidth + i / 8]) & (128 >> (i & 7))){
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	7b7a      	ldrb	r2, [r7, #13]
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	08d2      	lsrs	r2, r2, #3
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	4413      	add	r3, r2
 80011f6:	461a      	mov	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	fa42 f303 	asr.w	r3, r2, r3
 800120c:	400b      	ands	r3, r1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d009      	beq.n	8001226 <er_oled_bitmap+0x70>
				er_oled_pixel(x + i,y + j, 1, buffer);
 8001212:	79fa      	ldrb	r2, [r7, #7]
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	18d0      	adds	r0, r2, r3
 8001218:	79ba      	ldrb	r2, [r7, #6]
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	18d1      	adds	r1, r2, r3
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	2201      	movs	r2, #1
 8001222:	f7ff fe30 	bl	8000e86 <er_oled_pixel>
		for(i = 0;i <chWidth;i++){
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	3301      	adds	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	797b      	ldrb	r3, [r7, #5]
 8001230:	429a      	cmp	r2, r3
 8001232:	d3d8      	bcc.n	80011e6 <er_oled_bitmap+0x30>
	for(j = 0;j < chHeight;j++){
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	3301      	adds	r3, #1
 8001238:	73bb      	strb	r3, [r7, #14]
 800123a:	7bba      	ldrb	r2, [r7, #14]
 800123c:	7e3b      	ldrb	r3, [r7, #24]
 800123e:	429a      	cmp	r2, r3
 8001240:	d3ce      	bcc.n	80011e0 <er_oled_bitmap+0x2a>
			}
		}
	}		
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <er_oled_display>:

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;   
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {         
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e029      	b.n	80012ac <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */     
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	3b50      	subs	r3, #80	; 0x50
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fd71 	bl	8000d48 <I2C_Write_Byte>
        command(0x0c);   /* set low column address */      
 8001266:	2100      	movs	r1, #0
 8001268:	200c      	movs	r0, #12
 800126a:	f7ff fd6d 	bl	8000d48 <I2C_Write_Byte>
        command(0x11);  /* set high column address */           
 800126e:	2100      	movs	r1, #0
 8001270:	2011      	movs	r0, #17
 8001272:	f7ff fd69 	bl	8000d48 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8001276:	2300      	movs	r3, #0
 8001278:	73bb      	strb	r3, [r7, #14]
 800127a:	e011      	b.n	80012a0 <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 800127c:	7bb9      	ldrb	r1, [r7, #14]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fd57 	bl	8000d48 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	3301      	adds	r3, #1
 800129e:	73bb      	strb	r3, [r7, #14]
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	2b47      	cmp	r3, #71	; 0x47
 80012a4:	d9ea      	bls.n	800127c <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {         
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	3301      	adds	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d9d2      	bls.n	8001258 <er_oled_display+0xe>
        }        
    }
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <er_oled_time>:

void er_oled_time(const char *pString)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b0de      	sub	sp, #376	; 0x178
 80012be:	af02      	add	r7, sp, #8
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	6018      	str	r0, [r3, #0]
	uint8_t oled_buf[WIDTH * HEIGHT / 8];

	er_oled_clear(oled_buf);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fdc3 	bl	8000e54 <er_oled_clear>
    er_oled_char( 0, 4, *pString++,  32, 1, oled_buf);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1d3a      	adds	r2, r7, #4
 80012d4:	1c59      	adds	r1, r3, #1
 80012d6:	6011      	str	r1, [r2, #0]
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2320      	movs	r3, #32
 80012e6:	2104      	movs	r1, #4
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fe3f 	bl	8000f6c <er_oled_char>
    er_oled_char(16, 4, *pString++ , 32, 1, oled_buf);
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1d3a      	adds	r2, r7, #4
 80012f4:	1c59      	adds	r1, r3, #1
 80012f6:	6011      	str	r1, [r2, #0]
 80012f8:	781a      	ldrb	r2, [r3, #0]
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	2301      	movs	r3, #1
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2320      	movs	r3, #32
 8001306:	2104      	movs	r1, #4
 8001308:	2010      	movs	r0, #16
 800130a:	f7ff fe2f 	bl	8000f6c <er_oled_char>
    er_oled_char(40, 4, *pString++ , 32, 1, oled_buf);
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	1d3a      	adds	r2, r7, #4
 8001314:	1c59      	adds	r1, r3, #1
 8001316:	6011      	str	r1, [r2, #0]
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	2301      	movs	r3, #1
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2320      	movs	r3, #32
 8001326:	2104      	movs	r1, #4
 8001328:	2028      	movs	r0, #40	; 0x28
 800132a:	f7ff fe1f 	bl	8000f6c <er_oled_char>
    er_oled_char(56, 4, *pString   , 32, 1, oled_buf);
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	2301      	movs	r3, #1
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2320      	movs	r3, #32
 8001340:	2104      	movs	r1, #4
 8001342:	2038      	movs	r0, #56	; 0x38
 8001344:	f7ff fe12 	bl	8000f6c <er_oled_char>

    er_oled_pixel(36, 12, 1, oled_buf);
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2201      	movs	r2, #1
 800134e:	210c      	movs	r1, #12
 8001350:	2024      	movs	r0, #36	; 0x24
 8001352:	f7ff fd98 	bl	8000e86 <er_oled_pixel>
	er_oled_pixel(36, 13, 1, oled_buf);
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2201      	movs	r2, #1
 800135c:	210d      	movs	r1, #13
 800135e:	2024      	movs	r0, #36	; 0x24
 8001360:	f7ff fd91 	bl	8000e86 <er_oled_pixel>
	er_oled_pixel(36, 14, 1, oled_buf);
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	2201      	movs	r2, #1
 800136a:	210e      	movs	r1, #14
 800136c:	2024      	movs	r0, #36	; 0x24
 800136e:	f7ff fd8a 	bl	8000e86 <er_oled_pixel>
	er_oled_pixel(36, 28, 1, oled_buf);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2201      	movs	r2, #1
 8001378:	211c      	movs	r1, #28
 800137a:	2024      	movs	r0, #36	; 0x24
 800137c:	f7ff fd83 	bl	8000e86 <er_oled_pixel>
	er_oled_pixel(36, 27, 1, oled_buf);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	2201      	movs	r2, #1
 8001386:	211b      	movs	r1, #27
 8001388:	2024      	movs	r0, #36	; 0x24
 800138a:	f7ff fd7c 	bl	8000e86 <er_oled_pixel>
	er_oled_pixel(36, 26, 1, oled_buf);
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	2201      	movs	r2, #1
 8001394:	211a      	movs	r1, #26
 8001396:	2024      	movs	r0, #36	; 0x24
 8001398:	f7ff fd75 	bl	8000e86 <er_oled_pixel>

	er_oled_display(oled_buf);
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff52 	bl	800124a <er_oled_display>
}
 80013a6:	bf00      	nop
 80013a8:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <er_oled_print_2digit>:

void er_oled_print_2digit(int value){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0e0      	sub	sp, #384	; 0x180
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	6018      	str	r0, [r3, #0]
  uint8_t oled_buf[WIDTH * HEIGHT / 8] = {0};
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4618      	mov	r0, r3
 80013c0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013c4:	461a      	mov	r2, r3
 80013c6:	2100      	movs	r1, #0
 80013c8:	f00a fc4d 	bl	800bc66 <memset>
  char c = (char) ( ((int) '0') + (value % 10));
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <er_oled_print_2digit+0x9c>)
 80013d2:	fb83 1302 	smull	r1, r3, r3, r2
 80013d6:	1099      	asrs	r1, r3, #2
 80013d8:	17d3      	asrs	r3, r2, #31
 80013da:	1ac9      	subs	r1, r1, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	1ad1      	subs	r1, r2, r3
 80013e6:	b2cb      	uxtb	r3, r1
 80013e8:	3330      	adds	r3, #48	; 0x30
 80013ea:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
  char d = (char) ( ((int) '0') + (value / 10));
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <er_oled_print_2digit+0x9c>)
 80013f4:	fb82 1203 	smull	r1, r2, r2, r3
 80013f8:	1092      	asrs	r2, r2, #2
 80013fa:	17db      	asrs	r3, r3, #31
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	3330      	adds	r3, #48	; 0x30
 8001402:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
  er_oled_char(27, 14, d, 12, 1, oled_buf);
 8001406:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	2301      	movs	r3, #1
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	230c      	movs	r3, #12
 8001416:	210e      	movs	r1, #14
 8001418:	201b      	movs	r0, #27
 800141a:	f7ff fda7 	bl	8000f6c <er_oled_char>
  er_oled_char(36, 14, c, 12, 1, oled_buf);
 800141e:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	2301      	movs	r3, #1
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	230c      	movs	r3, #12
 800142e:	210e      	movs	r1, #14
 8001430:	2024      	movs	r0, #36	; 0x24
 8001432:	f7ff fd9b 	bl	8000f6c <er_oled_char>
  er_oled_display(oled_buf);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff05 	bl	800124a <er_oled_display>

}
 8001440:	bf00      	nop
 8001442:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	66666667 	.word	0x66666667

08001450 <_angle_correction>:





int _angle_correction(int measured_angle){
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  //given a measured angle, get back a warped angle interpolated from measured corrections
  int i=0;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  while(measured_angle > MAP_ANGLE_MEASURED[i+1]) i++;
 800145c:	e002      	b.n	8001464 <_angle_correction+0x14>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3301      	adds	r3, #1
 8001468:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <_angle_correction+0x98>)
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	dcf4      	bgt.n	800145e <_angle_correction+0xe>

  int low_m = MAP_ANGLE_MEASURED[i];
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <_angle_correction+0x98>)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	61bb      	str	r3, [r7, #24]
  int high_m = MAP_ANGLE_MEASURED[i+1];
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <_angle_correction+0x98>)
 8001484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001488:	617b      	str	r3, [r7, #20]
  int low_r = MAP_ANGLE_REAL[i];
 800148a:	4a18      	ldr	r2, [pc, #96]	; (80014ec <_angle_correction+0x9c>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	613b      	str	r3, [r7, #16]
  int high_r = MAP_ANGLE_REAL[i+1];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	3301      	adds	r3, #1
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <_angle_correction+0x9c>)
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	60fb      	str	r3, [r7, #12]

  int scaled = (int)((high_r-low_r)*(measured_angle-low_m)/(float)(high_m-low_m));
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	1a8a      	subs	r2, r1, r2
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ce:	ee17 3a90 	vmov	r3, s15
 80014d2:	60bb      	str	r3, [r7, #8]
  return (low_r + scaled);
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	4413      	add	r3, r2
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	0800d3e0 	.word	0x0800d3e0
 80014ec:	0800d3bc 	.word	0x0800d3bc

080014f0 <_get_pad_angle>:


int _get_pad_angle(int p1, int p2){
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
    //return angle from 0 to 120 degrees between two pads given their two values
    if (p1 == 0) return 120;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <_get_pad_angle+0x14>
 8001500:	2378      	movs	r3, #120	; 0x78
 8001502:	e02c      	b.n	800155e <_get_pad_angle+0x6e>
    if (p2 == 0) return 0;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <_get_pad_angle+0x1e>
 800150a:	2300      	movs	r3, #0
 800150c:	e027      	b.n	800155e <_get_pad_angle+0x6e>
    return round(((float)(p2)/(float)(p1+p2))*120.0);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001526:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800152a:	ee16 0a90 	vmov	r0, s13
 800152e:	f7fe ffdb 	bl	80004e8 <__aeabi_f2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <_get_pad_angle+0x78>)
 8001538:	f7ff f82e 	bl	8000598 <__aeabi_dmul>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	ec44 3b17 	vmov	d7, r3, r4
 8001544:	eeb0 0a47 	vmov.f32	s0, s14
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	f00a ffa6 	bl	800c49c <round>
 8001550:	ec54 3b10 	vmov	r3, r4, d0
 8001554:	4618      	mov	r0, r3
 8001556:	4621      	mov	r1, r4
 8001558:	f7ff fa30 	bl	80009bc <__aeabi_d2iz>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}
 8001566:	bf00      	nop
 8001568:	405e0000 	.word	0x405e0000

0800156c <_get_angle>:


int _get_angle(int* c) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  //c[0] is proximity
  //60 min on clock, so 6 deg resolution
  //3 pads.  take top 2 values, map linearly to 120 degree slice.
  int angle = ANGLE_OFFSET;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  int warped_angle;

  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3304      	adds	r3, #4
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	330c      	adds	r3, #12
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	dd20      	ble.n	80015ca <_get_angle+0x5e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3308      	adds	r3, #8
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	330c      	adds	r3, #12
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	dd18      	ble.n	80015ca <_get_angle+0x5e>
    int pos1 = c[1]-c[3];
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	330c      	adds	r3, #12
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	623b      	str	r3, [r7, #32]
    int pos2 = c[2]-c[3];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3308      	adds	r3, #8
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	330c      	adds	r3, #12
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	61fb      	str	r3, [r7, #28]
    angle += _get_pad_angle(pos1, pos2);
 80015b8:	69f9      	ldr	r1, [r7, #28]
 80015ba:	6a38      	ldr	r0, [r7, #32]
 80015bc:	f7ff ff98 	bl	80014f0 <_get_pad_angle>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	4413      	add	r3, r2
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 80015c8:	e042      	b.n	8001650 <_get_angle+0xe4>
  }

  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3308      	adds	r3, #8
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3304      	adds	r3, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dd21      	ble.n	800161e <_get_angle+0xb2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	330c      	adds	r3, #12
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3304      	adds	r3, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dd19      	ble.n	800161e <_get_angle+0xb2>
    int pos1 = c[2]-c[1];
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3308      	adds	r3, #8
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3304      	adds	r3, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	61bb      	str	r3, [r7, #24]
    int pos2 = c[3]-c[1];
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	330c      	adds	r3, #12
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3304      	adds	r3, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	617b      	str	r3, [r7, #20]
    angle += _get_pad_angle(pos1, pos2) + 120;
 800160a:	6979      	ldr	r1, [r7, #20]
 800160c:	69b8      	ldr	r0, [r7, #24]
 800160e:	f7ff ff6f 	bl	80014f0 <_get_pad_angle>
 8001612:	4603      	mov	r3, r0
 8001614:	3378      	adds	r3, #120	; 0x78
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	4413      	add	r3, r2
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 800161c:	e018      	b.n	8001650 <_get_angle+0xe4>
  }

  else { //third third, between 3 and 1
    int pos1 = c[3]-c[2];
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	330c      	adds	r3, #12
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3308      	adds	r3, #8
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	613b      	str	r3, [r7, #16]
    int pos2 = c[1]-c[2];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3308      	adds	r3, #8
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	60fb      	str	r3, [r7, #12]
    angle += _get_pad_angle(pos1, pos2) + 240;
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	6938      	ldr	r0, [r7, #16]
 8001642:	f7ff ff55 	bl	80014f0 <_get_pad_angle>
 8001646:	4603      	mov	r3, r0
 8001648:	33f0      	adds	r3, #240	; 0xf0
 800164a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164c:	4413      	add	r3, r2
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  angle %= 360;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <_get_angle+0x114>)
 8001654:	fb82 1203 	smull	r1, r2, r2, r3
 8001658:	441a      	add	r2, r3
 800165a:	1211      	asrs	r1, r2, #8
 800165c:	17da      	asrs	r2, r3, #31
 800165e:	1a8a      	subs	r2, r1, r2
 8001660:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001664:	fb01 f202 	mul.w	r2, r1, r2
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  warped_angle = _angle_correction(angle);
 800166c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800166e:	f7ff feef 	bl	8001450 <_angle_correction>
 8001672:	60b8      	str	r0, [r7, #8]

  return warped_angle;
 8001674:	68bb      	ldr	r3, [r7, #8]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	b60b60b7 	.word	0xb60b60b7

08001684 <_get_min>:


int _get_min(int* c) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	int angle = _get_angle(c);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff6d 	bl	800156c <_get_angle>
 8001692:	60f8      	str	r0, [r7, #12]
	return angle/6;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <_get_min+0x24>)
 8001698:	fb82 1203 	smull	r1, r2, r2, r3
 800169c:	17db      	asrs	r3, r3, #31
 800169e:	1ad3      	subs	r3, r2, r3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2aaaaaab 	.word	0x2aaaaaab

080016ac <_get_min_if_pressed>:


int _get_min_if_pressed(int* c){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	//return -1 if not pressed, otherwise return a logical minute value
	if (c[0] <= IQS_TOUCH_THRESH) return -1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b0a      	cmp	r3, #10
 80016ba:	dc02      	bgt.n	80016c2 <_get_min_if_pressed+0x16>
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	e003      	b.n	80016ca <_get_min_if_pressed+0x1e>
	else return _get_min(c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffde 	bl	8001684 <_get_min>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <iqs263_poll_raw>:


void iqs263_poll_raw(int* coords){
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]

  //uint16_t coords[4];

  uint8_t coords_raw[8];

  iqs263_read(0x06, coords_raw, 8);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	2208      	movs	r2, #8
 80016e0:	4619      	mov	r1, r3
 80016e2:	2006      	movs	r0, #6
 80016e4:	f000 f888 	bl	80017f8 <iqs263_read>

  for (int i=0; i<4; i++){
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e019      	b.n	8001722 <iqs263_poll_raw+0x50>
	  coords[i] = (coords_raw[2*i+1] << 8) | (coords_raw[2*i] & 0xFF);
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	3301      	adds	r3, #1
 80016f4:	f107 0218 	add.w	r2, r7, #24
 80016f8:	4413      	add	r3, r2
 80016fa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80016fe:	021a      	lsls	r2, r3, #8
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	f107 0118 	add.w	r1, r7, #24
 8001708:	440b      	add	r3, r1
 800170a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800170e:	4618      	mov	r0, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	440b      	add	r3, r1
 8001718:	4302      	orrs	r2, r0
 800171a:	601a      	str	r2, [r3, #0]
  for (int i=0; i<4; i++){
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b03      	cmp	r3, #3
 8001726:	dde2      	ble.n	80016ee <iqs263_poll_raw+0x1c>
  }
  //c[0] is proximity

}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <setup_iqs263>:


HAL_StatusTypeDef setup_iqs263() {
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af04      	add	r7, sp, #16

	uint8_t c;
	HAL_StatusTypeDef resp = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	711a      	strb	r2, [r3, #4]

	//check product num
	while (resp == HAL_ERROR){
 8001742:	e00e      	b.n	8001762 <setup_iqs263+0x32>
		resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x00, sizeof(uint8_t), &c, sizeof(uint8_t), HAL_MAX_DELAY);
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2301      	movs	r3, #1
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	1dbb      	adds	r3, r7, #6
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	2200      	movs	r2, #0
 8001756:	2188      	movs	r1, #136	; 0x88
 8001758:	4826      	ldr	r0, [pc, #152]	; (80017f4 <setup_iqs263+0xc4>)
 800175a:	f002 fa73 	bl	8003c44 <HAL_I2C_Mem_Read>
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d0ed      	beq.n	8001744 <setup_iqs263+0x14>
	}

	if (c != 0x3C) {
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	2b3c      	cmp	r3, #60	; 0x3c
 800176c:	d001      	beq.n	8001772 <setup_iqs263+0x42>
	  //ERROR - should read product code 0x3C
	  return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e03c      	b.n	80017ec <setup_iqs263+0xbc>
	}

	HAL_Delay(100);
 8001772:	2064      	movs	r0, #100	; 0x64
 8001774:	f001 fcf0 	bl	8003158 <HAL_Delay>


	//now write and read 0x0E to address 0x0D
	out_data[0] = 0x0E;
 8001778:	230e      	movs	r3, #14
 800177a:	703b      	strb	r3, [r7, #0]

	resp = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8001780:	e00e      	b.n	80017a0 <setup_iqs263+0x70>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0D, 1, out_data, 1, HAL_MAX_DELAY);
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	2301      	movs	r3, #1
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	463b      	mov	r3, r7
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2301      	movs	r3, #1
 8001792:	220d      	movs	r2, #13
 8001794:	2188      	movs	r1, #136	; 0x88
 8001796:	4817      	ldr	r0, [pc, #92]	; (80017f4 <setup_iqs263+0xc4>)
 8001798:	f002 f940 	bl	8003a1c <HAL_I2C_Mem_Write>
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d0ed      	beq.n	8001782 <setup_iqs263+0x52>
	}
	HAL_Delay(100);
 80017a6:	2064      	movs	r0, #100	; 0x64
 80017a8:	f001 fcd6 	bl	8003158 <HAL_Delay>
	}

	HAL_Delay(50);
	*/

	out_data[0]=0x00;
 80017ac:	2300      	movs	r3, #0
 80017ae:	703b      	strb	r3, [r7, #0]
	//time average filter coef in bits 5:4 (00 is slowest, 11 is fastest), counts filtering for noise in bits 1:0 (00 is no filter, 11 is slowest).
	out_data[1]=0b00001001;
 80017b0:	2309      	movs	r3, #9
 80017b2:	707b      	strb	r3, [r7, #1]
	//lets go into Low Power mode if we have a prolonged state.	Wake on  movement on CH3
	out_data[2]=0x00;
 80017b4:	2300      	movs	r3, #0
 80017b6:	70bb      	strb	r3, [r7, #2]
	//out_data[2]=0b10001000;
	//lets disable turbo and only sample at fixed period 40Hz (given 2MHz clock)
	//out_data[3]=0x00;
	out_data[3]=0b00000110;
 80017b8:	2306      	movs	r3, #6
 80017ba:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x00;
 80017bc:	2300      	movs	r3, #0
 80017be:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80017c4:	e00e      	b.n	80017e4 <setup_iqs263+0xb4>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, out_data, 5, HAL_MAX_DELAY);
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	2305      	movs	r3, #5
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	463b      	mov	r3, r7
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2301      	movs	r3, #1
 80017d6:	2209      	movs	r2, #9
 80017d8:	2188      	movs	r1, #136	; 0x88
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <setup_iqs263+0xc4>)
 80017dc:	f002 f91e 	bl	8003a1c <HAL_I2C_Mem_Write>
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d0ed      	beq.n	80017c6 <setup_iqs263+0x96>
	while (resp == HAL_ERROR){
	    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, readback, 5, HAL_MAX_DELAY);
	}
	*/

    return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200038ec 	.word	0x200038ec

080017f8 <iqs263_read>:

  return HAL_OK;

}

HAL_StatusTypeDef iqs263_read(uint8_t addr, uint8_t* buf, uint8_t size) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af04      	add	r7, sp, #16
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]


  const uint16_t max_tries = 300;
 8001808:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800180c:	817b      	strh	r3, [r7, #10]
  uint16_t current_tries = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	81fb      	strh	r3, [r7, #14]

  HAL_StatusTypeDef resp = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	737b      	strb	r3, [r7, #13]

  while (resp == HAL_ERROR && current_tries < max_tries){
 8001816:	e014      	b.n	8001842 <iqs263_read+0x4a>
    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, addr, 1, buf, size, HAL_MAX_DELAY);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	b299      	uxth	r1, r3
 800181c:	79bb      	ldrb	r3, [r7, #6]
 800181e:	b29b      	uxth	r3, r3
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	9202      	str	r2, [sp, #8]
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2301      	movs	r3, #1
 800182e:	460a      	mov	r2, r1
 8001830:	2188      	movs	r1, #136	; 0x88
 8001832:	480d      	ldr	r0, [pc, #52]	; (8001868 <iqs263_read+0x70>)
 8001834:	f002 fa06 	bl	8003c44 <HAL_I2C_Mem_Read>
 8001838:	4603      	mov	r3, r0
 800183a:	737b      	strb	r3, [r7, #13]
    current_tries++;
 800183c:	89fb      	ldrh	r3, [r7, #14]
 800183e:	3301      	adds	r3, #1
 8001840:	81fb      	strh	r3, [r7, #14]
  while (resp == HAL_ERROR && current_tries < max_tries){
 8001842:	7b7b      	ldrb	r3, [r7, #13]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d103      	bne.n	8001850 <iqs263_read+0x58>
 8001848:	89fa      	ldrh	r2, [r7, #14]
 800184a:	897b      	ldrh	r3, [r7, #10]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3e3      	bcc.n	8001818 <iqs263_read+0x20>
  }

  if (current_tries >= max_tries) {
 8001850:	89fa      	ldrh	r2, [r7, #14]
 8001852:	897b      	ldrh	r3, [r7, #10]
 8001854:	429a      	cmp	r2, r3
 8001856:	d301      	bcc.n	800185c <iqs263_read+0x64>
	  return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <iqs263_read+0x66>
  }

  return HAL_OK;
 800185c:	2300      	movs	r3, #0

}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200038ec 	.word	0x200038ec

0800186c <iqs263_get_min_if_pressed>:
	iqs263_poll_raw(coords);
	return _get_min(coords);
}


int iqs263_get_min_if_pressed(){
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
	int* coords[4] = {0x0000, 0x0000, 0x0000, 0x0000};
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
	iqs263_poll_raw(coords);
 800187e:	463b      	mov	r3, r7
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff26 	bl	80016d2 <iqs263_poll_raw>
	return _get_min_if_pressed(coords);
 8001886:	463b      	mov	r3, r7
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff0f 	bl	80016ac <_get_min_if_pressed>
 800188e:	4603      	mov	r3, r0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018bc:	68fb      	ldr	r3, [r7, #12]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d0:	f001 fbf6 	bl	80030c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d4:	f000 f8ba 	bl	8001a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d8:	f000 faf0 	bl	8001ebc <MX_GPIO_Init>
  MX_I2C1_Init();
 80018dc:	f000 f95a 	bl	8001b94 <MX_I2C1_Init>
  MX_SPI1_Init();
 80018e0:	f000 f9fe 	bl	8001ce0 <MX_SPI1_Init>
  MX_RF_Init();
 80018e4:	f000 f996 	bl	8001c14 <MX_RF_Init>
  MX_RTC_Init();
 80018e8:	f000 f99c 	bl	8001c24 <MX_RTC_Init>
  MX_TIM1_Init();
 80018ec:	f000 fa36 	bl	8001d5c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018f0:	f006 fc8e 	bl	8008210 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of rtcMutex */
  rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 80018f4:	4832      	ldr	r0, [pc, #200]	; (80019c0 <main+0xf4>)
 80018f6:	f006 fdc9 	bl	800848c <osMutexNew>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <main+0xf8>)
 80018fe:	601a      	str	r2, [r3, #0]

  /* creation of screenTextMutex */
  screenTextMutexHandle = osMutexNew(&screenTextMutex_attributes);
 8001900:	4831      	ldr	r0, [pc, #196]	; (80019c8 <main+0xfc>)
 8001902:	f006 fdc3 	bl	800848c <osMutexNew>
 8001906:	4602      	mov	r2, r0
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <main+0x100>)
 800190a:	601a      	str	r2, [r3, #0]

  /* creation of ledStateMutex */
  ledStateMutexHandle = osMutexNew(&ledStateMutex_attributes);
 800190c:	4830      	ldr	r0, [pc, #192]	; (80019d0 <main+0x104>)
 800190e:	f006 fdbd 	bl	800848c <osMutexNew>
 8001912:	4602      	mov	r2, r0
 8001914:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <main+0x108>)
 8001916:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of bleTXqueue */
  bleTXqueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &bleTXqueue_attributes);
 8001918:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <main+0x10c>)
 800191a:	2102      	movs	r1, #2
 800191c:	2010      	movs	r0, #16
 800191e:	f006 fefd 	bl	800871c <osMessageQueueNew>
 8001922:	4602      	mov	r2, r0
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <main+0x110>)
 8001926:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of screenUpdate */
  screenUpdateHandle = osThreadNew(startScreenUpdate, NULL, &screenUpdate_attributes);
 8001928:	4a2d      	ldr	r2, [pc, #180]	; (80019e0 <main+0x114>)
 800192a:	2100      	movs	r1, #0
 800192c:	482d      	ldr	r0, [pc, #180]	; (80019e4 <main+0x118>)
 800192e:	f006 fcd9 	bl	80082e4 <osThreadNew>
 8001932:	4602      	mov	r2, r0
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <main+0x11c>)
 8001936:	601a      	str	r2, [r3, #0]

  /* creation of LEDControl */
  LEDControlHandle = osThreadNew(startLEDControl, NULL, &LEDControl_attributes);
 8001938:	4a2c      	ldr	r2, [pc, #176]	; (80019ec <main+0x120>)
 800193a:	2100      	movs	r1, #0
 800193c:	482c      	ldr	r0, [pc, #176]	; (80019f0 <main+0x124>)
 800193e:	f006 fcd1 	bl	80082e4 <osThreadNew>
 8001942:	4602      	mov	r2, r0
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <main+0x128>)
 8001946:	601a      	str	r2, [r3, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(startButtonPress, NULL, &buttonPress_attributes);
 8001948:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <main+0x12c>)
 800194a:	2100      	movs	r1, #0
 800194c:	482b      	ldr	r0, [pc, #172]	; (80019fc <main+0x130>)
 800194e:	f006 fcc9 	bl	80082e4 <osThreadNew>
 8001952:	4602      	mov	r2, r0
 8001954:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <main+0x134>)
 8001956:	601a      	str	r2, [r3, #0]

  /* creation of vibrateControl */
  vibrateControlHandle = osThreadNew(startVibrateControl, NULL, &vibrateControl_attributes);
 8001958:	4a2a      	ldr	r2, [pc, #168]	; (8001a04 <main+0x138>)
 800195a:	2100      	movs	r1, #0
 800195c:	482a      	ldr	r0, [pc, #168]	; (8001a08 <main+0x13c>)
 800195e:	f006 fcc1 	bl	80082e4 <osThreadNew>
 8001962:	4602      	mov	r2, r0
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <main+0x140>)
 8001966:	601a      	str	r2, [r3, #0]

  /* creation of rtcSecondTick */
  rtcSecondTickHandle = osThreadNew(startRTCTick, NULL, &rtcSecondTick_attributes);
 8001968:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <main+0x144>)
 800196a:	2100      	movs	r1, #0
 800196c:	4829      	ldr	r0, [pc, #164]	; (8001a14 <main+0x148>)
 800196e:	f006 fcb9 	bl	80082e4 <osThreadNew>
 8001972:	4602      	mov	r2, r0
 8001974:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <main+0x14c>)
 8001976:	601a      	str	r2, [r3, #0]

  /* creation of bleTX */
  bleTXHandle = osThreadNew(startBLETX, NULL, &bleTX_attributes);
 8001978:	4a28      	ldr	r2, [pc, #160]	; (8001a1c <main+0x150>)
 800197a:	2100      	movs	r1, #0
 800197c:	4828      	ldr	r0, [pc, #160]	; (8001a20 <main+0x154>)
 800197e:	f006 fcb1 	bl	80082e4 <osThreadNew>
 8001982:	4602      	mov	r2, r0
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <main+0x158>)
 8001986:	601a      	str	r2, [r3, #0]

  /* creation of bleRX */
  bleRXHandle = osThreadNew(startBLERX, NULL, &bleRX_attributes);
 8001988:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <main+0x15c>)
 800198a:	2100      	movs	r1, #0
 800198c:	4827      	ldr	r0, [pc, #156]	; (8001a2c <main+0x160>)
 800198e:	f006 fca9 	bl	80082e4 <osThreadNew>
 8001992:	4602      	mov	r2, r0
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <main+0x164>)
 8001996:	601a      	str	r2, [r3, #0]

  /* creation of LEDTimer */
  LEDTimerHandle = osThreadNew(startLEDTimer, NULL, &LEDTimer_attributes);
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <main+0x168>)
 800199a:	2100      	movs	r1, #0
 800199c:	4826      	ldr	r0, [pc, #152]	; (8001a38 <main+0x16c>)
 800199e:	f006 fca1 	bl	80082e4 <osThreadNew>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <main+0x170>)
 80019a6:	601a      	str	r2, [r3, #0]

  /* creation of touchRead */
  touchReadHandle = osThreadNew(startTouchRead, NULL, &touchRead_attributes);
 80019a8:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <main+0x174>)
 80019aa:	2100      	movs	r1, #0
 80019ac:	4825      	ldr	r0, [pc, #148]	; (8001a44 <main+0x178>)
 80019ae:	f006 fc99 	bl	80082e4 <osThreadNew>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <main+0x17c>)
 80019b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80019b8:	f006 fc5e 	bl	8008278 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <main+0xf0>
 80019be:	bf00      	nop
 80019c0:	0800d830 	.word	0x0800d830
 80019c4:	200039d4 	.word	0x200039d4
 80019c8:	0800d840 	.word	0x0800d840
 80019cc:	2000393c 	.word	0x2000393c
 80019d0:	0800d850 	.word	0x0800d850
 80019d4:	2000397c 	.word	0x2000397c
 80019d8:	0800d818 	.word	0x0800d818
 80019dc:	200039cc 	.word	0x200039cc
 80019e0:	0800d6d4 	.word	0x0800d6d4
 80019e4:	08002031 	.word	0x08002031
 80019e8:	2000396c 	.word	0x2000396c
 80019ec:	0800d6f8 	.word	0x0800d6f8
 80019f0:	08002221 	.word	0x08002221
 80019f4:	200038e4 	.word	0x200038e4
 80019f8:	0800d71c 	.word	0x0800d71c
 80019fc:	080024a9 	.word	0x080024a9
 8001a00:	200038e0 	.word	0x200038e0
 8001a04:	0800d740 	.word	0x0800d740
 8001a08:	080025d1 	.word	0x080025d1
 8001a0c:	200039d0 	.word	0x200039d0
 8001a10:	0800d764 	.word	0x0800d764
 8001a14:	0800260d 	.word	0x0800260d
 8001a18:	20003978 	.word	0x20003978
 8001a1c:	0800d788 	.word	0x0800d788
 8001a20:	08002815 	.word	0x08002815
 8001a24:	20003938 	.word	0x20003938
 8001a28:	0800d7ac 	.word	0x0800d7ac
 8001a2c:	08002827 	.word	0x08002827
 8001a30:	20003974 	.word	0x20003974
 8001a34:	0800d7d0 	.word	0x0800d7d0
 8001a38:	08002839 	.word	0x08002839
 8001a3c:	200038e8 	.word	0x200038e8
 8001a40:	0800d7f4 	.word	0x0800d7f4
 8001a44:	080028c5 	.word	0x080028c5
 8001a48:	20003970 	.word	0x20003970

08001a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0c0      	sub	sp, #256	; 0x100
 8001a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a56:	2248      	movs	r2, #72	; 0x48
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00a f903 	bl	800bc66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a78:	2250      	movs	r2, #80	; 0x50
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00a f8f2 	bl	800bc66 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <SystemClock_Config+0x144>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a8a:	4a41      	ldr	r2, [pc, #260]	; (8001b90 <SystemClock_Config+0x144>)
 8001a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <SystemClock_Config+0x144>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 62c0 	and.w	r2, r3, #1536	; 0x600
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	681b      	ldr	r3, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001aa2:	232b      	movs	r3, #43	; 0x2b
 8001aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001abe:	2340      	movs	r3, #64	; 0x40
 8001ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001aca:	23a0      	movs	r3, #160	; 0xa0
 8001acc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 f83b 	bl	8004b5c <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001aec:	f000 ff87 	bl	80029fe <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001af0:	236f      	movs	r3, #111	; 0x6f
 8001af2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fbaf 	bl	8005284 <HAL_RCC_ClockConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001b2c:	f000 ff67 	bl	80029fe <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001b30:	f643 0304 	movw	r3, #14340	; 0x3804
 8001b34:	64fb      	str	r3, [r7, #76]	; 0x4c
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b36:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001b44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001b52:	2310      	movs	r3, #16
 8001b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 ffe8 	bl	8005b32 <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001b68:	f000 ff49 	bl	80029fe <Error_Handler>
  /* USER CODE BEGIN Smps */


  RCC_OscInitTypeDef RCC_OscInitLSE;

  RCC_OscInitLSE.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	607b      	str	r3, [r7, #4]
  RCC_OscInitLSE.LSEState = RCC_LSE_ON;
 8001b70:	2301      	movs	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]

  if(HAL_RCC_OscConfig(&RCC_OscInitLSE) != HAL_OK){
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fff0 	bl	8004b5c <HAL_RCC_OscConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0x13a>
        Error_Handler();
 8001b82:	f000 ff3c 	bl	80029fe <Error_Handler>
  }

  /* USER CODE END Smps */
}
 8001b86:	bf00      	nop
 8001b88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	58000400 	.word	0x58000400

08001b94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <MX_I2C1_Init+0x78>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <MX_I2C1_Init+0x7c>)
 8001ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bce:	480e      	ldr	r0, [pc, #56]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001bd0:	f001 fda0 	bl	8003714 <HAL_I2C_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bda:	f000 ff10 	bl	80029fe <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bde:	2100      	movs	r1, #0
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001be2:	f002 fb65 	bl	80042b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bec:	f000 ff07 	bl	80029fe <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_I2C1_Init+0x74>)
 8001bf4:	f002 fba7 	bl	8004346 <HAL_I2CEx_ConfigDigitalFilter>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bfe:	f000 fefe 	bl	80029fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200038ec 	.word	0x200038ec
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	00300f38 	.word	0x00300f38

08001c14 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c38:	2300      	movs	r3, #0
 8001c3a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c3e:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <MX_RTC_Init+0xb8>)
 8001c40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c4a:	227f      	movs	r2, #127	; 0x7f
 8001c4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c50:	22ff      	movs	r2, #255	; 0xff
 8001c52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c6c:	481a      	ldr	r0, [pc, #104]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c6e:	f004 f9e6 	bl	800603e <HAL_RTC_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001c78:	f000 fec1 	bl	80029fe <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2201      	movs	r2, #1
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480f      	ldr	r0, [pc, #60]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001c9c:	f004 fa6d 	bl	800617a <HAL_RTC_SetTime>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8001ca6:	f000 feaa 	bl	80029fe <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001caa:	2301      	movs	r3, #1
 8001cac:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_RTC_Init+0xb4>)
 8001cc2:	f004 fb7a 	bl	80063ba <HAL_RTC_SetDate>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8001ccc:	f000 fe97 	bl	80029fe <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20003948 	.word	0x20003948
 8001cdc:	40002800 	.word	0x40002800

08001ce0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <MX_SPI1_Init+0x78>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001cec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001cf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cf8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001cfc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_SPI1_Init+0x74>)
 8001d42:	f004 fcc1 	bl	80066c8 <HAL_SPI_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001d4c:	f000 fe57 	bl	80029fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200039d8 	.word	0x200039d8
 8001d58:	40013000 	.word	0x40013000

08001d5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b09c      	sub	sp, #112	; 0x70
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	615a      	str	r2, [r3, #20]
 8001d8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2234      	movs	r2, #52	; 0x34
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f009 ff65 	bl	800bc66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d9c:	4b45      	ldr	r3, [pc, #276]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001d9e:	4a46      	ldr	r2, [pc, #280]	; (8001eb8 <MX_TIM1_Init+0x15c>)
 8001da0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001da2:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001db0:	2264      	movs	r2, #100	; 0x64
 8001db2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dba:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc0:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dc6:	483b      	ldr	r0, [pc, #236]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001dc8:	f004 ffec 	bl	8006da4 <HAL_TIM_Base_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001dd2:	f000 fe14 	bl	80029fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dda:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ddc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001de0:	4619      	mov	r1, r3
 8001de2:	4834      	ldr	r0, [pc, #208]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001de4:	f005 fc78 	bl	80076d8 <HAL_TIM_ConfigClockSource>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dee:	f000 fe06 	bl	80029fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001df2:	4830      	ldr	r0, [pc, #192]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001df4:	f005 f87c 	bl	8006ef0 <HAL_TIM_PWM_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001dfe:	f000 fdfe 	bl	80029fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e12:	4619      	mov	r1, r3
 8001e14:	4827      	ldr	r0, [pc, #156]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001e16:	f006 f8e5 	bl	8007fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001e20:	f000 fded 	bl	80029fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e24:	2360      	movs	r3, #96	; 0x60
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8001e28:	2364      	movs	r3, #100	; 0x64
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e30:	2300      	movs	r3, #0
 8001e32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e34:	2304      	movs	r3, #4
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	481a      	ldr	r0, [pc, #104]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001e4a:	f005 fb35 	bl	80074b8 <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001e54:	f000 fdd3 	bl	80029fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	4807      	ldr	r0, [pc, #28]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001e96:	f006 f905 	bl	80080a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001ea0:	f000 fdad 	bl	80029fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ea4:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <MX_TIM1_Init+0x158>)
 8001ea6:	f000 fecb 	bl	8002c40 <HAL_TIM_MspPostInit>

}
 8001eaa:	bf00      	nop
 8001eac:	3770      	adds	r7, #112	; 0x70
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20003980 	.word	0x20003980
 8001eb8:	40012c00 	.word	0x40012c00

08001ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	2004      	movs	r0, #4
 8001ed2:	f7ff fce1 	bl	8001898 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f7ff fcde 	bl	8001898 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff fcdb 	bl	8001898 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	481b      	ldr	r0, [pc, #108]	; (8001f54 <MX_GPIO_Init+0x98>)
 8001ee8:	f001 fbc0 	bl	800366c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8001eec:	2301      	movs	r3, #1
 8001eee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4814      	ldr	r0, [pc, #80]	; (8001f54 <MX_GPIO_Init+0x98>)
 8001f02:	f001 fa2b 	bl	800335c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001f06:	2338      	movs	r3, #56	; 0x38
 8001f08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_GPIO_Init+0x9c>)
 8001f0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	4619      	mov	r1, r3
 8001f16:	480f      	ldr	r0, [pc, #60]	; (8001f54 <MX_GPIO_Init+0x98>)
 8001f18:	f001 fa20 	bl	800335c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	210f      	movs	r1, #15
 8001f20:	2009      	movs	r0, #9
 8001f22:	f001 f9f3 	bl	800330c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f26:	2009      	movs	r0, #9
 8001f28:	f001 fa0a 	bl	8003340 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	210f      	movs	r1, #15
 8001f30:	200a      	movs	r0, #10
 8001f32:	f001 f9eb 	bl	800330c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f36:	200a      	movs	r0, #10
 8001f38:	f001 fa02 	bl	8003340 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	210f      	movs	r1, #15
 8001f40:	2017      	movs	r0, #23
 8001f42:	f001 f9e3 	bl	800330c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f46:	2017      	movs	r0, #23
 8001f48:	f001 f9fa 	bl	8003340 <HAL_NVIC_EnableIRQ>

}
 8001f4c:	bf00      	nop
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	48000400 	.word	0x48000400
 8001f58:	10310000 	.word	0x10310000

08001f5c <HAL_GPIO_EXTI_Callback>:
static inline void clear_bit(long *x, int bitNum) {
    *x &= (~(1L << bitNum));
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(buttonPressHandle, GPIO_Pin, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x40>)
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	88f9      	ldrh	r1, [r7, #6]
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2300      	movs	r3, #0
 8001f78:	2203      	movs	r2, #3
 8001f7a:	f008 fdb1 	bl	800aae0 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_EXTI_Callback+0x38>
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_GPIO_EXTI_Callback+0x44>)
 8001f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	f3bf 8f6f 	isb	sy

}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200038e0 	.word	0x200038e0
 8001fa0:	e000ed04 	.word	0xe000ed04

08001fa4 <get_RTC_hrmin>:
    return full_rtc_val;

}


void get_RTC_hrmin(char *dest) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

    RTC_TimeTypeDef cTime;
    RTC_DateTypeDef cDate;

    osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <get_RTC_hrmin+0x80>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f006 fb03 	bl	80085c0 <osMutexAcquire>
    HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8001fba:	f107 0318 	add.w	r3, r7, #24
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4819      	ldr	r0, [pc, #100]	; (8002028 <get_RTC_hrmin+0x84>)
 8001fc4:	f004 f99d 	bl	8006302 <HAL_RTC_GetTime>
    //must get date as well; RTC shadow registers will error if both aren't accessed
    HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4815      	ldr	r0, [pc, #84]	; (8002028 <get_RTC_hrmin+0x84>)
 8001fd2:	f004 faa0 	bl	8006516 <HAL_RTC_GetDate>
    osMutexRelease(rtcMutexHandle);
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <get_RTC_hrmin+0x80>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f006 fb4e 	bl	800867c <osMutexRelease>

    uint8_t  hrs = RTC_Bcd2ToByte(cTime.Hours);
 8001fe0:	7e3b      	ldrb	r3, [r7, #24]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 fb54 	bl	8006690 <RTC_Bcd2ToByte>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t mins = RTC_Bcd2ToByte(cTime.Minutes);
 8001fee:	7e7b      	ldrb	r3, [r7, #25]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fb4d 	bl	8006690 <RTC_Bcd2ToByte>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    char time[5];
    sprintf (time, "%02d%02d", hrs, mins);
 8001ffc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002000:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002004:	f107 000c 	add.w	r0, r7, #12
 8002008:	4908      	ldr	r1, [pc, #32]	; (800202c <get_RTC_hrmin+0x88>)
 800200a:	f009 feed 	bl	800bde8 <siprintf>

    strncpy(dest, time, sizeof(time));
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	2205      	movs	r2, #5
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f009 ff06 	bl	800be28 <strncpy>

}
 800201c:	bf00      	nop
 800201e:	3730      	adds	r7, #48	; 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200039d4 	.word	0x200039d4
 8002028:	20003948 	.word	0x20003948
 800202c:	0800c5f0 	.word	0x0800c5f0

08002030 <startScreenUpdate>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startScreenUpdate */
void startScreenUpdate(void *argument)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002036:	af02      	add	r7, sp, #8
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 800203c:	2201      	movs	r2, #1
 800203e:	2101      	movs	r1, #1
 8002040:	4870      	ldr	r0, [pc, #448]	; (8002204 <startScreenUpdate+0x1d4>)
 8002042:	f001 fb13 	bl	800366c <HAL_GPIO_WritePin>

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 8002046:	f7fe fe9d 	bl	8000d84 <er_oled_begin>
  er_oled_clear(oled_buf);
 800204a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe ff00 	bl	8000e54 <er_oled_clear>
  er_oled_string(6, 14, "DRAMSAY", 12, 1, oled_buf);
 8002054:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2301      	movs	r3, #1
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	230c      	movs	r3, #12
 8002060:	4a69      	ldr	r2, [pc, #420]	; (8002208 <startScreenUpdate+0x1d8>)
 8002062:	210e      	movs	r1, #14
 8002064:	2006      	movs	r0, #6
 8002066:	f7ff f865 	bl	8001134 <er_oled_string>
  er_oled_display(oled_buf);
 800206a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f8eb 	bl	800124a <er_oled_display>

  osDelay(3000);
 8002074:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002078:	f006 f9da 	bl	8008430 <osDelay>
  er_oled_clear(oled_buf);
 800207c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fee7 	bl	8000e54 <er_oled_clear>
  er_oled_display(oled_buf);
 8002086:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f8dd 	bl	800124a <er_oled_display>


  ScreenStatus_t screenStatus= SCREEN_TIME;
 8002090:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {

	  	//wait for someone to update screen state elsewhere and notify
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 8002098:	f107 029b 	add.w	r2, r7, #155	; 0x9b
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	2100      	movs	r1, #0
 80020a2:	2000      	movs	r0, #0
 80020a4:	f008 fc0e 	bl	800a8c4 <xTaskNotifyWait>
	  	switch(screenStatus){
 80020a8:	f107 039b 	add.w	r3, r7, #155	; 0x9b
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	f200 809a 	bhi.w	80021ea <startScreenUpdate+0x1ba>
 80020b6:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <startScreenUpdate+0x8c>)
 80020b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	08002201 	.word	0x08002201
 80020c4:	08002191 	.word	0x08002191
 80020c8:	080020e3 	.word	0x080020e3
	  			case SCREEN_TIME:
	  				//test time
	  				//er_oled_time("1743");

	  				//only hrmin
	  				get_RTC_hrmin(time);
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff67 	bl	8001fa4 <get_RTC_hrmin>
	  				er_oled_time(time);
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f8ed 	bl	80012ba <er_oled_time>
	  				//get_RTC_hrminsec(time);
	  				//er_oled_clear(oled_buf);
	  				//er_oled_string(0, 14, time, 12, 1, oled_buf);
	  				//er_oled_display(oled_buf);

	  				break;
 80020e0:	e08f      	b.n	8002202 <startScreenUpdate+0x1d2>

	  				break;

	  			case SCREEN_IMAGE:

	  				er_oled_clear(oled_buf);
 80020e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe feb4 	bl	8000e54 <er_oled_clear>

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 80020ec:	4b47      	ldr	r3, [pc, #284]	; (800220c <startScreenUpdate+0x1dc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fa63 	bl	80085c0 <osMutexAcquire>
	  				imageNum = ScreenState.screenImage;
 80020fa:	4b45      	ldr	r3, [pc, #276]	; (8002210 <startScreenUpdate+0x1e0>)
 80020fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002100:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	  				osMutexRelease(screenTextMutexHandle);
 8002104:	4b41      	ldr	r3, [pc, #260]	; (800220c <startScreenUpdate+0x1dc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f006 fab7 	bl	800867c <osMutexRelease>

	  				if (imageNum == 1){er_oled_bitmap(0, 0, PIC1, 72, 40, oled_buf);}
 800210e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10b      	bne.n	800212e <startScreenUpdate+0xfe>
 8002116:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	2328      	movs	r3, #40	; 0x28
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2348      	movs	r3, #72	; 0x48
 8002122:	4a3c      	ldr	r2, [pc, #240]	; (8002214 <startScreenUpdate+0x1e4>)
 8002124:	2100      	movs	r1, #0
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff f845 	bl	80011b6 <er_oled_bitmap>
 800212c:	e01a      	b.n	8002164 <startScreenUpdate+0x134>
	  				else if (imageNum == 2) {er_oled_bitmap(0, 0, PIC2, 72, 40, oled_buf);}
 800212e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002132:	2b02      	cmp	r3, #2
 8002134:	d10b      	bne.n	800214e <startScreenUpdate+0x11e>
 8002136:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2328      	movs	r3, #40	; 0x28
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2348      	movs	r3, #72	; 0x48
 8002142:	4a35      	ldr	r2, [pc, #212]	; (8002218 <startScreenUpdate+0x1e8>)
 8002144:	2100      	movs	r1, #0
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff f835 	bl	80011b6 <er_oled_bitmap>
 800214c:	e00a      	b.n	8002164 <startScreenUpdate+0x134>
	  				else {er_oled_string(0, 14, "invalid image number", 24, 1, oled_buf);}
 800214e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	2301      	movs	r3, #1
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2318      	movs	r3, #24
 800215a:	4a30      	ldr	r2, [pc, #192]	; (800221c <startScreenUpdate+0x1ec>)
 800215c:	210e      	movs	r1, #14
 800215e:	2000      	movs	r0, #0
 8002160:	f7fe ffe8 	bl	8001134 <er_oled_string>

	  				er_oled_display(oled_buf);
 8002164:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f86e 	bl	800124a <er_oled_display>
	  				osDelay(1000);
 800216e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002172:	f006 f95d 	bl	8008430 <osDelay>
	  				command(0xa7);//--set Negative display
 8002176:	2100      	movs	r1, #0
 8002178:	20a7      	movs	r0, #167	; 0xa7
 800217a:	f7fe fde5 	bl	8000d48 <I2C_Write_Byte>
	  				osDelay(1000);
 800217e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002182:	f006 f955 	bl	8008430 <osDelay>
	  				command(0xa6);//--set normal display
 8002186:	2100      	movs	r1, #0
 8002188:	20a6      	movs	r0, #166	; 0xa6
 800218a:	f7fe fddd 	bl	8000d48 <I2C_Write_Byte>
	  				break;
 800218e:	e038      	b.n	8002202 <startScreenUpdate+0x1d2>

	  			case SCREEN_TEXT:

	  				osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <startScreenUpdate+0x1dc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	4618      	mov	r0, r3
 800219a:	f006 fa11 	bl	80085c0 <osMutexAcquire>
	  				strncpy(screenText, ScreenState.screenText, sizeof(ScreenState.screenText));
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	491a      	ldr	r1, [pc, #104]	; (8002210 <startScreenUpdate+0x1e0>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f009 fe3e 	bl	800be28 <strncpy>
	  				osMutexRelease(screenTextMutexHandle);
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <startScreenUpdate+0x1dc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f006 fa63 	bl	800867c <osMutexRelease>
	  				er_oled_clear(oled_buf);
 80021b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fe4a 	bl	8000e54 <er_oled_clear>
	  				er_oled_string(0, 14, screenText, 12, 1, oled_buf);
 80021c0:	f107 0218 	add.w	r2, r7, #24
 80021c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	230c      	movs	r3, #12
 80021d0:	210e      	movs	r1, #14
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7fe ffae 	bl	8001134 <er_oled_string>
	  				er_oled_display(oled_buf);
 80021d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff f834 	bl	800124a <er_oled_display>
	  				osDelay(5);
 80021e2:	2005      	movs	r0, #5
 80021e4:	f006 f924 	bl	8008430 <osDelay>
	  				break;
 80021e8:	e00b      	b.n	8002202 <startScreenUpdate+0x1d2>

	  			default: //includes SCREEN_OFF
	  				er_oled_clear(oled_buf);
 80021ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fe30 	bl	8000e54 <er_oled_clear>
	  				er_oled_display(oled_buf);
 80021f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff f826 	bl	800124a <er_oled_display>
	  				break;
 80021fe:	e000      	b.n	8002202 <startScreenUpdate+0x1d2>
	  				break;
 8002200:	bf00      	nop
	  	xTaskNotifyWait(0x00, 0x00, &screenStatus, portMAX_DELAY);
 8002202:	e749      	b.n	8002098 <startScreenUpdate+0x68>
 8002204:	48000400 	.word	0x48000400
 8002208:	0800c60c 	.word	0x0800c60c
 800220c:	2000393c 	.word	0x2000393c
 8002210:	20003a3c 	.word	0x20003a3c
 8002214:	0800d404 	.word	0x0800d404
 8002218:	0800d56c 	.word	0x0800d56c
 800221c:	0800c614 	.word	0x0800c614

08002220 <startLEDControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDControl */
void startLEDControl(void *argument)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
   	//LedState.currentMode = LED_CONFIRM_FLASH;
   	//osMutexRelease(ledStateMutexHandle);


  //LedState Init
  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8002228:	4b98      	ldr	r3, [pc, #608]	; (800248c <startLEDControl+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	4618      	mov	r0, r3
 8002232:	f006 f9c5 	bl	80085c0 <osMutexAcquire>
  LedState.currentMode = LED_SPIRAL;
 8002236:	4b96      	ldr	r3, [pc, #600]	; (8002490 <startLEDControl+0x270>)
 8002238:	2205      	movs	r2, #5
 800223a:	701a      	strb	r2, [r3, #0]
  LedState.nextMode = LED_OFF;
 800223c:	4b94      	ldr	r3, [pc, #592]	; (8002490 <startLEDControl+0x270>)
 800223e:	2201      	movs	r2, #1
 8002240:	705a      	strb	r2, [r3, #1]
  LedState.modeTimeout = pdMS_TO_TICKS(5000);
 8002242:	4b93      	ldr	r3, [pc, #588]	; (8002490 <startLEDControl+0x270>)
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	605a      	str	r2, [r3, #4]
  osMutexRelease(ledStateMutexHandle);
 800224a:	4b90      	ldr	r3, [pc, #576]	; (800248c <startLEDControl+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f006 fa14 	bl	800867c <osMutexRelease>

  //Dotstar Init
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 8002254:	4b8f      	ldr	r3, [pc, #572]	; (8002494 <startLEDControl+0x274>)
 8002256:	60fb      	str	r3, [r7, #12]
  dotstar.numLEDs = NUM_PIXELS;
 8002258:	230c      	movs	r3, #12
 800225a:	823b      	strh	r3, [r7, #16]
  dotstar.colorOrder = DOTSTAR_BGR;
 800225c:	2306      	movs	r3, #6
 800225e:	74bb      	strb	r3, [r7, #18]
  Dotstar_Init(&dotstar);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fbe1 	bl	8000a2c <Dotstar_Init>

  ds_clear();  //turn off
 800226a:	f7fe fccb 	bl	8000c04 <ds_clear>
  ds_show();
 800226e:	f7fe fc2d 	bl	8000acc <ds_show>

  const uint8_t STANDARD_BRIGHTNESS = 20; //20, 0-255
 8002272:	2314      	movs	r3, #20
 8002274:	75fb      	strb	r3, [r7, #23]
  const uint8_t MAX_BRIGHTNESS = 0x33; //max brightness, 0x01-0xFF
 8002276:	2333      	movs	r3, #51	; 0x33
 8002278:	75bb      	strb	r3, [r7, #22]

  ds_setBrightness(STANDARD_BRIGHTNESS);
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fd51 	bl	8000d24 <ds_setBrightness>
  osDelay(1000);
 8002282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002286:	f006 f8d3 	bl	8008430 <osDelay>

  LedStatus_t currentMode;
  LedStatus_t lastLoopMode = LED_OFF;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  uint16_t counter = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t stateVar1 = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t stateVar2 = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  uint32_t color = 0x000000;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    //check state, get mode, call timer if necessary

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80022a4:	4b79      	ldr	r3, [pc, #484]	; (800248c <startLEDControl+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	4618      	mov	r0, r3
 80022ae:	f006 f987 	bl	80085c0 <osMutexAcquire>
	currentMode = LedState.currentMode;
 80022b2:	4b77      	ldr	r3, [pc, #476]	; (8002490 <startLEDControl+0x270>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	757b      	strb	r3, [r7, #21]
	if (LedState.modeTimeout){
 80022b8:	4b75      	ldr	r3, [pc, #468]	; (8002490 <startLEDControl+0x270>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <startLEDControl+0xae>
		xTaskNotifyGive(LEDTimerHandle);
 80022c0:	4b75      	ldr	r3, [pc, #468]	; (8002498 <startLEDControl+0x278>)
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	2300      	movs	r3, #0
 80022c6:	2202      	movs	r2, #2
 80022c8:	2100      	movs	r1, #0
 80022ca:	f008 fb55 	bl	800a978 <xTaskGenericNotify>
	}
	osMutexRelease(ledStateMutexHandle);
 80022ce:	4b6f      	ldr	r3, [pc, #444]	; (800248c <startLEDControl+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f006 f9d2 	bl	800867c <osMutexRelease>

	//reset count if we've switched modes
	if (lastLoopMode != currentMode) { counter = 0; stateVar1 = 0; stateVar2 = 0;}
 80022d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80022dc:	7d7b      	ldrb	r3, [r7, #21]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d007      	beq.n	80022f2 <startLEDControl+0xd2>
 80022e2:	2300      	movs	r3, #0
 80022e4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	switch(currentMode){
 80022f2:	7d7b      	ldrb	r3, [r7, #21]
 80022f4:	3b02      	subs	r3, #2
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	f200 80b3 	bhi.w	8002462 <startLEDControl+0x242>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <startLEDControl+0xe4>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	0800247d 	.word	0x0800247d
 8002308:	0800247d 	.word	0x0800247d
 800230c:	08002315 	.word	0x08002315
 8002310:	080023bb 	.word	0x080023bb

			break;
		case LED_CONFIRM_FLASH:

			//each color go from 00 to MAX_BRIGHTNESS to 00 over a second, 1000Hz=sec, ~512 steps, 2ms
			if (lastLoopMode != currentMode) { ds_fill(0xFFFFFF, 0, 12);}
 8002314:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002318:	7d7b      	ldrb	r3, [r7, #21]
 800231a:	429a      	cmp	r2, r3
 800231c:	d005      	beq.n	800232a <startLEDControl+0x10a>
 800231e:	220c      	movs	r2, #12
 8002320:	2100      	movs	r1, #0
 8002322:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002326:	f7fe fcc7 	bl	8000cb8 <ds_fill>
		    ds_setBrightness(stateVar1);
 800232a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fcf8 	bl	8000d24 <ds_setBrightness>
			ds_show();
 8002334:	f7fe fbca 	bl	8000acc <ds_show>

		    //increment color intensity
		    if (stateVar2) {stateVar1--;}
 8002338:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <startLEDControl+0x12c>
 8002340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002344:	3b01      	subs	r3, #1
 8002346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800234a:	e004      	b.n	8002356 <startLEDControl+0x136>
		    else {stateVar1++;}
 800234c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002350:	3301      	adds	r3, #1
 8002352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		    //if we hit a limit switch color scaling up or down
		    if (stateVar1 == MAX_BRIGHTNESS) {stateVar2 = 1;}
 8002356:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800235a:	7dbb      	ldrb	r3, [r7, #22]
 800235c:	429a      	cmp	r2, r3
 800235e:	d102      	bne.n	8002366 <startLEDControl+0x146>
 8002360:	2301      	movs	r3, #1
 8002362:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    if (stateVar1 == 0x00) {stateVar2 = 0;}
 8002366:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800236a:	2b00      	cmp	r3, #0
 800236c:	d102      	bne.n	8002374 <startLEDControl+0x154>
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

			osDelay(pdMS_TO_TICKS(2)); //2ms delay
 8002374:	2002      	movs	r0, #2
 8002376:	f006 f85b 	bl	8008430 <osDelay>

			if (++counter == (MAX_BRIGHTNESS*4)) { //if we hit 1 cycle here (= MAX_BRIGHTNESS*2,could *4 to set to two full cycles), set state to off
 800237a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800237c:	3301      	adds	r3, #1
 800237e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002380:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002382:	7dbb      	ldrb	r3, [r7, #22]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	429a      	cmp	r2, r3
 8002388:	d17a      	bne.n	8002480 <startLEDControl+0x260>
				ds_clear();
 800238a:	f7fe fc3b 	bl	8000c04 <ds_clear>
				ds_show();
 800238e:	f7fe fb9d 	bl	8000acc <ds_show>
				ds_setBrightness(STANDARD_BRIGHTNESS);
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fcc5 	bl	8000d24 <ds_setBrightness>

				osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <startLEDControl+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f04f 31ff 	mov.w	r1, #4294967295
 80023a2:	4618      	mov	r0, r3
 80023a4:	f006 f90c 	bl	80085c0 <osMutexAcquire>
				LedState.currentMode = LED_OFF;
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <startLEDControl+0x270>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
				osMutexRelease(ledStateMutexHandle);
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <startLEDControl+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f006 f962 	bl	800867c <osMutexRelease>
			}

			break;
 80023b8:	e062      	b.n	8002480 <startLEDControl+0x260>

		case LED_SPIRAL:

			//rotate fixed pattern around 12
			//modulo 12
			for (int i=0; i< NUM_PIXELS; i++){
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	e038      	b.n	8002432 <startLEDControl+0x212>

				if (i==(counter+2)%12){ color = 0xFFFFFF; }
 80023c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023c2:	1c99      	adds	r1, r3, #2
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <startLEDControl+0x27c>)
 80023c6:	fb83 2301 	smull	r2, r3, r3, r1
 80023ca:	105a      	asrs	r2, r3, #1
 80023cc:	17cb      	asrs	r3, r1, #31
 80023ce:	1ad2      	subs	r2, r2, r3
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	1aca      	subs	r2, r1, r3
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4293      	cmp	r3, r2
 80023de:	d103      	bne.n	80023e8 <startLEDControl+0x1c8>
 80023e0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e01b      	b.n	8002420 <startLEDControl+0x200>
				else if (i==(counter+1)%12){ color = 0xD0D0D0; }
 80023e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023ea:	1c59      	adds	r1, r3, #1
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <startLEDControl+0x27c>)
 80023ee:	fb83 2301 	smull	r2, r3, r3, r1
 80023f2:	105a      	asrs	r2, r3, #1
 80023f4:	17cb      	asrs	r3, r1, #31
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	1aca      	subs	r2, r1, r3
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4293      	cmp	r3, r2
 8002406:	d102      	bne.n	800240e <startLEDControl+0x1ee>
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <startLEDControl+0x280>)
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	e008      	b.n	8002420 <startLEDControl+0x200>
				else if (i==counter)       { color = 0xA0A0A0; }
 800240e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	429a      	cmp	r2, r3
 8002414:	d102      	bne.n	800241c <startLEDControl+0x1fc>
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <startLEDControl+0x284>)
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	e001      	b.n	8002420 <startLEDControl+0x200>
				else { color = 0x000000; }
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]

				ds_setPixelColor32B(i, color); // 'off' pixel at head
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	b29b      	uxth	r3, r3
 8002424:	69f9      	ldr	r1, [r7, #28]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fc10 	bl	8000c4c <ds_setPixelColor32B>
			for (int i=0; i< NUM_PIXELS; i++){
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	3301      	adds	r3, #1
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b0b      	cmp	r3, #11
 8002436:	ddc3      	ble.n	80023c0 <startLEDControl+0x1a0>
			}

			ds_show();
 8002438:	f7fe fb48 	bl	8000acc <ds_show>
			counter = (counter+1)%12;
 800243c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <startLEDControl+0x27c>)
 8002442:	fb83 1302 	smull	r1, r3, r3, r2
 8002446:	1059      	asrs	r1, r3, #1
 8002448:	17d3      	asrs	r3, r2, #31
 800244a:	1ac9      	subs	r1, r1, r3
 800244c:	460b      	mov	r3, r1
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	440b      	add	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	1ad1      	subs	r1, r2, r3
 8002456:	460b      	mov	r3, r1
 8002458:	84bb      	strh	r3, [r7, #36]	; 0x24
			osDelay(pdMS_TO_TICKS(50));
 800245a:	2032      	movs	r0, #50	; 0x32
 800245c:	f005 ffe8 	bl	8008430 <osDelay>

			break;
 8002460:	e00f      	b.n	8002482 <startLEDControl+0x262>

		default: //case LED_OTHER, LED_OFF, LED_NONE
			if (lastLoopMode != currentMode) {
 8002462:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002466:	7d7b      	ldrb	r3, [r7, #21]
 8002468:	429a      	cmp	r2, r3
 800246a:	d003      	beq.n	8002474 <startLEDControl+0x254>
				ds_clear();
 800246c:	f7fe fbca 	bl	8000c04 <ds_clear>
				ds_show();
 8002470:	f7fe fb2c 	bl	8000acc <ds_show>
			}
			osDelay(250);
 8002474:	20fa      	movs	r0, #250	; 0xfa
 8002476:	f005 ffdb 	bl	8008430 <osDelay>
			break;
 800247a:	e002      	b.n	8002482 <startLEDControl+0x262>
			break;
 800247c:	bf00      	nop
 800247e:	e000      	b.n	8002482 <startLEDControl+0x262>
			break;
 8002480:	bf00      	nop
	}

	lastLoopMode = currentMode;
 8002482:	7d7b      	ldrb	r3, [r7, #21]
 8002484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8002488:	e70c      	b.n	80022a4 <startLEDControl+0x84>
 800248a:	bf00      	nop
 800248c:	2000397c 	.word	0x2000397c
 8002490:	20003940 	.word	0x20003940
 8002494:	200039d8 	.word	0x200039d8
 8002498:	200038e8 	.word	0x200038e8
 800249c:	2aaaaaab 	.word	0x2aaaaaab
 80024a0:	00d0d0d0 	.word	0x00d0d0d0
 80024a4:	00a0a0a0 	.word	0x00a0a0a0

080024a8 <startButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonPress */
void startButtonPress(void *argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonPress */
  /* Infinite loop */

  //Buttons are PULLED UP and drop to 0 when pressed
  uint8_t buttonState[] = {1, 1, 1};
 80024b0:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <startButtonPress+0x11c>)
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	4611      	mov	r1, r2
 80024ba:	8019      	strh	r1, [r3, #0]
 80024bc:	3302      	adds	r3, #2
 80024be:	0c12      	lsrs	r2, r2, #16
 80024c0:	701a      	strb	r2, [r3, #0]
  uint32_t callingPin = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	//wait for rising or falling edge trigger, put calling pin in callingPin
	xTaskNotifyWait(0x00, 0x00, &callingPin, portMAX_DELAY);
 80024c6:	f107 0210 	add.w	r2, r7, #16
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	2100      	movs	r1, #0
 80024d0:	2000      	movs	r0, #0
 80024d2:	f008 f9f7 	bl	800a8c4 <xTaskNotifyWait>

	//check state of pin
	GPIO_PinState first_read = HAL_GPIO_ReadPin(GPIOB, callingPin);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	483a      	ldr	r0, [pc, #232]	; (80025c8 <startButtonPress+0x120>)
 80024de:	f001 f8ad 	bl	800363c <HAL_GPIO_ReadPin>
 80024e2:	4603      	mov	r3, r0
 80024e4:	75fb      	strb	r3, [r7, #23]

	//wait 50ms
    osDelay(50);
 80024e6:	2032      	movs	r0, #50	; 0x32
 80024e8:	f005 ffa2 	bl	8008430 <osDelay>

    //check again (debounce) to get a good reading
	if (first_read == HAL_GPIO_ReadPin(GPIOB, callingPin)){
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	4619      	mov	r1, r3
 80024f2:	4835      	ldr	r0, [pc, #212]	; (80025c8 <startButtonPress+0x120>)
 80024f4:	f001 f8a2 	bl	800363c <HAL_GPIO_ReadPin>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	4293      	cmp	r3, r2
 8002500:	d1e1      	bne.n	80024c6 <startButtonPress+0x1e>
		//when this happens (except during debouncing) so we expect this to be true
		//almost always

		//callingPin can be used as bitmask Pin 5/4/3 give 1000000/10000/1000

		if (callingPin == 0b1000 && first_read != buttonState[0]) { //button 1 trigger
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d11b      	bne.n	8002540 <startButtonPress+0x98>
 8002508:	7d3b      	ldrb	r3, [r7, #20]
 800250a:	7dfa      	ldrb	r2, [r7, #23]
 800250c:	429a      	cmp	r2, r3
 800250e:	d017      	beq.n	8002540 <startButtonPress+0x98>
		  //set buttonState
		  buttonState[0] = first_read;
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	753b      	strb	r3, [r7, #20]

		  //do stuff if button pressed
		  if (!first_read){
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <startButtonPress+0x78>
		       	osDelay(100);
 800251a:	2064      	movs	r0, #100	; 0x64
 800251c:	f005 ff88 	bl	8008430 <osDelay>
		  }

		  		    //send BLE queue indicator; button 1 = 0x0
		  		    uint16_t bleval = 0x0000 | ((!first_read) << 8);
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <startButtonPress+0x84>
 8002526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252a:	e000      	b.n	800252e <startButtonPress+0x86>
 800252c:	2300      	movs	r3, #0
 800252e:	81fb      	strh	r3, [r7, #14]
		  		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8002530:	4b26      	ldr	r3, [pc, #152]	; (80025cc <startButtonPress+0x124>)
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	f107 010e 	add.w	r1, r7, #14
 8002538:	2300      	movs	r3, #0
 800253a:	2200      	movs	r2, #0
 800253c:	f006 f974 	bl	8008828 <osMessageQueuePut>
		}
		if (callingPin == 0b10000 && first_read != buttonState[1]) { //button 2 trigger
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b10      	cmp	r3, #16
 8002544:	d11c      	bne.n	8002580 <startButtonPress+0xd8>
 8002546:	7d7b      	ldrb	r3, [r7, #21]
 8002548:	7dfa      	ldrb	r2, [r7, #23]
 800254a:	429a      	cmp	r2, r3
 800254c:	d018      	beq.n	8002580 <startButtonPress+0xd8>
		    //set buttonState
		    buttonState[1] = first_read;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	757b      	strb	r3, [r7, #21]

		    //do stuff if button pressed
		    if (!first_read){
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <startButtonPress+0xb6>
		       	osDelay(100);
 8002558:	2064      	movs	r0, #100	; 0x64
 800255a:	f005 ff69 	bl	8008430 <osDelay>
		    }

		    //send BLE queue indicator; button 2 = 0x1
		    uint16_t bleval = 0x1000 | ((!first_read) << 8);
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <startButtonPress+0xc2>
 8002564:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002568:	e001      	b.n	800256e <startButtonPress+0xc6>
 800256a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256e:	81bb      	strh	r3, [r7, #12]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <startButtonPress+0x124>)
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	f107 010c 	add.w	r1, r7, #12
 8002578:	2300      	movs	r3, #0
 800257a:	2200      	movs	r2, #0
 800257c:	f006 f954 	bl	8008828 <osMessageQueuePut>
		}
		if (callingPin == 0b100000 && first_read != buttonState[2]) { //button 3 trigger
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b20      	cmp	r3, #32
 8002584:	d19f      	bne.n	80024c6 <startButtonPress+0x1e>
 8002586:	7dbb      	ldrb	r3, [r7, #22]
 8002588:	7dfa      	ldrb	r2, [r7, #23]
 800258a:	429a      	cmp	r2, r3
 800258c:	d09b      	beq.n	80024c6 <startButtonPress+0x1e>
		    //set buttonState
		    buttonState[2] = first_read;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	75bb      	strb	r3, [r7, #22]

		    //do stuff if button pressed
		    if (!first_read){
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <startButtonPress+0xf6>
		    	osDelay(100);
 8002598:	2064      	movs	r0, #100	; 0x64
 800259a:	f005 ff49 	bl	8008430 <osDelay>
		    }

		    //send BLE queue indicator; button 3 = 0x2
		    uint16_t bleval = 0x2000 | ((!first_read) << 8);
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d102      	bne.n	80025aa <startButtonPress+0x102>
 80025a4:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80025a8:	e001      	b.n	80025ae <startButtonPress+0x106>
 80025aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ae:	817b      	strh	r3, [r7, #10]
		    osMessageQueuePut(bleTXqueueHandle, &bleval, 0, 0);
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <startButtonPress+0x124>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 010a 	add.w	r1, r7, #10
 80025b8:	2300      	movs	r3, #0
 80025ba:	2200      	movs	r2, #0
 80025bc:	f006 f934 	bl	8008828 <osMessageQueuePut>
  {
 80025c0:	e781      	b.n	80024c6 <startButtonPress+0x1e>
 80025c2:	bf00      	nop
 80025c4:	0800c62c 	.word	0x0800c62c
 80025c8:	48000400 	.word	0x48000400
 80025cc:	200039cc 	.word	0x200039cc

080025d0 <startVibrateControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startVibrateControl */
void startVibrateControl(void *argument)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startVibrateControl */

  //HAL_GPIO_WritePin(VIBRATION_GPIO_Port, VIBRATION_Pin, GPIO_PIN_RESET);

  //Init Vibration Motor PWM Parameters
  int duty_cycle = 79; //0 is off, up to ~80
 80025d8:	234f      	movs	r3, #79	; 0x4f
 80025da:	60fb      	str	r3, [r7, #12]
  htim1.Instance->CCR2 = duty_cycle;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <startVibrateControl+0x38>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  for(;;)
  {
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025e4:	2100      	movs	r1, #0
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <startVibrateControl+0x38>)
 80025e8:	f004 fce4 	bl	8006fb4 <HAL_TIM_PWM_Start>

    osDelay(2000);
 80025ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025f0:	f005 ff1e 	bl	8008430 <osDelay>

    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80025f4:	2100      	movs	r1, #0
 80025f6:	4804      	ldr	r0, [pc, #16]	; (8002608 <startVibrateControl+0x38>)
 80025f8:	f004 fdb6 	bl	8007168 <HAL_TIM_PWM_Stop>

    osDelay(2000);
 80025fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002600:	f005 ff16 	bl	8008430 <osDelay>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002604:	e7ee      	b.n	80025e4 <startVibrateControl+0x14>
 8002606:	bf00      	nop
 8002608:	20003980 	.word	0x20003980

0800260c <startRTCTick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRTCTick */
void startRTCTick(void *argument)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRTCTick */

	RTC_TimeTypeDef sTime = {0};
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
    sTime.Hours      = 0x15;
 8002624:	2315      	movs	r3, #21
 8002626:	723b      	strb	r3, [r7, #8]
    sTime.Minutes    = 0x41;
 8002628:	2341      	movs	r3, #65	; 0x41
 800262a:	727b      	strb	r3, [r7, #9]
    sTime.Seconds    = 0x57;
 800262c:	2357      	movs	r3, #87	; 0x57
 800262e:	72bb      	strb	r3, [r7, #10]
    sTime.SubSeconds = 0x0;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
   	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]

   	osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 800263c:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <startRTCTick+0x1e8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	4618      	mov	r0, r3
 8002646:	f005 ffbb 	bl	80085c0 <osMutexAcquire>
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800264a:	f107 0308 	add.w	r3, r7, #8
 800264e:	2201      	movs	r2, #1
 8002650:	4619      	mov	r1, r3
 8002652:	4869      	ldr	r0, [pc, #420]	; (80027f8 <startRTCTick+0x1ec>)
 8002654:	f003 fd91 	bl	800617a <HAL_RTC_SetTime>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <startRTCTick+0x56>
	    Error_Handler();
 800265e:	f000 f9ce 	bl	80029fe <Error_Handler>
	}
	osMutexRelease(rtcMutexHandle);
 8002662:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <startRTCTick+0x1e8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f006 f808 	bl	800867c <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    osDelay(6000);
 800266c:	f241 7070 	movw	r0, #6000	; 0x1770
 8002670:	f005 fede 	bl	8008430 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 8002674:	4b61      	ldr	r3, [pc, #388]	; (80027fc <startRTCTick+0x1f0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	4618      	mov	r0, r3
 800267e:	f005 ff9f 	bl	80085c0 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 8002682:	4b5f      	ldr	r3, [pc, #380]	; (8002800 <startRTCTick+0x1f4>)
 8002684:	2205      	movs	r2, #5
 8002686:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 8002688:	4b5c      	ldr	r3, [pc, #368]	; (80027fc <startRTCTick+0x1f0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f005 fff5 	bl	800867c <osMutexRelease>

    osDelay(3000);
 8002692:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002696:	f005 fecb 	bl	8008430 <osDelay>

    ScreenStatus_t newScreen = SCREEN_TIME;
 800269a:	2301      	movs	r3, #1
 800269c:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 800269e:	4b59      	ldr	r3, [pc, #356]	; (8002804 <startRTCTick+0x1f8>)
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	7ff9      	ldrb	r1, [r7, #31]
 80026a4:	2300      	movs	r3, #0
 80026a6:	2203      	movs	r2, #3
 80026a8:	f008 f966 	bl	800a978 <xTaskGenericNotify>

    osDelay(3000);
 80026ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80026b0:	f005 febe 	bl	8008430 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80026b4:	4b51      	ldr	r3, [pc, #324]	; (80027fc <startRTCTick+0x1f0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	4618      	mov	r0, r3
 80026be:	f005 ff7f 	bl	80085c0 <osMutexAcquire>
    LedState.currentMode = LED_CONFIRM_FLASH;
 80026c2:	4b4f      	ldr	r3, [pc, #316]	; (8002800 <startRTCTick+0x1f4>)
 80026c4:	2204      	movs	r2, #4
 80026c6:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 80026c8:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <startRTCTick+0x1f0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f005 ffd5 	bl	800867c <osMutexRelease>

    osDelay(1000);
 80026d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d6:	f005 feab 	bl	8008430 <osDelay>

    osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 80026da:	4b48      	ldr	r3, [pc, #288]	; (80027fc <startRTCTick+0x1f0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f04f 31ff 	mov.w	r1, #4294967295
 80026e2:	4618      	mov	r0, r3
 80026e4:	f005 ff6c 	bl	80085c0 <osMutexAcquire>
    LedState.currentMode = LED_SPIRAL;
 80026e8:	4b45      	ldr	r3, [pc, #276]	; (8002800 <startRTCTick+0x1f4>)
 80026ea:	2205      	movs	r2, #5
 80026ec:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ledStateMutexHandle);
 80026ee:	4b43      	ldr	r3, [pc, #268]	; (80027fc <startRTCTick+0x1f0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f005 ffc2 	bl	800867c <osMutexRelease>

    osDelay(3000);
 80026f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80026fc:	f005 fe98 	bl	8008430 <osDelay>

    newScreen = SCREEN_TEXT;
 8002700:	2303      	movs	r3, #3
 8002702:	77fb      	strb	r3, [r7, #31]
	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8002704:	4b40      	ldr	r3, [pc, #256]	; (8002808 <startRTCTick+0x1fc>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	4618      	mov	r0, r3
 800270e:	f005 ff57 	bl	80085c0 <osMutexAcquire>
	strncpy(ScreenState.screenText, "arbitrary", sizeof("arbitrary"));
 8002712:	4a3e      	ldr	r2, [pc, #248]	; (800280c <startRTCTick+0x200>)
 8002714:	4b3e      	ldr	r3, [pc, #248]	; (8002810 <startRTCTick+0x204>)
 8002716:	cb03      	ldmia	r3!, {r0, r1}
 8002718:	6010      	str	r0, [r2, #0]
 800271a:	6051      	str	r1, [r2, #4]
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	8113      	strh	r3, [r2, #8]
	osMutexRelease(screenTextMutexHandle);
 8002720:	4b39      	ldr	r3, [pc, #228]	; (8002808 <startRTCTick+0x1fc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f005 ffa9 	bl	800867c <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 800272a:	4b36      	ldr	r3, [pc, #216]	; (8002804 <startRTCTick+0x1f8>)
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	7ff9      	ldrb	r1, [r7, #31]
 8002730:	2300      	movs	r3, #0
 8002732:	2203      	movs	r2, #3
 8002734:	f008 f920 	bl	800a978 <xTaskGenericNotify>

    osDelay(3000);
 8002738:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800273c:	f005 fe78 	bl	8008430 <osDelay>
        Error_Handler();
    }
    osMutexRelease(rtcMutexHandle);
	*/

    newScreen = SCREEN_TIME;
 8002740:	2301      	movs	r3, #1
 8002742:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8002744:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <startRTCTick+0x1f8>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	7ff9      	ldrb	r1, [r7, #31]
 800274a:	2300      	movs	r3, #0
 800274c:	2203      	movs	r2, #3
 800274e:	f008 f913 	bl	800a978 <xTaskGenericNotify>
    osDelay(1000);
 8002752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002756:	f005 fe6b 	bl	8008430 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 800275a:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <startRTCTick+0x1f8>)
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	7ff9      	ldrb	r1, [r7, #31]
 8002760:	2300      	movs	r3, #0
 8002762:	2203      	movs	r2, #3
 8002764:	f008 f908 	bl	800a978 <xTaskGenericNotify>
    osDelay(1000);
 8002768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800276c:	f005 fe60 	bl	8008430 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <startRTCTick+0x1f8>)
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	7ff9      	ldrb	r1, [r7, #31]
 8002776:	2300      	movs	r3, #0
 8002778:	2203      	movs	r2, #3
 800277a:	f008 f8fd 	bl	800a978 <xTaskGenericNotify>
    osDelay(1000);
 800277e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002782:	f005 fe55 	bl	8008430 <osDelay>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <startRTCTick+0x1f8>)
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	7ff9      	ldrb	r1, [r7, #31]
 800278c:	2300      	movs	r3, #0
 800278e:	2203      	movs	r2, #3
 8002790:	f008 f8f2 	bl	800a978 <xTaskGenericNotify>
    osDelay(1000);
 8002794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002798:	f005 fe4a 	bl	8008430 <osDelay>


    osDelay(1000);
 800279c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027a0:	f005 fe46 	bl	8008430 <osDelay>

    newScreen = SCREEN_IMAGE;
 80027a4:	2304      	movs	r3, #4
 80027a6:	77fb      	strb	r3, [r7, #31]
   	osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <startRTCTick+0x1fc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295
 80027b0:	4618      	mov	r0, r3
 80027b2:	f005 ff05 	bl	80085c0 <osMutexAcquire>
   	ScreenState.screenImage = 1;
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <startRTCTick+0x200>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   	osMutexRelease(screenTextMutexHandle);
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <startRTCTick+0x1fc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f005 ff5a 	bl	800867c <osMutexRelease>
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <startRTCTick+0x1f8>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	7ff9      	ldrb	r1, [r7, #31]
 80027ce:	2300      	movs	r3, #0
 80027d0:	2203      	movs	r2, #3
 80027d2:	f008 f8d1 	bl	800a978 <xTaskGenericNotify>

    osDelay(3000);
 80027d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027da:	f005 fe29 	bl	8008430 <osDelay>

    newScreen = SCREEN_OFF;
 80027de:	2300      	movs	r3, #0
 80027e0:	77fb      	strb	r3, [r7, #31]
    xTaskNotify(screenUpdateHandle, (uint32_t)newScreen, eSetValueWithOverwrite);
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <startRTCTick+0x1f8>)
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	7ff9      	ldrb	r1, [r7, #31]
 80027e8:	2300      	movs	r3, #0
 80027ea:	2203      	movs	r2, #3
 80027ec:	f008 f8c4 	bl	800a978 <xTaskGenericNotify>
  {
 80027f0:	e73c      	b.n	800266c <startRTCTick+0x60>
 80027f2:	bf00      	nop
 80027f4:	200039d4 	.word	0x200039d4
 80027f8:	20003948 	.word	0x20003948
 80027fc:	2000397c 	.word	0x2000397c
 8002800:	20003940 	.word	0x20003940
 8002804:	2000396c 	.word	0x2000396c
 8002808:	2000393c 	.word	0x2000393c
 800280c:	20003a3c 	.word	0x20003a3c
 8002810:	0800c630 	.word	0x0800c630

08002814 <startBLETX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLETX */
void startBLETX(void *argument)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBLETX */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 800281c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002820:	f005 fe06 	bl	8008430 <osDelay>
 8002824:	e7fa      	b.n	800281c <startBLETX+0x8>

08002826 <startBLERX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLERX */
void startBLERX(void *argument)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBLERX */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800282e:	2001      	movs	r0, #1
 8002830:	f005 fdfe 	bl	8008430 <osDelay>
 8002834:	e7fb      	b.n	800282e <startBLERX+0x8>
	...

08002838 <startLEDTimer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLEDTimer */
void startLEDTimer(void *argument)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  //wait until notified
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	2001      	movs	r0, #1
 8002846:	f007 fff5 	bl	800a834 <ulTaskNotifyTake>

	  //pull time of delay before updating LED state
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <startLEDTimer+0x84>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f04f 31ff 	mov.w	r1, #4294967295
 8002852:	4618      	mov	r0, r3
 8002854:	f005 feb4 	bl	80085c0 <osMutexAcquire>
	  waitState = LedState;
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <startLEDTimer+0x88>)
 800285a:	f107 0308 	add.w	r3, r7, #8
 800285e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002862:	e883 0003 	stmia.w	r3, {r0, r1}
	  LedState.modeTimeout = 0;
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <startLEDTimer+0x88>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
	  osMutexRelease(ledStateMutexHandle);
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <startLEDTimer+0x84>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f005 ff03 	bl	800867c <osMutexRelease>

	  //delay
	  osDelay(waitState.modeTimeout);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4618      	mov	r0, r3
 800287a:	f005 fdd9 	bl	8008430 <osDelay>

	  //update LED state in LedState
	  osMutexAcquire(ledStateMutexHandle, portMAX_DELAY);
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <startLEDTimer+0x84>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f04f 31ff 	mov.w	r1, #4294967295
 8002886:	4618      	mov	r0, r3
 8002888:	f005 fe9a 	bl	80085c0 <osMutexAcquire>
	  //check that state values haven't changed since
	  //started waiting before updating state
	  if (waitState.currentMode == LedState.currentMode && waitState.nextMode == LedState.nextMode) {
 800288c:	7a3a      	ldrb	r2, [r7, #8]
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <startLEDTimer+0x88>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d10b      	bne.n	80028ae <startLEDTimer+0x76>
 8002896:	7a7a      	ldrb	r2, [r7, #9]
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <startLEDTimer+0x88>)
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <startLEDTimer+0x76>
		  LedState.currentMode = LedState.nextMode;
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <startLEDTimer+0x88>)
 80028a2:	785a      	ldrb	r2, [r3, #1]
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <startLEDTimer+0x88>)
 80028a6:	701a      	strb	r2, [r3, #0]
		  LedState.nextMode = LED_NONE;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <startLEDTimer+0x88>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	705a      	strb	r2, [r3, #1]
	  }
	  osMutexRelease(ledStateMutexHandle);
 80028ae:	4b03      	ldr	r3, [pc, #12]	; (80028bc <startLEDTimer+0x84>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f005 fee2 	bl	800867c <osMutexRelease>
	  ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 80028b8:	e7c2      	b.n	8002840 <startLEDTimer+0x8>
 80028ba:	bf00      	nop
 80028bc:	2000397c 	.word	0x2000397c
 80028c0:	20003940 	.word	0x20003940

080028c4 <startTouchRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTouchRead */
void startTouchRead(void *argument)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTouchRead */

  int16_t current_minute = -1;
 80028cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028d0:	827b      	strh	r3, [r7, #18]
  uint8_t touch_end_count = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]
  uint16_t last_minute = -1;
 80028d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028da:	82bb      	strh	r3, [r7, #20]
  #define TOUCH_END_TIMEOUT 6

  osDelay(3000); // give screen time to turn on.
 80028dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028e0:	f005 fda6 	bl	8008430 <osDelay>

  //init peripheral (not turbo mode, poll every 250ms, if touch sample at 40Hz until no touch)
  if (setup_iqs263() == HAL_ERROR) {
 80028e4:	f7fe ff24 	bl	8001730 <setup_iqs263>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d11b      	bne.n	8002926 <startTouchRead+0x62>

	  osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <startTouchRead+0x108>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f04f 31ff 	mov.w	r1, #4294967295
 80028f6:	4618      	mov	r0, r3
 80028f8:	f005 fe62 	bl	80085c0 <osMutexAcquire>
	  strncpy(ScreenState.screenText, "touch fail", sizeof("touch fail"));
 80028fc:	4a34      	ldr	r2, [pc, #208]	; (80029d0 <startTouchRead+0x10c>)
 80028fe:	4b35      	ldr	r3, [pc, #212]	; (80029d4 <startTouchRead+0x110>)
 8002900:	cb03      	ldmia	r3!, {r0, r1}
 8002902:	6010      	str	r0, [r2, #0]
 8002904:	6051      	str	r1, [r2, #4]
 8002906:	8819      	ldrh	r1, [r3, #0]
 8002908:	789b      	ldrb	r3, [r3, #2]
 800290a:	8111      	strh	r1, [r2, #8]
 800290c:	7293      	strb	r3, [r2, #10]
	  osMutexRelease(screenTextMutexHandle);
 800290e:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <startTouchRead+0x108>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f005 feb2 	bl	800867c <osMutexRelease>
	  xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 8002918:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <startTouchRead+0x114>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	2300      	movs	r3, #0
 800291e:	2203      	movs	r2, #3
 8002920:	2103      	movs	r1, #3
 8002922:	f008 f829 	bl	800a978 <xTaskGenericNotify>
  }

  /* Infinite loop */
  for(;;)
  {
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 8002926:	f7fe ffa1 	bl	800186c <iqs263_get_min_if_pressed>
 800292a:	4603      	mov	r3, r0
 800292c:	827b      	strh	r3, [r7, #18]
   if (current_minute != -1) { //touch!
 800292e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d011      	beq.n	800295c <startTouchRead+0x98>

	   touch_end_count = 1;
 8002938:	2301      	movs	r3, #1
 800293a:	75fb      	strb	r3, [r7, #23]

	   if (last_minute != current_minute) {
 800293c:	8aba      	ldrh	r2, [r7, #20]
 800293e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002942:	429a      	cmp	r2, r3
 8002944:	d006      	beq.n	8002954 <startTouchRead+0x90>
		   //update touch stuff!
		   last_minute = current_minute;
 8002946:	8a7b      	ldrh	r3, [r7, #18]
 8002948:	82bb      	strh	r3, [r7, #20]
	   	   er_oled_print_2digit(current_minute);
 800294a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fd2e 	bl	80013b0 <er_oled_print_2digit>
	   }

	   //optional
	   osDelay(25);
 8002954:	2019      	movs	r0, #25
 8002956:	f005 fd6b 	bl	8008430 <osDelay>
 800295a:	e7e4      	b.n	8002926 <startTouchRead+0x62>
	   strncpy(ScreenState.screenText, str, sizeof(str));
	   osMutexRelease(screenTextMutexHandle);
	   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
	   */

   } else if (touch_end_count > 0){
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d02f      	beq.n	80029c2 <startTouchRead+0xfe>

	   touch_end_count += 1;//increment touching_end_count
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	3301      	adds	r3, #1
 8002966:	75fb      	strb	r3, [r7, #23]

	   if (touch_end_count >= TOUCH_END_TIMEOUT){  //if it hits this value, we're done
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b05      	cmp	r3, #5
 800296c:	d925      	bls.n	80029ba <startTouchRead+0xf6>

		   touch_end_count = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]

		   //DO THINGS WITH CONFIRMED TOUCH == LAST_MINUTE
		   osMutexAcquire(screenTextMutexHandle, portMAX_DELAY);
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <startTouchRead+0x108>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f04f 31ff 	mov.w	r1, #4294967295
 800297a:	4618      	mov	r0, r3
 800297c:	f005 fe20 	bl	80085c0 <osMutexAcquire>
		   char out_text[10];
		   sprintf(out_text, "FINAL: %d", last_minute);
 8002980:	8aba      	ldrh	r2, [r7, #20]
 8002982:	f107 0308 	add.w	r3, r7, #8
 8002986:	4915      	ldr	r1, [pc, #84]	; (80029dc <startTouchRead+0x118>)
 8002988:	4618      	mov	r0, r3
 800298a:	f009 fa2d 	bl	800bde8 <siprintf>
		   strncpy(ScreenState.screenText, out_text, sizeof(out_text));
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	220a      	movs	r2, #10
 8002994:	4619      	mov	r1, r3
 8002996:	480e      	ldr	r0, [pc, #56]	; (80029d0 <startTouchRead+0x10c>)
 8002998:	f009 fa46 	bl	800be28 <strncpy>
		   osMutexRelease(screenTextMutexHandle);
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <startTouchRead+0x108>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f005 fe6b 	bl	800867c <osMutexRelease>
		   xTaskNotify(screenUpdateHandle, (uint32_t)SCREEN_TEXT, eSetValueWithOverwrite);
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <startTouchRead+0x114>)
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	2300      	movs	r3, #0
 80029ac:	2203      	movs	r2, #3
 80029ae:	2103      	movs	r1, #3
 80029b0:	f007 ffe2 	bl	800a978 <xTaskGenericNotify>

		   last_minute = -1;
 80029b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b8:	82bb      	strh	r3, [r7, #20]

	   }

	   osDelay(25);
 80029ba:	2019      	movs	r0, #25
 80029bc:	f005 fd38 	bl	8008430 <osDelay>
 80029c0:	e7b1      	b.n	8002926 <startTouchRead+0x62>


   }else { //no touch, wait for a touch
    osDelay(250);
 80029c2:	20fa      	movs	r0, #250	; 0xfa
 80029c4:	f005 fd34 	bl	8008430 <osDelay>
   current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 80029c8:	e7ad      	b.n	8002926 <startTouchRead+0x62>
 80029ca:	bf00      	nop
 80029cc:	2000393c 	.word	0x2000393c
 80029d0:	20003a3c 	.word	0x20003a3c
 80029d4:	0800c63c 	.word	0x0800c63c
 80029d8:	2000396c 	.word	0x2000396c
 80029dc:	0800c648 	.word	0x0800c648

080029e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029f2:	f000 fb85 	bl	8003100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_AHB2_GRP1_EnableClock>:
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a52:	68fb      	ldr	r3, [r7, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4013      	ands	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a84:	68fb      	ldr	r3, [r7, #12]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002afa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002afe:	f7ff ffaf 	bl	8002a60 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2100      	movs	r1, #0
 8002b06:	202e      	movs	r0, #46	; 0x2e
 8002b08:	f000 fc00 	bl	800330c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002b0c:	202e      	movs	r0, #46	; 0x2e
 8002b0e:	f000 fc17 	bl	8003340 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <HAL_I2C_MspInit+0x5c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d117      	bne.n	8002b6a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	2002      	movs	r0, #2
 8002b3c:	f7ff ff77 	bl	8002a2e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b46:	2312      	movs	r3, #18
 8002b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b52:	2304      	movs	r3, #4
 8002b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 030c 	add.w	r3, r7, #12
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4806      	ldr	r0, [pc, #24]	; (8002b78 <HAL_I2C_MspInit+0x60>)
 8002b5e:	f000 fbfd 	bl	800335c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b62:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b66:	f7ff ff94 	bl	8002a92 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b6a:	bf00      	nop
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40005400 	.word	0x40005400
 8002b78:	48000400 	.word	0x48000400

08002b7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <HAL_RTC_MspInit+0x28>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d105      	bne.n	8002b9a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b8e:	f7ff ff3d 	bl	8002a0c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002b92:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b96:	f7ff ff7c 	bl	8002a92 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40002800 	.word	0x40002800

08002ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <HAL_SPI_MspInit+0x5c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d117      	bne.n	8002bfa <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002bce:	f7ff ff79 	bl	8002ac4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f7ff ff2b 	bl	8002a2e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002bd8:	2382      	movs	r3, #130	; 0x82
 8002bda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002be8:	2305      	movs	r3, #5
 8002bea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bec:	f107 030c 	add.w	r3, r7, #12
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf6:	f000 fbb1 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bfa:	bf00      	nop
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40013000 	.word	0x40013000

08002c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_TIM_Base_MspInit+0x34>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10b      	bne.n	8002c32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c1e:	f7ff ff51 	bl	8002ac4 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	210f      	movs	r1, #15
 8002c26:	2019      	movs	r0, #25
 8002c28:	f000 fb70 	bl	800330c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c2c:	2019      	movs	r0, #25
 8002c2e:	f000 fb87 	bl	8003340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40012c00 	.word	0x40012c00

08002c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 030c 	add.w	r3, r7, #12
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <HAL_TIM_MspPostInit+0x54>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d114      	bne.n	8002c8c <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7ff fee3 	bl	8002a2e <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	4619      	mov	r1, r3
 8002c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c88:	f000 fb68 	bl	800335c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c8c:	bf00      	nop
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40012c00 	.word	0x40012c00

08002c98 <LL_APB1_GRP1_EnableClock>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	; 0x30
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	201c      	movs	r0, #28
 8002ce2:	f000 fb13 	bl	800330c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ce6:	201c      	movs	r0, #28
 8002ce8:	f000 fb2a 	bl	8003340 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002cec:	2001      	movs	r0, #1
 8002cee:	f7ff ffd3 	bl	8002c98 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cf2:	f107 0208 	add.w	r2, r7, #8
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fc91 	bl	8005624 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d02:	f002 fc79 	bl	80055f8 <HAL_RCC_GetPCLK1Freq>
 8002d06:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0a:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <HAL_InitTick+0x8c>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	0c9b      	lsrs	r3, r3, #18
 8002d12:	3b01      	subs	r3, #1
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_InitTick+0x90>)
 8002d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_InitTick+0x90>)
 8002d20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d24:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002d26:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <HAL_InitTick+0x90>)
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_InitTick+0x90>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_InitTick+0x90>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002d38:	4808      	ldr	r0, [pc, #32]	; (8002d5c <HAL_InitTick+0x90>)
 8002d3a:	f004 f833 	bl	8006da4 <HAL_TIM_Base_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002d44:	4805      	ldr	r0, [pc, #20]	; (8002d5c <HAL_InitTick+0x90>)
 8002d46:	f004 f885 	bl	8006e54 <HAL_TIM_Base_Start_IT>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	e000      	b.n	8002d50 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3730      	adds	r7, #48	; 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	431bde83 	.word	0x431bde83
 8002d5c:	20003ac0 	.word	0x20003ac0

08002d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <HardFault_Handler+0x4>

08002d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <MemManage_Handler+0x4>

08002d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <BusFault_Handler+0x4>

08002d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <UsageFault_Handler+0x4>

08002d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002d98:	2008      	movs	r0, #8
 8002d9a:	f000 fc7f 	bl	800369c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002da6:	2010      	movs	r0, #16
 8002da8:	f000 fc78 	bl	800369c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002db4:	2020      	movs	r0, #32
 8002db6:	f000 fc71 	bl	800369c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002dc6:	f004 fa57 	bl	8007278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20003980 	.word	0x20003980

08002dd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <TIM2_IRQHandler+0x10>)
 8002dda:	f004 fa4d 	bl	8007278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20003ac0 	.word	0x20003ac0

08002de8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002dec:	f000 fc6e 	bl	80036cc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <_sbrk+0x5c>)
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <_sbrk+0x60>)
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <_sbrk+0x64>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <_sbrk+0x64>)
 8002e12:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <_sbrk+0x68>)
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d207      	bcs.n	8002e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e24:	f008 fee2 	bl	800bbec <__errno>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	e009      	b.n	8002e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <_sbrk+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <_sbrk+0x64>)
 8002e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20030000 	.word	0x20030000
 8002e54:	00000400 	.word	0x00000400
 8002e58:	20000094 	.word	0x20000094
 8002e5c:	20003b58 	.word	0x20003b58

08002e60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002e64:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <SystemInit+0xa0>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002e6a:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <SystemInit+0xa0>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <SystemInit+0xa0>)
 8002e72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002e92:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <SystemInit+0xa4>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb0:	f023 0305 	bic.w	r3, r3, #5
 8002eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <SystemInit+0xa8>)
 8002ed2:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <SystemInit+0xa8>)
 8002eda:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000ed00 	.word	0xe000ed00
 8002f04:	faf6fefb 	.word	0xfaf6fefb
 8002f08:	22041000 	.word	0x22041000

08002f0c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	4a47      	ldr	r2, [pc, #284]	; (800303c <SystemCoreClockUpdate+0x130>)
 8002f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f24:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b0c      	cmp	r3, #12
 8002f32:	d867      	bhi.n	8003004 <SystemCoreClockUpdate+0xf8>
 8002f34:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <SystemCoreClockUpdate+0x30>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08003005 	.word	0x08003005
 8002f44:	08003005 	.word	0x08003005
 8002f48:	08003005 	.word	0x08003005
 8002f4c:	08002f79 	.word	0x08002f79
 8002f50:	08003005 	.word	0x08003005
 8002f54:	08003005 	.word	0x08003005
 8002f58:	08003005 	.word	0x08003005
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08003005 	.word	0x08003005
 8002f64:	08003005 	.word	0x08003005
 8002f68:	08003005 	.word	0x08003005
 8002f6c:	08002f89 	.word	0x08002f89
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002f70:	4a33      	ldr	r2, [pc, #204]	; (8003040 <SystemCoreClockUpdate+0x134>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6013      	str	r3, [r2, #0]
      break;
 8002f76:	e049      	b.n	800300c <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <SystemCoreClockUpdate+0x134>)
 8002f7a:	4a32      	ldr	r2, [pc, #200]	; (8003044 <SystemCoreClockUpdate+0x138>)
 8002f7c:	601a      	str	r2, [r3, #0]
      break;
 8002f7e:	e045      	b.n	800300c <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002f80:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <SystemCoreClockUpdate+0x134>)
 8002f82:	4a31      	ldr	r2, [pc, #196]	; (8003048 <SystemCoreClockUpdate+0x13c>)
 8002f84:	601a      	str	r2, [r3, #0]
      break;
 8002f86:	e041      	b.n	800300c <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8002f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d105      	bne.n	8002fb6 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8002faa:	4a26      	ldr	r2, [pc, #152]	; (8003044 <SystemCoreClockUpdate+0x138>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e00d      	b.n	8002fd2 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d105      	bne.n	8002fc8 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8002fbc:	4a22      	ldr	r2, [pc, #136]	; (8003048 <SystemCoreClockUpdate+0x13c>)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e004      	b.n	8002fd2 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fb02 f303 	mul.w	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	0f5b      	lsrs	r3, r3, #29
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	4a10      	ldr	r2, [pc, #64]	; (8003040 <SystemCoreClockUpdate+0x134>)
 8003000:	6013      	str	r3, [r2, #0]
      break;
 8003002:	e003      	b.n	800300c <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8003004:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <SystemCoreClockUpdate+0x134>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6013      	str	r3, [r2, #0]
      break;
 800300a:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800300c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	4a0c      	ldr	r2, [pc, #48]	; (800304c <SystemCoreClockUpdate+0x140>)
 800301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <SystemCoreClockUpdate+0x134>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	4a05      	ldr	r2, [pc, #20]	; (8003040 <SystemCoreClockUpdate+0x134>)
 800302c:	6013      	str	r3, [r2, #0]

}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	0800d8c0 	.word	0x0800d8c0
 8003040:	20000004 	.word	0x20000004
 8003044:	00f42400 	.word	0x00f42400
 8003048:	01e84800 	.word	0x01e84800
 800304c:	0800d860 	.word	0x0800d860

08003050 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003050:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003052:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003054:	3304      	adds	r3, #4

08003056 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003056:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003058:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800305a:	d3f9      	bcc.n	8003050 <CopyDataInit>
  bx lr
 800305c:	4770      	bx	lr

0800305e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800305e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003060:	3004      	adds	r0, #4

08003062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003062:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003064:	d3fb      	bcc.n	800305e <FillZerobss>
  bx lr
 8003066:	4770      	bx	lr

08003068 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800306a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800306c:	f7ff fef8 	bl	8002e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003070:	480b      	ldr	r0, [pc, #44]	; (80030a0 <LoopForever+0x8>)
 8003072:	490c      	ldr	r1, [pc, #48]	; (80030a4 <LoopForever+0xc>)
 8003074:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <LoopForever+0x10>)
 8003076:	2300      	movs	r3, #0
 8003078:	f7ff ffed 	bl	8003056 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800307c:	480b      	ldr	r0, [pc, #44]	; (80030ac <LoopForever+0x14>)
 800307e:	490c      	ldr	r1, [pc, #48]	; (80030b0 <LoopForever+0x18>)
 8003080:	2300      	movs	r3, #0
 8003082:	f7ff ffee 	bl	8003062 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003086:	480b      	ldr	r0, [pc, #44]	; (80030b4 <LoopForever+0x1c>)
 8003088:	490b      	ldr	r1, [pc, #44]	; (80030b8 <LoopForever+0x20>)
 800308a:	2300      	movs	r3, #0
 800308c:	f7ff ffe9 	bl	8003062 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003090:	f008 fdb2 	bl	800bbf8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003094:	f7fe fc1a 	bl	80018cc <main>

08003098 <LoopForever>:

LoopForever:
  b LoopForever
 8003098:	e7fe      	b.n	8003098 <LoopForever>
 800309a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800309c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80030a0:	20000004 	.word	0x20000004
 80030a4:	20000078 	.word	0x20000078
 80030a8:	0800d93c 	.word	0x0800d93c
  INIT_BSS _sbss, _ebss
 80030ac:	20000078 	.word	0x20000078
 80030b0:	20003b54 	.word	0x20003b54
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80030b4:	20030000 	.word	0x20030000
 80030b8:	20030000 	.word	0x20030000

080030bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC1_IRQHandler>
	...

080030c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_Init+0x3c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <HAL_Init+0x3c>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d6:	2003      	movs	r0, #3
 80030d8:	f000 f90d 	bl	80032f6 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030dc:	2000      	movs	r0, #0
 80030de:	f7ff fdf5 	bl	8002ccc <HAL_InitTick>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	71fb      	strb	r3, [r7, #7]
 80030ec:	e001      	b.n	80030f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030ee:	f7ff fd02 	bl	8002af6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030f2:	79fb      	ldrb	r3, [r7, #7]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	58004000 	.word	0x58004000

08003100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_IncTick+0x20>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_IncTick+0x24>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4413      	add	r3, r2
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <HAL_IncTick+0x24>)
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2000000c 	.word	0x2000000c
 8003124:	20003b0c 	.word	0x20003b0c

08003128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return uwTick;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_GetTick+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20003b0c 	.word	0x20003b0c

08003140 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_GetTickPrio+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000008 	.word	0x20000008

08003158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff ffe2 	bl	8003128 <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d005      	beq.n	800317e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_Delay+0x40>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800317e:	bf00      	nop
 8003180:	f7ff ffd2 	bl	8003128 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8f7      	bhi.n	8003180 <HAL_Delay+0x28>
    {
    }
  }
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	2000000c 	.word	0x2000000c

0800319c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60d3      	str	r3, [r2, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 0307 	and.w	r3, r3, #7
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db0b      	blt.n	800322a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	f003 021f 	and.w	r2, r3, #31
 8003218:	4907      	ldr	r1, [pc, #28]	; (8003238 <__NVIC_EnableIRQ+0x38>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2001      	movs	r0, #1
 8003222:	fa00 f202 	lsl.w	r2, r0, r2
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000e100 	.word	0xe000e100

0800323c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	2b00      	cmp	r3, #0
 800324e:	db0a      	blt.n	8003266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	490c      	ldr	r1, [pc, #48]	; (8003288 <__NVIC_SetPriority+0x4c>)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	440b      	add	r3, r1
 8003260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003264:	e00a      	b.n	800327c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <__NVIC_SetPriority+0x50>)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	3b04      	subs	r3, #4
 8003274:	0112      	lsls	r2, r2, #4
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	440b      	add	r3, r1
 800327a:	761a      	strb	r2, [r3, #24]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000e100 	.word	0xe000e100
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f1c3 0307 	rsb	r3, r3, #7
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	bf28      	it	cs
 80032ae:	2304      	movcs	r3, #4
 80032b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d902      	bls.n	80032c0 <NVIC_EncodePriority+0x30>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3b03      	subs	r3, #3
 80032be:	e000      	b.n	80032c2 <NVIC_EncodePriority+0x32>
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	401a      	ands	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d8:	f04f 31ff 	mov.w	r1, #4294967295
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43d9      	mvns	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	4313      	orrs	r3, r2
         );
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	; 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ff4c 	bl	800319c <__NVIC_SetPriorityGrouping>
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800331a:	f7ff ff63 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 800331e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	6978      	ldr	r0, [r7, #20]
 8003326:	f7ff ffb3 	bl	8003290 <NVIC_EncodePriority>
 800332a:	4602      	mov	r2, r0
 800332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff82 	bl	800323c <__NVIC_SetPriority>
}
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ff56 	bl	8003200 <__NVIC_EnableIRQ>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336a:	e14c      	b.n	8003606 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	2101      	movs	r1, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 813e 	beq.w	8003600 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d00b      	beq.n	80033a4 <HAL_GPIO_Init+0x48>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d007      	beq.n	80033a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003398:	2b11      	cmp	r3, #17
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b12      	cmp	r3, #18
 80033a2:	d130      	bne.n	8003406 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033da:	2201      	movs	r2, #1
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	f003 0201 	and.w	r2, r3, #1
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0xea>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b12      	cmp	r3, #18
 8003444:	d123      	bne.n	800348e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	08da      	lsrs	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3208      	adds	r2, #8
 800344e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	220f      	movs	r2, #15
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	08da      	lsrs	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3208      	adds	r2, #8
 8003488:	6939      	ldr	r1, [r7, #16]
 800348a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	2203      	movs	r2, #3
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0203 	and.w	r2, r3, #3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8098 	beq.w	8003600 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80034d0:	4a54      	ldr	r2, [pc, #336]	; (8003624 <HAL_GPIO_Init+0x2c8>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034fa:	d019      	beq.n	8003530 <HAL_GPIO_Init+0x1d4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a4a      	ldr	r2, [pc, #296]	; (8003628 <HAL_GPIO_Init+0x2cc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <HAL_GPIO_Init+0x1d0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a49      	ldr	r2, [pc, #292]	; (800362c <HAL_GPIO_Init+0x2d0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00d      	beq.n	8003528 <HAL_GPIO_Init+0x1cc>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a48      	ldr	r2, [pc, #288]	; (8003630 <HAL_GPIO_Init+0x2d4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <HAL_GPIO_Init+0x1c8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a47      	ldr	r2, [pc, #284]	; (8003634 <HAL_GPIO_Init+0x2d8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_GPIO_Init+0x1c4>
 800351c:	2304      	movs	r3, #4
 800351e:	e008      	b.n	8003532 <HAL_GPIO_Init+0x1d6>
 8003520:	2307      	movs	r3, #7
 8003522:	e006      	b.n	8003532 <HAL_GPIO_Init+0x1d6>
 8003524:	2303      	movs	r3, #3
 8003526:	e004      	b.n	8003532 <HAL_GPIO_Init+0x1d6>
 8003528:	2302      	movs	r3, #2
 800352a:	e002      	b.n	8003532 <HAL_GPIO_Init+0x1d6>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_GPIO_Init+0x1d6>
 8003530:	2300      	movs	r3, #0
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	f002 0203 	and.w	r2, r2, #3
 8003538:	0092      	lsls	r2, r2, #2
 800353a:	4093      	lsls	r3, r2
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003542:	4938      	ldr	r1, [pc, #224]	; (8003624 <HAL_GPIO_Init+0x2c8>)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3302      	adds	r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003550:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_GPIO_Init+0x2dc>)
 8003552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003576:	4a30      	ldr	r2, [pc, #192]	; (8003638 <HAL_GPIO_Init+0x2dc>)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800357e:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_GPIO_Init+0x2dc>)
 8003580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <HAL_GPIO_Init+0x2dc>)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035ac:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_GPIO_Init+0x2dc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_GPIO_Init+0x2dc>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_GPIO_Init+0x2dc>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035fa:	4a0f      	ldr	r2, [pc, #60]	; (8003638 <HAL_GPIO_Init+0x2dc>)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3301      	adds	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	f47f aeab 	bne.w	800336c <HAL_GPIO_Init+0x10>
  }
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	48000c00 	.word	0x48000c00
 8003634:	48001000 	.word	0x48001000
 8003638:	58000800 	.word	0x58000800

0800363c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	e001      	b.n	800365e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]
 8003678:	4613      	mov	r3, r2
 800367a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800367c:	787b      	ldrb	r3, [r7, #1]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003688:	e002      	b.n	8003690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036b2:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fc4e 	bl	8001f5c <HAL_GPIO_EXTI_Callback>
  }
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	58000800 	.word	0x58000800

080036cc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <HAL_HSEM_IRQHandler+0x30>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_HSEM_IRQHandler+0x30>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	43db      	mvns	r3, r3
 80036e0:	4906      	ldr	r1, [pc, #24]	; (80036fc <HAL_HSEM_IRQHandler+0x30>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <HAL_HSEM_IRQHandler+0x30>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f807 	bl	8003700 <HAL_HSEM_FreeCallback>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	58001500 	.word	0x58001500

08003700 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e081      	b.n	800382a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff f9ec 	bl	8002b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	; 0x24
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003764:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003774:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d107      	bne.n	800378e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	e006      	b.n	800379c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800379a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d104      	bne.n	80037ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	ea42 0103 	orr.w	r1, r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	021a      	lsls	r2, r3, #8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69d9      	ldr	r1, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	461a      	mov	r2, r3
 8003840:	460b      	mov	r3, r1
 8003842:	817b      	strh	r3, [r7, #10]
 8003844:	4613      	mov	r3, r2
 8003846:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b20      	cmp	r3, #32
 8003852:	f040 80da 	bne.w	8003a0a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_I2C_Master_Transmit+0x30>
 8003860:	2302      	movs	r3, #2
 8003862:	e0d3      	b.n	8003a0c <HAL_I2C_Master_Transmit+0x1d8>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800386c:	f7ff fc5c 	bl	8003128 <HAL_GetTick>
 8003870:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2319      	movs	r3, #25
 8003878:	2201      	movs	r2, #1
 800387a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fbc6 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0be      	b.n	8003a0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2221      	movs	r2, #33	; 0x21
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2210      	movs	r2, #16
 800389a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	893a      	ldrh	r2, [r7, #8]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2bff      	cmp	r3, #255	; 0xff
 80038be:	d90e      	bls.n	80038de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	22ff      	movs	r2, #255	; 0xff
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	8979      	ldrh	r1, [r7, #10]
 80038ce:	4b51      	ldr	r3, [pc, #324]	; (8003a14 <HAL_I2C_Master_Transmit+0x1e0>)
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fcbc 	bl	8004254 <I2C_TransferConfig>
 80038dc:	e06c      	b.n	80039b8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	8979      	ldrh	r1, [r7, #10]
 80038f0:	4b48      	ldr	r3, [pc, #288]	; (8003a14 <HAL_I2C_Master_Transmit+0x1e0>)
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fcab 	bl	8004254 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80038fe:	e05b      	b.n	80039b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	6a39      	ldr	r1, [r7, #32]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fbc3 	bl	8004090 <I2C_WaitOnTXISFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e07b      	b.n	8003a0c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d034      	beq.n	80039b8 <HAL_I2C_Master_Transmit+0x184>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	2b00      	cmp	r3, #0
 8003954:	d130      	bne.n	80039b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2200      	movs	r2, #0
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fb55 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e04d      	b.n	8003a0c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2bff      	cmp	r3, #255	; 0xff
 8003978:	d90e      	bls.n	8003998 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	22ff      	movs	r2, #255	; 0xff
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003984:	b2da      	uxtb	r2, r3
 8003986:	8979      	ldrh	r1, [r7, #10]
 8003988:	2300      	movs	r3, #0
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fc5f 	bl	8004254 <I2C_TransferConfig>
 8003996:	e00f      	b.n	80039b8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	8979      	ldrh	r1, [r7, #10]
 80039aa:	2300      	movs	r3, #0
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fc4e 	bl	8004254 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d19e      	bne.n	8003900 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	6a39      	ldr	r1, [r7, #32]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fba2 	bl	8004110 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e01a      	b.n	8003a0c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2220      	movs	r2, #32
 80039dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6859      	ldr	r1, [r3, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_I2C_Master_Transmit+0x1e4>)
 80039ea:	400b      	ands	r3, r1
 80039ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	80002000 	.word	0x80002000
 8003a18:	fe00e800 	.word	0xfe00e800

08003a1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	4608      	mov	r0, r1
 8003a26:	4611      	mov	r1, r2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	817b      	strh	r3, [r7, #10]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	813b      	strh	r3, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	f040 80f9 	bne.w	8003c36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_I2C_Mem_Write+0x34>
 8003a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0ed      	b.n	8003c38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_I2C_Mem_Write+0x4e>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0e6      	b.n	8003c38 <HAL_I2C_Mem_Write+0x21c>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a72:	f7ff fb59 	bl	8003128 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2319      	movs	r3, #25
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fac3 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0d1      	b.n	8003c38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2221      	movs	r2, #33	; 0x21
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2240      	movs	r2, #64	; 0x40
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003abc:	88f8      	ldrh	r0, [r7, #6]
 8003abe:	893a      	ldrh	r2, [r7, #8]
 8003ac0:	8979      	ldrh	r1, [r7, #10]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	4603      	mov	r3, r0
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f9d3 	bl	8003e78 <I2C_RequestMemoryWrite>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0a9      	b.n	8003c38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2bff      	cmp	r3, #255	; 0xff
 8003aec:	d90e      	bls.n	8003b0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	22ff      	movs	r2, #255	; 0xff
 8003af2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	8979      	ldrh	r1, [r7, #10]
 8003afc:	2300      	movs	r3, #0
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fba5 	bl	8004254 <I2C_TransferConfig>
 8003b0a:	e00f      	b.n	8003b2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	8979      	ldrh	r1, [r7, #10]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fb94 	bl	8004254 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 faad 	bl	8004090 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e07b      	b.n	8003c38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d034      	beq.n	8003be4 <HAL_I2C_Mem_Write+0x1c8>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d130      	bne.n	8003be4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fa3f 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e04d      	b.n	8003c38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2bff      	cmp	r3, #255	; 0xff
 8003ba4:	d90e      	bls.n	8003bc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	22ff      	movs	r2, #255	; 0xff
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	8979      	ldrh	r1, [r7, #10]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fb49 	bl	8004254 <I2C_TransferConfig>
 8003bc2:	e00f      	b.n	8003be4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	8979      	ldrh	r1, [r7, #10]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fb38 	bl	8004254 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d19e      	bne.n	8003b2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fa8c 	bl	8004110 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e01a      	b.n	8003c38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2220      	movs	r2, #32
 8003c08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_I2C_Mem_Write+0x224>)
 8003c16:	400b      	ands	r3, r1
 8003c18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	fe00e800 	.word	0xfe00e800

08003c44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	461a      	mov	r2, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	817b      	strh	r3, [r7, #10]
 8003c56:	460b      	mov	r3, r1
 8003c58:	813b      	strh	r3, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	f040 80fd 	bne.w	8003e66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_I2C_Mem_Read+0x34>
 8003c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0f1      	b.n	8003e68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Mem_Read+0x4e>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e0ea      	b.n	8003e68 <HAL_I2C_Mem_Read+0x224>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c9a:	f7ff fa45 	bl	8003128 <HAL_GetTick>
 8003c9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2319      	movs	r3, #25
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f9af 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0d5      	b.n	8003e68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2222      	movs	r2, #34	; 0x22
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2240      	movs	r2, #64	; 0x40
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ce4:	88f8      	ldrh	r0, [r7, #6]
 8003ce6:	893a      	ldrh	r2, [r7, #8]
 8003ce8:	8979      	ldrh	r1, [r7, #10]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f913 	bl	8003f20 <I2C_RequestMemoryRead>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0ad      	b.n	8003e68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2bff      	cmp	r3, #255	; 0xff
 8003d14:	d90e      	bls.n	8003d34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	22ff      	movs	r2, #255	; 0xff
 8003d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	8979      	ldrh	r1, [r7, #10]
 8003d24:	4b52      	ldr	r3, [pc, #328]	; (8003e70 <HAL_I2C_Mem_Read+0x22c>)
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fa91 	bl	8004254 <I2C_TransferConfig>
 8003d32:	e00f      	b.n	8003d54 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	8979      	ldrh	r1, [r7, #10]
 8003d46:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <HAL_I2C_Mem_Read+0x22c>)
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fa80 	bl	8004254 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2104      	movs	r1, #4
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f956 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e07c      	b.n	8003e68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d034      	beq.n	8003e14 <HAL_I2C_Mem_Read+0x1d0>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d130      	bne.n	8003e14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	2200      	movs	r2, #0
 8003dba:	2180      	movs	r1, #128	; 0x80
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f927 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e04d      	b.n	8003e68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2bff      	cmp	r3, #255	; 0xff
 8003dd4:	d90e      	bls.n	8003df4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	22ff      	movs	r2, #255	; 0xff
 8003dda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	8979      	ldrh	r1, [r7, #10]
 8003de4:	2300      	movs	r3, #0
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fa31 	bl	8004254 <I2C_TransferConfig>
 8003df2:	e00f      	b.n	8003e14 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	8979      	ldrh	r1, [r7, #10]
 8003e06:	2300      	movs	r3, #0
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fa20 	bl	8004254 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d19a      	bne.n	8003d54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f974 	bl	8004110 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e01a      	b.n	8003e68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2220      	movs	r2, #32
 8003e38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_I2C_Mem_Read+0x230>)
 8003e46:	400b      	ands	r3, r1
 8003e48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	80002400 	.word	0x80002400
 8003e74:	fe00e800 	.word	0xfe00e800

08003e78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	4608      	mov	r0, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	461a      	mov	r2, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	817b      	strh	r3, [r7, #10]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	813b      	strh	r3, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	8979      	ldrh	r1, [r7, #10]
 8003e98:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <I2C_RequestMemoryWrite+0xa4>)
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f9d7 	bl	8004254 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	69b9      	ldr	r1, [r7, #24]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f8f0 	bl	8004090 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e02c      	b.n	8003f14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec0:	893b      	ldrh	r3, [r7, #8]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	629a      	str	r2, [r3, #40]	; 0x28
 8003eca:	e015      	b.n	8003ef8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ecc:	893b      	ldrh	r3, [r7, #8]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	69b9      	ldr	r1, [r7, #24]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f8d6 	bl	8004090 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e012      	b.n	8003f14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eee:	893b      	ldrh	r3, [r7, #8]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f884 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	80002000 	.word	0x80002000

08003f20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	817b      	strh	r3, [r7, #10]
 8003f32:	460b      	mov	r3, r1
 8003f34:	813b      	strh	r3, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	8979      	ldrh	r1, [r7, #10]
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <I2C_RequestMemoryRead+0xa4>)
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f984 	bl	8004254 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	69b9      	ldr	r1, [r7, #24]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f89d 	bl	8004090 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e02c      	b.n	8003fba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f60:	88fb      	ldrh	r3, [r7, #6]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d105      	bne.n	8003f72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f66:	893b      	ldrh	r3, [r7, #8]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f70:	e015      	b.n	8003f9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f72:	893b      	ldrh	r3, [r7, #8]
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	69b9      	ldr	r1, [r7, #24]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f883 	bl	8004090 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e012      	b.n	8003fba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f94:	893b      	ldrh	r3, [r7, #8]
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2140      	movs	r1, #64	; 0x40
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f831 	bl	8004010 <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	80002000 	.word	0x80002000

08003fc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d103      	bne.n	8003fe6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d007      	beq.n	8004004 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	619a      	str	r2, [r3, #24]
  }
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004020:	e022      	b.n	8004068 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d01e      	beq.n	8004068 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402a:	f7ff f87d 	bl	8003128 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d302      	bcc.n	8004040 <I2C_WaitOnFlagUntilTimeout+0x30>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d113      	bne.n	8004068 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e00f      	b.n	8004088 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	429a      	cmp	r2, r3
 8004084:	d0cd      	beq.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800409c:	e02c      	b.n	80040f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f870 	bl	8004188 <I2C_IsAcknowledgeFailed>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e02a      	b.n	8004108 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d01e      	beq.n	80040f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7ff f835 	bl	8003128 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d113      	bne.n	80040f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e007      	b.n	8004108 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b02      	cmp	r3, #2
 8004104:	d1cb      	bne.n	800409e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800411c:	e028      	b.n	8004170 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f830 	bl	8004188 <I2C_IsAcknowledgeFailed>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e026      	b.n	8004180 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7fe fff9 	bl	8003128 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d113      	bne.n	8004170 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e007      	b.n	8004180 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b20      	cmp	r3, #32
 800417c:	d1cf      	bne.n	800411e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b10      	cmp	r3, #16
 80041a0:	d151      	bne.n	8004246 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a2:	e022      	b.n	80041ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d01e      	beq.n	80041ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ac:	f7fe ffbc 	bl	8003128 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <I2C_IsAcknowledgeFailed+0x3a>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e02e      	b.n	8004248 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d1d5      	bne.n	80041a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2210      	movs	r2, #16
 80041fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2220      	movs	r2, #32
 8004206:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff fedd 	bl	8003fc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <I2C_IsAcknowledgeFailed+0xc8>)
 800421a:	400b      	ands	r3, r1
 800421c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f043 0204 	orr.w	r2, r3, #4
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	fe00e800 	.word	0xfe00e800

08004254 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	817b      	strh	r3, [r7, #10]
 8004262:	4613      	mov	r3, r2
 8004264:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	0d5b      	lsrs	r3, r3, #21
 8004270:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004274:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <I2C_TransferConfig+0x58>)
 8004276:	430b      	orrs	r3, r1
 8004278:	43db      	mvns	r3, r3
 800427a:	ea02 0103 	and.w	r1, r2, r3
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004284:	7a7b      	ldrb	r3, [r7, #9]
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	431a      	orrs	r2, r3
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	03ff63ff 	.word	0x03ff63ff

080042b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d138      	bne.n	8004338 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e032      	b.n	800433a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	; 0x24
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004302:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b20      	cmp	r3, #32
 800435a:	d139      	bne.n	80043d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004366:	2302      	movs	r3, #2
 8004368:	e033      	b.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2224      	movs	r2, #36	; 0x24
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0201 	bic.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004398:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ee:	6013      	str	r3, [r2, #0]
}
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	58000400 	.word	0x58000400

08004400 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <HAL_PWREx_GetVoltageRange+0x18>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	58000400 	.word	0x58000400

0800441c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d101      	bne.n	8004434 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_RCC_HSE_EnableBypass>:
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800444e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004452:	6013      	str	r3, [r2, #0]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <LL_RCC_HSE_DisableBypass>:
{
 800445e:	b480      	push	{r7}
 8004460:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800446c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004470:	6013      	str	r3, [r2, #0]
}
 8004472:	bf00      	nop
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_RCC_HSE_Enable>:
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800448a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <LL_RCC_HSE_Disable>:
{
 800449a:	b480      	push	{r7}
 800449c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800449e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_RCC_HSE_IsReady>:
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80044bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ca:	d101      	bne.n	80044d0 <LL_RCC_HSE_IsReady+0x18>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <LL_RCC_HSE_IsReady+0x1a>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_RCC_HSI_Enable>:
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80044e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ee:	6013      	str	r3, [r2, #0]
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_RCC_HSI_Disable>:
{
 80044fa:	b480      	push	{r7}
 80044fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800450c:	6013      	str	r3, [r2, #0]
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <LL_RCC_HSI_IsReady>:
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800451c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452a:	d101      	bne.n	8004530 <LL_RCC_HSI_IsReady+0x18>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <LL_RCC_HSI_IsReady+0x1a>
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <LL_RCC_HSI_SetCalibTrimming>:
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <LL_RCC_HSI48_Enable>:
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800456a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800457e:	bf00      	nop
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_RCC_HSI48_Disable>:
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <LL_RCC_HSI48_IsReady>:
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d101      	bne.n	80045c2 <LL_RCC_HSI48_IsReady+0x18>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <LL_RCC_HSI48_IsReady+0x1a>
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <LL_RCC_LSE_Enable>:
{
 80045ce:	b480      	push	{r7}
 80045d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_RCC_LSE_Disable>:
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004608:	bf00      	nop
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <LL_RCC_LSE_EnableBypass>:
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004622:	f043 0304 	orr.w	r3, r3, #4
 8004626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_RCC_LSE_DisableBypass>:
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004644:	f023 0304 	bic.w	r3, r3, #4
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_RCC_LSE_IsReady>:
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d101      	bne.n	800466e <LL_RCC_LSE_IsReady+0x18>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <LL_RCC_LSE_IsReady+0x1a>
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <LL_RCC_LSI1_Enable>:
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_RCC_LSI1_Disable>:
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_RCC_LSI1_IsReady>:
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d101      	bne.n	80046d6 <LL_RCC_LSI1_IsReady+0x18>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_RCC_LSI1_IsReady+0x1a>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <LL_RCC_LSI2_Enable>:
{
 80046e2:	b480      	push	{r7}
 80046e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80046e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046fa:	bf00      	nop
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_RCC_LSI2_Disable>:
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004714:	f023 0304 	bic.w	r3, r3, #4
 8004718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_RCC_LSI2_IsReady>:
{
 8004726:	b480      	push	{r7}
 8004728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b08      	cmp	r3, #8
 8004738:	d101      	bne.n	800473e <LL_RCC_LSI2_IsReady+0x18>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <LL_RCC_LSI2_IsReady+0x1a>
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <LL_RCC_LSI2_SetTrimming>:
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_RCC_MSI_Enable>:
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800477c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6013      	str	r3, [r2, #0]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_RCC_MSI_Disable>:
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	6013      	str	r3, [r2, #0]
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_RCC_MSI_IsReady>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80047b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d101      	bne.n	80047ca <LL_RCC_MSI_IsReady+0x16>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <LL_RCC_MSI_IsReady+0x18>
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_RCC_MSI_SetRange>:
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_RCC_MSI_GetRange>:
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2bb0      	cmp	r3, #176	; 0xb0
 8004814:	d901      	bls.n	800481a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004816:	23b0      	movs	r3, #176	; 0xb0
 8004818:	607b      	str	r3, [r7, #4]
  return msiRange;
 800481a:	687b      	ldr	r3, [r7, #4]
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_RCC_SetSysClkSource>:
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 0203 	bic.w	r2, r3, #3
 8004864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <LL_RCC_GetSysClkSource>:
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800487e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 030c 	and.w	r3, r3, #12
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <LL_RCC_SetAHBPrescaler>:
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800489a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <LL_C2_RCC_SetAHBPrescaler>:
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_RCC_SetAHB4Prescaler>:
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048f6:	f023 020f 	bic.w	r2, r3, #15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_RCC_SetAPB1Prescaler>:
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_RCC_SetAPB2Prescaler>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800494e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_RCC_GetAHBPrescaler>:
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004972:	4618      	mov	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <LL_C2_RCC_GetAHBPrescaler>:
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_GetAHB4Prescaler>:
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <LL_RCC_GetAPB1Prescaler>:
{
 80049b2:	b480      	push	{r7}
 80049b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80049b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <LL_RCC_GetAPB2Prescaler>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80049e2:	b480      	push	{r7}
 80049e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80049e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f4:	6013      	str	r3, [r2, #0]
}
 80049f6:	bf00      	nop
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a12:	6013      	str	r3, [r2, #0]
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a30:	d101      	bne.n	8004a36 <LL_RCC_PLL_IsReady+0x18>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <LL_RCC_PLL_IsReady+0x1a>
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0303 	and.w	r3, r3, #3
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab6:	d101      	bne.n	8004abc <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004adc:	d101      	bne.n	8004ae2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b02:	d101      	bne.n	8004b08 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b26:	d101      	bne.n	8004b2c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b4a:	d101      	bne.n	8004b50 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b08d      	sub	sp, #52	; 0x34
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e386      	b.n	800527c <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 808f 	beq.w	8004c9a <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7c:	f7ff fe7d 	bl	800487a <LL_RCC_GetSysClkSource>
 8004b80:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b82:	f7ff ff83 	bl	8004a8c <LL_RCC_PLL_GetMainSource>
 8004b86:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_RCC_OscConfig+0x3e>
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d149      	bne.n	8004c28 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d146      	bne.n	8004c28 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b9a:	f7ff fe0b 	bl	80047b4 <LL_RCC_MSI_IsReady>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x54>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e365      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004bb4:	f7ff fe23 	bl	80047fe <LL_RCC_MSI_GetRange>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	429c      	cmp	r4, r3
 8004bbc:	d914      	bls.n	8004be8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fd60 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e354      	b.n	800527c <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fdfd 	bl	80047d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fe21 	bl	8004828 <LL_RCC_MSI_SetCalibTrimming>
 8004be6:	e013      	b.n	8004c10 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fdf2 	bl	80047d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff fe16 	bl	8004828 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fd41 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e335      	b.n	800527c <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8004c10:	f7fe f97c 	bl	8002f0c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c14:	4bb4      	ldr	r3, [pc, #720]	; (8004ee8 <HAL_RCC_OscConfig+0x38c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fe f857 	bl	8002ccc <HAL_InitTick>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d039      	beq.n	8004c98 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e329      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01e      	beq.n	8004c6e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c30:	f7ff fda2 	bl	8004778 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c34:	f7fe fa78 	bl	8003128 <HAL_GetTick>
 8004c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c3c:	f7fe fa74 	bl	8003128 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e316      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c4e:	f7ff fdb1 	bl	80047b4 <LL_RCC_MSI_IsReady>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f1      	beq.n	8004c3c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fdba 	bl	80047d6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fdde 	bl	8004828 <LL_RCC_MSI_SetCalibTrimming>
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c6e:	f7ff fd92 	bl	8004796 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c72:	f7fe fa59 	bl	8003128 <HAL_GetTick>
 8004c76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c7a:	f7fe fa55 	bl	8003128 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e2f7      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c8c:	f7ff fd92 	bl	80047b4 <LL_RCC_MSI_IsReady>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f1      	bne.n	8004c7a <HAL_RCC_OscConfig+0x11e>
 8004c96:	e000      	b.n	8004c9a <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d05a      	beq.n	8004d5c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca6:	f7ff fde8 	bl	800487a <LL_RCC_GetSysClkSource>
 8004caa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cac:	f7ff feee 	bl	8004a8c <LL_RCC_PLL_GetMainSource>
 8004cb0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d005      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x168>
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b0c      	cmp	r3, #12
 8004cbc:	d10d      	bne.n	8004cda <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d10a      	bne.n	8004cda <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	f7ff fbf8 	bl	80044b8 <LL_RCC_HSE_IsReady>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d045      	beq.n	8004d5a <HAL_RCC_OscConfig+0x1fe>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d141      	bne.n	8004d5a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e2d0      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce2:	d102      	bne.n	8004cea <HAL_RCC_OscConfig+0x18e>
 8004ce4:	f7ff fbca 	bl	800447c <LL_RCC_HSE_Enable>
 8004ce8:	e00d      	b.n	8004d06 <HAL_RCC_OscConfig+0x1aa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf2:	d104      	bne.n	8004cfe <HAL_RCC_OscConfig+0x1a2>
 8004cf4:	f7ff fba4 	bl	8004440 <LL_RCC_HSE_EnableBypass>
 8004cf8:	f7ff fbc0 	bl	800447c <LL_RCC_HSE_Enable>
 8004cfc:	e003      	b.n	8004d06 <HAL_RCC_OscConfig+0x1aa>
 8004cfe:	f7ff fbcc 	bl	800449a <LL_RCC_HSE_Disable>
 8004d02:	f7ff fbac 	bl	800445e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d012      	beq.n	8004d34 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7fe fa0b 	bl	8003128 <HAL_GetTick>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d16:	f7fe fa07 	bl	8003128 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b64      	cmp	r3, #100	; 0x64
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e2a9      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d28:	f7ff fbc6 	bl	80044b8 <LL_RCC_HSE_IsReady>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f1      	beq.n	8004d16 <HAL_RCC_OscConfig+0x1ba>
 8004d32:	e013      	b.n	8004d5c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fe f9f8 	bl	8003128 <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fe f9f4 	bl	8003128 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e296      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d4e:	f7ff fbb3 	bl	80044b8 <LL_RCC_HSE_IsReady>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f1      	bne.n	8004d3c <HAL_RCC_OscConfig+0x1e0>
 8004d58:	e000      	b.n	8004d5c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d051      	beq.n	8004e0c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d68:	f7ff fd87 	bl	800487a <LL_RCC_GetSysClkSource>
 8004d6c:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d6e:	f7ff fe8d 	bl	8004a8c <LL_RCC_PLL_GetMainSource>
 8004d72:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d005      	beq.n	8004d86 <HAL_RCC_OscConfig+0x22a>
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d113      	bne.n	8004da8 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d110      	bne.n	8004da8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d86:	f7ff fbc7 	bl	8004518 <LL_RCC_HSI_IsReady>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_OscConfig+0x240>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e26f      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fbcb 	bl	800453c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da6:	e031      	b.n	8004e0c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d019      	beq.n	8004de4 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db0:	f7ff fb94 	bl	80044dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fe f9b8 	bl	8003128 <HAL_GetTick>
 8004db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fe f9b4 	bl	8003128 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e256      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004dce:	f7ff fba3 	bl	8004518 <LL_RCC_HSI_IsReady>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f1      	beq.n	8004dbc <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fbad 	bl	800453c <LL_RCC_HSI_SetCalibTrimming>
 8004de2:	e013      	b.n	8004e0c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004de4:	f7ff fb89 	bl	80044fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fe f99e 	bl	8003128 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fe f99a 	bl	8003128 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e23c      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e02:	f7ff fb89 	bl	8004518 <LL_RCC_HSI_IsReady>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f1      	bne.n	8004df0 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80a2 	beq.w	8004f6a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d075      	beq.n	8004f1a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d046      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004e3a:	f7ff fc40 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d113      	bne.n	8004e6c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004e44:	f7ff fc19 	bl	800467a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e48:	f7fe f96e 	bl	8003128 <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e50:	f7fe f96a 	bl	8003128 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e20c      	b.n	800527c <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e62:	f7ff fc2c 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f1      	beq.n	8004e50 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004e6c:	f7ff fc39 	bl	80046e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fe f95a 	bl	8003128 <HAL_GetTick>
 8004e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e78:	f7fe f956 	bl	8003128 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e1f8      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e8a:	f7ff fc4c 	bl	8004726 <LL_RCC_LSI2_IsReady>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0f1      	beq.n	8004e78 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fc56 	bl	800474a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004e9e:	f7ff fbfd 	bl	800469c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea2:	f7fe f941 	bl	8003128 <HAL_GetTick>
 8004ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004eaa:	f7fe f93d 	bl	8003128 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e1df      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ebc:	f7ff fbff 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f1      	bne.n	8004eaa <HAL_RCC_OscConfig+0x34e>
 8004ec6:	e050      	b.n	8004f6a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004ec8:	f7ff fbd7 	bl	800467a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fe f92c 	bl	8003128 <HAL_GetTick>
 8004ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ed4:	f7fe f928 	bl	8003128 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d904      	bls.n	8004eec <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e1ca      	b.n	800527c <HAL_RCC_OscConfig+0x720>
 8004ee6:	bf00      	nop
 8004ee8:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004eec:	f7ff fbe7 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ee      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004ef6:	f7ff fc05 	bl	8004704 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004efc:	f7fe f914 	bl	8003128 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1b6      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f0e:	f7ff fc0a 	bl	8004726 <LL_RCC_LSI2_IsReady>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f1      	bne.n	8004efc <HAL_RCC_OscConfig+0x3a0>
 8004f18:	e027      	b.n	8004f6a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004f1a:	f7ff fbf3 	bl	8004704 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1e:	f7fe f903 	bl	8003128 <HAL_GetTick>
 8004f22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f26:	f7fe f8ff 	bl	8003128 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e1a1      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f38:	f7ff fbf5 	bl	8004726 <LL_RCC_LSI2_IsReady>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f1      	bne.n	8004f26 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004f42:	f7ff fbab 	bl	800469c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fe f8ef 	bl	8003128 <HAL_GetTick>
 8004f4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f4e:	f7fe f8eb 	bl	8003128 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e18d      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f60:	f7ff fbad 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f1      	bne.n	8004f4e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d05b      	beq.n	800502e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f76:	4bb5      	ldr	r3, [pc, #724]	; (800524c <HAL_RCC_OscConfig+0x6f0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d114      	bne.n	8004fac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f82:	f7ff fa2d 	bl	80043e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f86:	f7fe f8cf 	bl	8003128 <HAL_GetTick>
 8004f8a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8e:	f7fe f8cb 	bl	8003128 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e16d      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa0:	4baa      	ldr	r3, [pc, #680]	; (800524c <HAL_RCC_OscConfig+0x6f0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d102      	bne.n	8004fba <HAL_RCC_OscConfig+0x45e>
 8004fb4:	f7ff fb0b 	bl	80045ce <LL_RCC_LSE_Enable>
 8004fb8:	e00c      	b.n	8004fd4 <HAL_RCC_OscConfig+0x478>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d104      	bne.n	8004fcc <HAL_RCC_OscConfig+0x470>
 8004fc2:	f7ff fb26 	bl	8004612 <LL_RCC_LSE_EnableBypass>
 8004fc6:	f7ff fb02 	bl	80045ce <LL_RCC_LSE_Enable>
 8004fca:	e003      	b.n	8004fd4 <HAL_RCC_OscConfig+0x478>
 8004fcc:	f7ff fb10 	bl	80045f0 <LL_RCC_LSE_Disable>
 8004fd0:	f7ff fb30 	bl	8004634 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d014      	beq.n	8005006 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fe f8a4 	bl	8003128 <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe4:	f7fe f8a0 	bl	8003128 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e140      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ffa:	f7ff fb2c 	bl	8004656 <LL_RCC_LSE_IsReady>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ef      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x488>
 8005004:	e013      	b.n	800502e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fe f88f 	bl	8003128 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800500c:	e00a      	b.n	8005024 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fe f88b 	bl	8003128 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e12b      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005024:	f7ff fb17 	bl	8004656 <LL_RCC_LSE_IsReady>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1ef      	bne.n	800500e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d02c      	beq.n	8005094 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	2b00      	cmp	r3, #0
 8005040:	d014      	beq.n	800506c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005042:	f7ff fa90 	bl	8004566 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7fe f86f 	bl	8003128 <HAL_GetTick>
 800504a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800504e:	f7fe f86b 	bl	8003128 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e10d      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005060:	f7ff faa3 	bl	80045aa <LL_RCC_HSI48_IsReady>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f1      	beq.n	800504e <HAL_RCC_OscConfig+0x4f2>
 800506a:	e013      	b.n	8005094 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800506c:	f7ff fa8c 	bl	8004588 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005070:	f7fe f85a 	bl	8003128 <HAL_GetTick>
 8005074:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005078:	f7fe f856 	bl	8003128 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0f8      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800508a:	f7ff fa8e 	bl	80045aa <LL_RCC_HSI48_IsReady>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f1      	bne.n	8005078 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80ee 	beq.w	800527a <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800509e:	f7ff fbec 	bl	800487a <LL_RCC_GetSysClkSource>
 80050a2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80050a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	f040 80af 	bne.w	8005214 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f003 0203 	and.w	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d123      	bne.n	800510c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d11c      	bne.n	800510c <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	0a1b      	lsrs	r3, r3, #8
 80050d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d114      	bne.n	800510c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d10d      	bne.n	800510c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d106      	bne.n	800510c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005108:	429a      	cmp	r2, r3
 800510a:	d05d      	beq.n	80051c8 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b0c      	cmp	r3, #12
 8005110:	d058      	beq.n	80051c4 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0ab      	b.n	800527c <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005124:	f7ff fc6c 	bl	8004a00 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005128:	f7fd fffe 	bl	8003128 <HAL_GetTick>
 800512c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005130:	f7fd fffa 	bl	8003128 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e09c      	b.n	800527c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1ef      	bne.n	8005130 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	4b3e      	ldr	r3, [pc, #248]	; (8005250 <HAL_RCC_OscConfig+0x6f4>)
 8005158:	4013      	ands	r3, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005162:	4311      	orrs	r1, r2
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005168:	0212      	lsls	r2, r2, #8
 800516a:	4311      	orrs	r1, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005170:	4311      	orrs	r1, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005176:	4311      	orrs	r1, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800517c:	430a      	orrs	r2, r1
 800517e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005182:	4313      	orrs	r3, r2
 8005184:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005186:	f7ff fc2c 	bl	80049e2 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800518a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005198:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800519a:	f7fd ffc5 	bl	8003128 <HAL_GetTick>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a2:	f7fd ffc1 	bl	8003128 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e063      	b.n	800527c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ef      	beq.n	80051a2 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051c2:	e05a      	b.n	800527a <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e059      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d151      	bne.n	800527a <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051d6:	f7ff fc04 	bl	80049e2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051ea:	f7fd ff9d 	bl	8003128 <HAL_GetTick>
 80051ee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fd ff99 	bl	8003128 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e03b      	b.n	800527c <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0ef      	beq.n	80051f2 <HAL_RCC_OscConfig+0x696>
 8005212:	e032      	b.n	800527a <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b0c      	cmp	r3, #12
 8005218:	d02d      	beq.n	8005276 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521a:	f7ff fbf1 	bl	8004a00 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005228:	f023 0303 	bic.w	r3, r3, #3
 800522c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005238:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800523c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005240:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fd ff71 	bl	8003128 <HAL_GetTick>
 8005246:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005248:	e00d      	b.n	8005266 <HAL_RCC_OscConfig+0x70a>
 800524a:	bf00      	nop
 800524c:	58000400 	.word	0x58000400
 8005250:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005254:	f7fd ff68 	bl	8003128 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e00a      	b.n	800527c <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1ef      	bne.n	8005254 <HAL_RCC_OscConfig+0x6f8>
 8005274:	e001      	b.n	800527a <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3734      	adds	r7, #52	; 0x34
 8005280:	46bd      	mov	sp, r7
 8005282:	bd90      	pop	{r4, r7, pc}

08005284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e12a      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005298:	4b97      	ldr	r3, [pc, #604]	; (80054f8 <HAL_RCC_ClockConfig+0x274>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d91b      	bls.n	80052de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b94      	ldr	r3, [pc, #592]	; (80054f8 <HAL_RCC_ClockConfig+0x274>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 0207 	bic.w	r2, r3, #7
 80052ae:	4992      	ldr	r1, [pc, #584]	; (80054f8 <HAL_RCC_ClockConfig+0x274>)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b6:	f7fd ff37 	bl	8003128 <HAL_GetTick>
 80052ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052be:	f7fd ff33 	bl	8003128 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e10e      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d0:	4b89      	ldr	r3, [pc, #548]	; (80054f8 <HAL_RCC_ClockConfig+0x274>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d1ef      	bne.n	80052be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d016      	beq.n	8005318 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff facf 	bl	8004892 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052f4:	f7fd ff18 	bl	8003128 <HAL_GetTick>
 80052f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80052fa:	e008      	b.n	800530e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052fc:	f7fd ff14 	bl	8003128 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0ef      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800530e:	f7ff fbc9 	bl	8004aa4 <LL_RCC_IsActiveFlag_HPRE>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0f1      	beq.n	80052fc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d016      	beq.n	8005352 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fac6 	bl	80048ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800532e:	f7fd fefb 	bl	8003128 <HAL_GetTick>
 8005332:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005334:	e008      	b.n	8005348 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005336:	f7fd fef7 	bl	8003128 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e0d2      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005348:	f7ff fbbe 	bl	8004ac8 <LL_RCC_IsActiveFlag_C2HPRE>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f1      	beq.n	8005336 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d016      	beq.n	800538c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fabf 	bl	80048e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005368:	f7fd fede 	bl	8003128 <HAL_GetTick>
 800536c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005370:	f7fd feda 	bl	8003128 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e0b5      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005382:	f7ff fbb4 	bl	8004aee <LL_RCC_IsActiveFlag_SHDHPRE>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f1      	beq.n	8005370 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d016      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fab9 	bl	8004914 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053a2:	f7fd fec1 	bl	8003128 <HAL_GetTick>
 80053a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053aa:	f7fd febd 	bl	8003128 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e098      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80053bc:	f7ff fbaa 	bl	8004b14 <LL_RCC_IsActiveFlag_PPRE1>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f1      	beq.n	80053aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d017      	beq.n	8005402 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff faaf 	bl	800493c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053de:	f7fd fea3 	bl	8003128 <HAL_GetTick>
 80053e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053e6:	f7fd fe9f 	bl	8003128 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e07a      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053f8:	f7ff fb9e 	bl	8004b38 <LL_RCC_IsActiveFlag_PPRE2>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f1      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d043      	beq.n	8005496 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d106      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005416:	f7ff f84f 	bl	80044b8 <LL_RCC_HSE_IsReady>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d11e      	bne.n	800545e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e064      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d106      	bne.n	800543a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800542c:	f7ff faf7 	bl	8004a1e <LL_RCC_PLL_IsReady>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d113      	bne.n	800545e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e059      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005442:	f7ff f9b7 	bl	80047b4 <LL_RCC_MSI_IsReady>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d108      	bne.n	800545e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e04e      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005450:	f7ff f862 	bl	8004518 <LL_RCC_HSI_IsReady>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e047      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff f9f5 	bl	8004852 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005468:	f7fd fe5e 	bl	8003128 <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	e00a      	b.n	8005486 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005470:	f7fd fe5a 	bl	8003128 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e033      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	f7ff f9f8 	bl	800487a <LL_RCC_GetSysClkSource>
 800548a:	4602      	mov	r2, r0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	429a      	cmp	r2, r3
 8005494:	d1ec      	bne.n	8005470 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005496:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <HAL_RCC_ClockConfig+0x274>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d21b      	bcs.n	80054dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <HAL_RCC_ClockConfig+0x274>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 0207 	bic.w	r2, r3, #7
 80054ac:	4912      	ldr	r1, [pc, #72]	; (80054f8 <HAL_RCC_ClockConfig+0x274>)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b4:	f7fd fe38 	bl	8003128 <HAL_GetTick>
 80054b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80054bc:	f7fd fe34 	bl	8003128 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e00f      	b.n	80054ee <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <HAL_RCC_ClockConfig+0x274>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d1ef      	bne.n	80054bc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80054dc:	f7fd fd16 	bl	8002f0c <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80054e0:	f7fd fe2e 	bl	8003140 <HAL_GetTickPrio>
 80054e4:	4603      	mov	r3, r0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fd fbf0 	bl	8002ccc <HAL_InitTick>
 80054ec:	4603      	mov	r3, r0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	58004000 	.word	0x58004000

080054fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005502:	f7ff f9ba 	bl	800487a <LL_RCC_GetSysClkSource>
 8005506:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800550e:	f7ff f976 	bl	80047fe <LL_RCC_MSI_GetRange>
 8005512:	4603      	mov	r3, r0
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800551c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e04a      	b.n	80055ba <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d102      	bne.n	8005530 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800552a:	4b27      	ldr	r3, [pc, #156]	; (80055c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e044      	b.n	80055ba <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b08      	cmp	r3, #8
 8005534:	d10a      	bne.n	800554c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005536:	f7fe ff71 	bl	800441c <LL_RCC_HSE_IsEnabledDiv2>
 800553a:	4603      	mov	r3, r0
 800553c:	2b01      	cmp	r3, #1
 800553e:	d102      	bne.n	8005546 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005540:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e039      	b.n	80055ba <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005546:	4b21      	ldr	r3, [pc, #132]	; (80055cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e036      	b.n	80055ba <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800554c:	f7ff fa9e 	bl	8004a8c <LL_RCC_PLL_GetMainSource>
 8005550:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d002      	beq.n	800555e <HAL_RCC_GetSysClockFreq+0x62>
 8005558:	2b03      	cmp	r3, #3
 800555a:	d003      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x68>
 800555c:	e00d      	b.n	800557a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800555e:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005560:	60bb      	str	r3, [r7, #8]
        break;
 8005562:	e015      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005564:	f7fe ff5a 	bl	800441c <LL_RCC_HSE_IsEnabledDiv2>
 8005568:	4603      	mov	r3, r0
 800556a:	2b01      	cmp	r3, #1
 800556c:	d102      	bne.n	8005574 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800556e:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005570:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005572:	e00d      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005574:	4b15      	ldr	r3, [pc, #84]	; (80055cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005576:	60bb      	str	r3, [r7, #8]
        break;
 8005578:	e00a      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800557a:	f7ff f940 	bl	80047fe <LL_RCC_MSI_GetRange>
 800557e:	4603      	mov	r3, r0
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	4a0f      	ldr	r2, [pc, #60]	; (80055c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800558c:	60bb      	str	r3, [r7, #8]
        break;
 800558e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005590:	f7ff fa57 	bl	8004a42 <LL_RCC_PLL_GetN>
 8005594:	4602      	mov	r2, r0
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	fb03 f402 	mul.w	r4, r3, r2
 800559c:	f7ff fa6a 	bl	8004a74 <LL_RCC_PLL_GetDivider>
 80055a0:	4603      	mov	r3, r0
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	3301      	adds	r3, #1
 80055a6:	fbb4 f4f3 	udiv	r4, r4, r3
 80055aa:	f7ff fa57 	bl	8004a5c <LL_RCC_PLL_GetR>
 80055ae:	4603      	mov	r3, r0
 80055b0:	0f5b      	lsrs	r3, r3, #29
 80055b2:	3301      	adds	r3, #1
 80055b4:	fbb4 f3f3 	udiv	r3, r4, r3
 80055b8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80055ba:	68fb      	ldr	r3, [r7, #12]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd90      	pop	{r4, r7, pc}
 80055c4:	0800d8c0 	.word	0x0800d8c0
 80055c8:	00f42400 	.word	0x00f42400
 80055cc:	01e84800 	.word	0x01e84800

080055d0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055d0:	b598      	push	{r3, r4, r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80055d4:	f7ff ff92 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 80055d8:	4604      	mov	r4, r0
 80055da:	f7ff f9c3 	bl	8004964 <LL_RCC_GetAHBPrescaler>
 80055de:	4603      	mov	r3, r0
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	4a03      	ldr	r2, [pc, #12]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x24>)
 80055e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd98      	pop	{r3, r4, r7, pc}
 80055f4:	0800d860 	.word	0x0800d860

080055f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f8:	b598      	push	{r3, r4, r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80055fc:	f7ff ffe8 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 8005600:	4604      	mov	r4, r0
 8005602:	f7ff f9d6 	bl	80049b2 <LL_RCC_GetAPB1Prescaler>
 8005606:	4603      	mov	r3, r0
 8005608:	0a1b      	lsrs	r3, r3, #8
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	4a04      	ldr	r2, [pc, #16]	; (8005620 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	fa24 f303 	lsr.w	r3, r4, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	bd98      	pop	{r3, r4, r7, pc}
 8005620:	0800d8a0 	.word	0x0800d8a0

08005624 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	226f      	movs	r2, #111	; 0x6f
 8005632:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005634:	f7ff f921 	bl	800487a <LL_RCC_GetSysClkSource>
 8005638:	4602      	mov	r2, r0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800563e:	f7ff f991 	bl	8004964 <LL_RCC_GetAHBPrescaler>
 8005642:	4602      	mov	r2, r0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005648:	f7ff f9b3 	bl	80049b2 <LL_RCC_GetAPB1Prescaler>
 800564c:	4602      	mov	r2, r0
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005652:	f7ff f9ba 	bl	80049ca <LL_RCC_GetAPB2Prescaler>
 8005656:	4602      	mov	r2, r0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800565c:	f7ff f98e 	bl	800497c <LL_C2_RCC_GetAHBPrescaler>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005666:	f7ff f996 	bl	8004996 <LL_RCC_GetAHB4Prescaler>
 800566a:	4602      	mov	r2, r0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005670:	4b04      	ldr	r3, [pc, #16]	; (8005684 <HAL_RCC_GetClockConfig+0x60>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0207 	and.w	r2, r3, #7
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	601a      	str	r2, [r3, #0]
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	58004000 	.word	0x58004000

08005688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005688:	b590      	push	{r4, r7, lr}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2bb0      	cmp	r3, #176	; 0xb0
 8005694:	d903      	bls.n	800569e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005696:	4b15      	ldr	r3, [pc, #84]	; (80056ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e007      	b.n	80056ae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	4a11      	ldr	r2, [pc, #68]	; (80056ec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80056ae:	f7ff f972 	bl	8004996 <LL_RCC_GetAHB4Prescaler>
 80056b2:	4603      	mov	r3, r0
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80056bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80056cc:	fba2 2303 	umull	r2, r3, r2, r3
 80056d0:	0c9c      	lsrs	r4, r3, #18
 80056d2:	f7fe fe95 	bl	8004400 <HAL_PWREx_GetVoltageRange>
 80056d6:	4603      	mov	r3, r0
 80056d8:	4619      	mov	r1, r3
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 f80c 	bl	80056f8 <RCC_SetFlashLatency>
 80056e0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd90      	pop	{r4, r7, pc}
 80056ea:	bf00      	nop
 80056ec:	0800d8c0 	.word	0x0800d8c0
 80056f0:	0800d860 	.word	0x0800d860
 80056f4:	431bde83 	.word	0x431bde83

080056f8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80056f8:	b590      	push	{r4, r7, lr}
 80056fa:	b093      	sub	sp, #76	; 0x4c
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005702:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <RCC_SetFlashLatency+0xf0>)
 8005704:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800570a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800570e:	4a37      	ldr	r2, [pc, #220]	; (80057ec <RCC_SetFlashLatency+0xf4>)
 8005710:	f107 031c 	add.w	r3, r7, #28
 8005714:	ca07      	ldmia	r2, {r0, r1, r2}
 8005716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800571a:	4b35      	ldr	r3, [pc, #212]	; (80057f0 <RCC_SetFlashLatency+0xf8>)
 800571c:	f107 040c 	add.w	r4, r7, #12
 8005720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005726:	2300      	movs	r3, #0
 8005728:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005730:	d11c      	bne.n	800576c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005732:	2300      	movs	r3, #0
 8005734:	643b      	str	r3, [r7, #64]	; 0x40
 8005736:	e015      	b.n	8005764 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005740:	4413      	add	r3, r2
 8005742:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d808      	bhi.n	800575e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800574c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005754:	4413      	add	r3, r2
 8005756:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800575a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800575c:	e022      	b.n	80057a4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800575e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005760:	3301      	adds	r3, #1
 8005762:	643b      	str	r3, [r7, #64]	; 0x40
 8005764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005766:	2b03      	cmp	r3, #3
 8005768:	d9e6      	bls.n	8005738 <RCC_SetFlashLatency+0x40>
 800576a:	e01b      	b.n	80057a4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800576c:	2300      	movs	r3, #0
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005770:	e015      	b.n	800579e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800577a:	4413      	add	r3, r2
 800577c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d808      	bhi.n	8005798 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800578e:	4413      	add	r3, r2
 8005790:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005796:	e005      	b.n	80057a4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579a:	3301      	adds	r3, #1
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d9e6      	bls.n	8005772 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80057a4:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <RCC_SetFlashLatency+0xfc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f023 0207 	bic.w	r2, r3, #7
 80057ac:	4911      	ldr	r1, [pc, #68]	; (80057f4 <RCC_SetFlashLatency+0xfc>)
 80057ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b0:	4313      	orrs	r3, r2
 80057b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057b4:	f7fd fcb8 	bl	8003128 <HAL_GetTick>
 80057b8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057ba:	e008      	b.n	80057ce <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057bc:	f7fd fcb4 	bl	8003128 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e007      	b.n	80057de <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <RCC_SetFlashLatency+0xfc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d8:	429a      	cmp	r2, r3
 80057da:	d1ef      	bne.n	80057bc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	374c      	adds	r7, #76	; 0x4c
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd90      	pop	{r4, r7, pc}
 80057e6:	bf00      	nop
 80057e8:	0800c654 	.word	0x0800c654
 80057ec:	0800c664 	.word	0x0800c664
 80057f0:	0800c670 	.word	0x0800c670
 80057f4:	58004000 	.word	0x58004000

080057f8 <LL_RCC_LSE_IsEnabled>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <LL_RCC_LSE_IsEnabled+0x18>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <LL_RCC_LSE_IsEnabled+0x1a>
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <LL_RCC_LSE_IsReady>:
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	d101      	bne.n	8005834 <LL_RCC_LSE_IsReady+0x18>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <LL_RCC_LSE_IsReady+0x1a>
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <LL_RCC_SetRFWKPClockSource>:
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005850:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <LL_RCC_SetSMPSClockSource>:
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	f023 0203 	bic.w	r2, r3, #3
 800587e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4313      	orrs	r3, r2
 8005886:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_RCC_SetSMPSPrescaler>:
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_RCC_SetUSARTClockSource>:
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80058c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f023 0203 	bic.w	r2, r3, #3
 80058d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <LL_RCC_SetLPUARTClockSource>:
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <LL_RCC_SetI2CClockSource>:
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800592c:	43db      	mvns	r3, r3
 800592e:	401a      	ands	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <LL_RCC_SetLPTIMClockSource>:
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	43db      	mvns	r3, r3
 8005966:	401a      	ands	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <LL_RCC_SetSAIClockSource>:
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005992:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <LL_RCC_SetRNGClockSource>:
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80059c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <LL_RCC_SetCLK48ClockSource>:
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_RCC_SetUSBClockSource>:
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ffe3 	bl	80059da <LL_RCC_SetCLK48ClockSource>
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <LL_RCC_SetADCClockSource>:
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <LL_RCC_SetRTCClockSource>:
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LL_RCC_GetRTCClockSource>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <LL_RCC_ForceBackupDomainReset>:
{
 8005a8e:	b480      	push	{r7}
 8005a90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005aa6:	bf00      	nop
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ac8:	bf00      	nop
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <LL_RCC_PLLSAI1_Enable>:
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ae4:	6013      	str	r3, [r2, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <LL_RCC_PLLSAI1_Disable>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005afe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b02:	6013      	str	r3, [r2, #0]
}
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <LL_RCC_PLLSAI1_IsReady>:
{
 8005b0e:	b480      	push	{r7}
 8005b10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b20:	d101      	bne.n	8005b26 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b088      	sub	sp, #32
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b3e:	2300      	movs	r3, #0
 8005b40:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d033      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b56:	d00c      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b5c:	d802      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d010      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b62:	e017      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b68:	d017      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005b6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b6e:	d016      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005b70:	e010      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b80:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b82:	e00d      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3304      	adds	r3, #4
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f947 	bl	8005e1c <RCCEx_PLLSAI1_ConfigNP>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b92:	e005      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	77fb      	strb	r3, [r7, #31]
        break;
 8005b98:	e002      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005b9a:	bf00      	nop
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba0:	7ffb      	ldrb	r3, [r7, #31]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fee9 	bl	8005982 <LL_RCC_SetSAIClockSource>
 8005bb0:	e001      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb2:	7ffb      	ldrb	r3, [r7, #31]
 8005bb4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d046      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005bc2:	f7ff ff57 	bl	8005a74 <LL_RCC_GetRTCClockSource>
 8005bc6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d03c      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005bd2:	f7fe fc05 	bl	80043e0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d105      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff ff31 	bl	8005a48 <LL_RCC_SetRTCClockSource>
 8005be6:	e02e      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005bf2:	f7ff ff4c 	bl	8005a8e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005bf6:	f7ff ff5b 	bl	8005ab0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005c08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c12:	f7ff fdf1 	bl	80057f8 <LL_RCC_LSE_IsEnabled>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d114      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c1c:	f7fd fa84 	bl	8003128 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c22:	e00b      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c24:	f7fd fa80 	bl	8003128 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d902      	bls.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	77fb      	strb	r3, [r7, #31]
              break;
 8005c3a:	e004      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c3c:	f7ff fdee 	bl	800581c <LL_RCC_LSE_IsReady>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d1ee      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c46:	7ffb      	ldrb	r3, [r7, #31]
 8005c48:	77bb      	strb	r3, [r7, #30]
 8005c4a:	e001      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4c:	7ffb      	ldrb	r3, [r7, #31]
 8005c4e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff fe2b 	bl	80058bc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff fe36 	bl	80058e8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff fe5e 	bl	800594e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d004      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fe53 	bl	800594e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff fe2b 	bl	8005914 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fe20 	bl	8005914 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d022      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff fe8e 	bl	8005a06 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d02:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d0c:	d10b      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 f8dd 	bl	8005ed2 <RCCEx_PLLSAI1_ConfigNQ>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005d1c:	7ffb      	ldrb	r3, [r7, #31]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8005d22:	7ffb      	ldrb	r3, [r7, #31]
 8005d24:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d02b      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3a:	d008      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d44:	d003      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fe2b 	bl	80059ae <LL_RCC_SetRNGClockSource>
 8005d58:	e00a      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	2000      	movs	r0, #0
 8005d66:	f7ff fe22 	bl	80059ae <LL_RCC_SetRNGClockSource>
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff fe35 	bl	80059da <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d78:	d107      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d88:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d022      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fe3e 	bl	8005a1c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da8:	d107      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc2:	d10b      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 f8dd 	bl	8005f88 <RCCEx_PLLSAI1_ConfigNR>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005dd2:	7ffb      	ldrb	r3, [r7, #31]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fd27 	bl	8005840 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fd46 	bl	8005894 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fd2d 	bl	800586c <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8005e12:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3720      	adds	r7, #32
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e28:	f7ff fe62 	bl	8005af0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e2c:	f7fd f97c 	bl	8003128 <HAL_GetTick>
 8005e30:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e32:	e009      	b.n	8005e48 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e34:	f7fd f978 	bl	8003128 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d902      	bls.n	8005e48 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	73fb      	strb	r3, [r7, #15]
      break;
 8005e46:	e004      	b.n	8005e52 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e48:	f7ff fe61 	bl	8005b0e <LL_RCC_PLLSAI1_IsReady>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d137      	bne.n	8005ec8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e82:	4313      	orrs	r3, r2
 8005e84:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e86:	f7ff fe24 	bl	8005ad2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e8a:	f7fd f94d 	bl	8003128 <HAL_GetTick>
 8005e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e90:	e009      	b.n	8005ea6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e92:	f7fd f949 	bl	8003128 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d902      	bls.n	8005ea6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ea4:	e004      	b.n	8005eb0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ea6:	f7ff fe32 	bl	8005b0e <LL_RCC_PLLSAI1_IsReady>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d1f0      	bne.n	8005e92 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ede:	f7ff fe07 	bl	8005af0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ee2:	f7fd f921 	bl	8003128 <HAL_GetTick>
 8005ee6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ee8:	e009      	b.n	8005efe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eea:	f7fd f91d 	bl	8003128 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d902      	bls.n	8005efe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	73fb      	strb	r3, [r7, #15]
      break;
 8005efc:	e004      	b.n	8005f08 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005efe:	f7ff fe06 	bl	8005b0e <LL_RCC_PLLSAI1_IsReady>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f0      	bne.n	8005eea <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d137      	bne.n	8005f7e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f22:	4313      	orrs	r3, r2
 8005f24:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f3c:	f7ff fdc9 	bl	8005ad2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f40:	f7fd f8f2 	bl	8003128 <HAL_GetTick>
 8005f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f46:	e009      	b.n	8005f5c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f48:	f7fd f8ee 	bl	8003128 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d902      	bls.n	8005f5c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	73fb      	strb	r3, [r7, #15]
        break;
 8005f5a:	e004      	b.n	8005f66 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f5c:	f7ff fdd7 	bl	8005b0e <LL_RCC_PLLSAI1_IsReady>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d1f0      	bne.n	8005f48 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d108      	bne.n	8005f7e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f94:	f7ff fdac 	bl	8005af0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f98:	f7fd f8c6 	bl	8003128 <HAL_GetTick>
 8005f9c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f9e:	e009      	b.n	8005fb4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fa0:	f7fd f8c2 	bl	8003128 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d902      	bls.n	8005fb4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb2:	e004      	b.n	8005fbe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fb4:	f7ff fdab 	bl	8005b0e <LL_RCC_PLLSAI1_IsReady>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d137      	bne.n	8006034 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ff2:	f7ff fd6e 	bl	8005ad2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff6:	f7fd f897 	bl	8003128 <HAL_GetTick>
 8005ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ffc:	e009      	b.n	8006012 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ffe:	f7fd f893 	bl	8003128 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d902      	bls.n	8006012 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	73fb      	strb	r3, [r7, #15]
        break;
 8006010:	e004      	b.n	800601c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006012:	f7ff fd7c 	bl	8005b0e <LL_RCC_PLLSAI1_IsReady>
 8006016:	4603      	mov	r3, r0
 8006018:	2b01      	cmp	r3, #1
 800601a:	d1f0      	bne.n	8005ffe <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d108      	bne.n	8006034 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006030:	4313      	orrs	r3, r2
 8006032:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e090      	b.n	8006172 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fc fd89 	bl	8002b7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	22ca      	movs	r2, #202	; 0xca
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2253      	movs	r2, #83	; 0x53
 8006080:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 faba 	bl	80065fc <RTC_EnterInitMode>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	22ff      	movs	r2, #255	; 0xff
 8006094:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2204      	movs	r2, #4
 800609a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e067      	b.n	8006172 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6899      	ldr	r1, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	68d2      	ldr	r2, [r2, #12]
 80060dc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6919      	ldr	r1, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	041a      	lsls	r2, r3, #16
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006100:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0203 	bic.w	r2, r2, #3
 8006110:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d113      	bne.n	8006160 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa39 	bl	80065b0 <HAL_RTC_WaitForSynchro>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	22ff      	movs	r2, #255	; 0xff
 800614a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2204      	movs	r2, #4
 8006150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e008      	b.n	8006172 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	22ff      	movs	r2, #255	; 0xff
 8006166:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006170:	2300      	movs	r3, #0
  }
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800617a:	b590      	push	{r4, r7, lr}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_RTC_SetTime+0x1a>
 8006190:	2302      	movs	r3, #2
 8006192:	e0b2      	b.n	80062fa <HAL_RTC_SetTime+0x180>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d126      	bne.n	80061f8 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fa44 	bl	8006650 <RTC_ByteToBcd2>
 80061c8:	4603      	mov	r3, r0
 80061ca:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fa3d 	bl	8006650 <RTC_ByteToBcd2>
 80061d6:	4603      	mov	r3, r0
 80061d8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061da:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	789b      	ldrb	r3, [r3, #2]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fa35 	bl	8006650 <RTC_ByteToBcd2>
 80061e6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80061e8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	78db      	ldrb	r3, [r3, #3]
 80061f0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	e018      	b.n	800622a <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2200      	movs	r2, #0
 800620a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	785b      	ldrb	r3, [r3, #1]
 8006216:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006218:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800621e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	22ca      	movs	r2, #202	; 0xca
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2253      	movs	r2, #83	; 0x53
 8006238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f9de 	bl	80065fc <RTC_EnterInitMode>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00d      	beq.n	8006262 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	22ff      	movs	r2, #255	; 0xff
 800624c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2204      	movs	r2, #4
 8006252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e04b      	b.n	80062fa <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800626c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006270:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006280:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6899      	ldr	r1, [r3, #8]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	431a      	orrs	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d113      	bne.n	80062e0 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f979 	bl	80065b0 <HAL_RTC_WaitForSynchro>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00d      	beq.n	80062e0 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	22ff      	movs	r2, #255	; 0xff
 80062ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2204      	movs	r2, #4
 80062d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e00c      	b.n	80062fa <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	22ff      	movs	r2, #255	; 0xff
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 80062f8:	2300      	movs	r3, #0
  }
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd90      	pop	{r4, r7, pc}

08006302 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006330:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006334:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	0c1b      	lsrs	r3, r3, #16
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006340:	b2da      	uxtb	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	0a1b      	lsrs	r3, r3, #8
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	0c1b      	lsrs	r3, r3, #16
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d11a      	bne.n	80063b0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f986 	bl	8006690 <RTC_Bcd2ToByte>
 8006384:	4603      	mov	r3, r0
 8006386:	461a      	mov	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	4618      	mov	r0, r3
 8006392:	f000 f97d 	bl	8006690 <RTC_Bcd2ToByte>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	789b      	ldrb	r3, [r3, #2]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f974 	bl	8006690 <RTC_Bcd2ToByte>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063ba:	b590      	push	{r4, r7, lr}
 80063bc:	b087      	sub	sp, #28
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_RTC_SetDate+0x1a>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e09c      	b.n	800650e <HAL_RTC_SetDate+0x154>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10e      	bne.n	8006408 <HAL_RTC_SetDate+0x4e>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d008      	beq.n	8006408 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	f023 0310 	bic.w	r3, r3, #16
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	330a      	adds	r3, #10
 8006402:	b2da      	uxtb	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d11c      	bne.n	8006448 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	78db      	ldrb	r3, [r3, #3]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 f91c 	bl	8006650 <RTC_ByteToBcd2>
 8006418:	4603      	mov	r3, r0
 800641a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 f915 	bl	8006650 <RTC_ByteToBcd2>
 8006426:	4603      	mov	r3, r0
 8006428:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800642a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	789b      	ldrb	r3, [r3, #2]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f90d 	bl	8006650 <RTC_ByteToBcd2>
 8006436:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006438:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e00e      	b.n	8006466 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	78db      	ldrb	r3, [r3, #3]
 800644c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006454:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800645a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	22ca      	movs	r2, #202	; 0xca
 800646c:	625a      	str	r2, [r3, #36]	; 0x24
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2253      	movs	r2, #83	; 0x53
 8006474:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f8c0 	bl	80065fc <RTC_EnterInitMode>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2204      	movs	r2, #4
 800648e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e037      	b.n	800650e <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d113      	bne.n	80064f4 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f86f 	bl	80065b0 <HAL_RTC_WaitForSynchro>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	22ff      	movs	r2, #255	; 0xff
 80064de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2204      	movs	r2, #4
 80064e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e00c      	b.n	800650e <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	22ff      	movs	r2, #255	; 0xff
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800650c:	2300      	movs	r3, #0
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	bd90      	pop	{r4, r7, pc}

08006516 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b086      	sub	sp, #24
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800652c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006530:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	b2db      	uxtb	r3, r3
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	b2da      	uxtb	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006554:	b2da      	uxtb	r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	0b5b      	lsrs	r3, r3, #13
 800655e:	b2db      	uxtb	r3, r3
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	b2da      	uxtb	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d11a      	bne.n	80065a6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	78db      	ldrb	r3, [r3, #3]
 8006574:	4618      	mov	r0, r3
 8006576:	f000 f88b 	bl	8006690 <RTC_Bcd2ToByte>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	785b      	ldrb	r3, [r3, #1]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f882 	bl	8006690 <RTC_Bcd2ToByte>
 800658c:	4603      	mov	r3, r0
 800658e:	461a      	mov	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	789b      	ldrb	r3, [r3, #2]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 f879 	bl	8006690 <RTC_Bcd2ToByte>
 800659e:	4603      	mov	r3, r0
 80065a0:	461a      	mov	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80065c8:	f7fc fdae 	bl	8003128 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065ce:	e009      	b.n	80065e4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80065d0:	f7fc fdaa 	bl	8003128 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065de:	d901      	bls.n	80065e4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e007      	b.n	80065f4 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0ee      	beq.n	80065d0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	d119      	bne.n	8006646 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f04f 32ff 	mov.w	r2, #4294967295
 800661a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800661c:	f7fc fd84 	bl	8003128 <HAL_GetTick>
 8006620:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006622:	e009      	b.n	8006638 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006624:	f7fc fd80 	bl	8003128 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006632:	d901      	bls.n	8006638 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e007      	b.n	8006648 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0ee      	beq.n	8006624 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 8006662:	e005      	b.n	8006670 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800666a:	7afb      	ldrb	r3, [r7, #11]
 800666c:	3b0a      	subs	r3, #10
 800666e:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 8006670:	7afb      	ldrb	r3, [r7, #11]
 8006672:	2b09      	cmp	r3, #9
 8006674:	d8f6      	bhi.n	8006664 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	b2da      	uxtb	r2, r3
 800667e:	7afb      	ldrb	r3, [r7, #11]
 8006680:	4313      	orrs	r3, r2
 8006682:	b2db      	uxtb	r3, r3
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	4413      	add	r3, r2
 80066ba:	b2db      	uxtb	r3, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e095      	b.n	8006806 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ea:	d009      	beq.n	8006700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	61da      	str	r2, [r3, #28]
 80066f2:	e005      	b.n	8006700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fc fa44 	bl	8002ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006736:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006740:	d902      	bls.n	8006748 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	e002      	b.n	800674e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800674c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006756:	d007      	beq.n	8006768 <HAL_SPI_Init+0xa0>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006760:	d002      	beq.n	8006768 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067aa:	ea42 0103 	orr.w	r1, r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	0c1b      	lsrs	r3, r3, #16
 80067c4:	f003 0204 	and.w	r2, r3, #4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067e4:	ea42 0103 	orr.w	r1, r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b088      	sub	sp, #32
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	603b      	str	r3, [r7, #0]
 800681a:	4613      	mov	r3, r2
 800681c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_SPI_Transmit+0x22>
 800682c:	2302      	movs	r3, #2
 800682e:	e158      	b.n	8006ae2 <HAL_SPI_Transmit+0x2d4>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006838:	f7fc fc76 	bl	8003128 <HAL_GetTick>
 800683c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b01      	cmp	r3, #1
 800684c:	d002      	beq.n	8006854 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800684e:	2302      	movs	r3, #2
 8006850:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006852:	e13d      	b.n	8006ad0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_SPI_Transmit+0x52>
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d102      	bne.n	8006866 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006864:	e134      	b.n	8006ad0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2203      	movs	r2, #3
 800686a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	88fa      	ldrh	r2, [r7, #6]
 800687e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b0:	d10f      	bne.n	80068d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	d007      	beq.n	80068f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068f8:	d94b      	bls.n	8006992 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <HAL_SPI_Transmit+0xfa>
 8006902:	8afb      	ldrh	r3, [r7, #22]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d13e      	bne.n	8006986 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	881a      	ldrh	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	1c9a      	adds	r2, r3, #2
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800692c:	e02b      	b.n	8006986 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b02      	cmp	r3, #2
 800693a:	d112      	bne.n	8006962 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	881a      	ldrh	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	1c9a      	adds	r2, r3, #2
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006960:	e011      	b.n	8006986 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006962:	f7fc fbe1 	bl	8003128 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d803      	bhi.n	800697a <HAL_SPI_Transmit+0x16c>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d102      	bne.n	8006980 <HAL_SPI_Transmit+0x172>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006984:	e0a4      	b.n	8006ad0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1ce      	bne.n	800692e <HAL_SPI_Transmit+0x120>
 8006990:	e07c      	b.n	8006a8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_SPI_Transmit+0x192>
 800699a:	8afb      	ldrh	r3, [r7, #22]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d170      	bne.n	8006a82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d912      	bls.n	80069d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	881a      	ldrh	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	1c9a      	adds	r2, r3, #2
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b02      	subs	r3, #2
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069ce:	e058      	b.n	8006a82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	330c      	adds	r3, #12
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	1c5a      	adds	r2, r3, #1
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80069f6:	e044      	b.n	8006a82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d12b      	bne.n	8006a5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d912      	bls.n	8006a36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	1c9a      	adds	r2, r3, #2
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b02      	subs	r3, #2
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a34:	e025      	b.n	8006a82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	7812      	ldrb	r2, [r2, #0]
 8006a42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a5c:	e011      	b.n	8006a82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a5e:	f7fc fb63 	bl	8003128 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d803      	bhi.n	8006a76 <HAL_SPI_Transmit+0x268>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a74:	d102      	bne.n	8006a7c <HAL_SPI_Transmit+0x26e>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a80:	e026      	b.n	8006ad0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1b5      	bne.n	80069f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f941 	bl	8006d18 <SPI_EndRxTxTransaction>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aaa:	2300      	movs	r3, #0
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e000      	b.n	8006ad0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006ace:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ae0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4613      	mov	r3, r2
 8006afa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006afc:	f7fc fb14 	bl	8003128 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	1a9b      	subs	r3, r3, r2
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	4413      	add	r3, r2
 8006b0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b0c:	f7fc fb0c 	bl	8003128 <HAL_GetTick>
 8006b10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b12:	4b39      	ldr	r3, [pc, #228]	; (8006bf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	015b      	lsls	r3, r3, #5
 8006b18:	0d1b      	lsrs	r3, r3, #20
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	fb02 f303 	mul.w	r3, r2, r3
 8006b20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b22:	e054      	b.n	8006bce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d050      	beq.n	8006bce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b2c:	f7fc fafc 	bl	8003128 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d902      	bls.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d13d      	bne.n	8006bbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b5a:	d111      	bne.n	8006b80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b64:	d004      	beq.n	8006b70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b6e:	d107      	bne.n	8006b80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b88:	d10f      	bne.n	8006baa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ba8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e017      	b.n	8006bee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	bf0c      	ite	eq
 8006bde:	2301      	moveq	r3, #1
 8006be0:	2300      	movne	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d19b      	bne.n	8006b24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3720      	adds	r7, #32
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000004 	.word	0x20000004

08006bfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c0a:	f7fc fa8d 	bl	8003128 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	4413      	add	r3, r2
 8006c18:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c1a:	f7fc fa85 	bl	8003128 <HAL_GetTick>
 8006c1e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c20:	4b3c      	ldr	r3, [pc, #240]	; (8006d14 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	00da      	lsls	r2, r3, #3
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	0d1b      	lsrs	r3, r3, #20
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c38:	e05f      	b.n	8006cfa <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c40:	d106      	bne.n	8006c50 <SPI_WaitFifoStateUntilTimeout+0x54>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d103      	bne.n	8006c50 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	330c      	adds	r3, #12
 8006c4e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d050      	beq.n	8006cfa <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c58:	f7fc fa66 	bl	8003128 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d902      	bls.n	8006c6e <SPI_WaitFifoStateUntilTimeout+0x72>
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d13d      	bne.n	8006cea <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c86:	d111      	bne.n	8006cac <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c90:	d004      	beq.n	8006c9c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9a:	d107      	bne.n	8006cac <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb4:	d10f      	bne.n	8006cd6 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e010      	b.n	8006d0c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d197      	bne.n	8006c3a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000004 	.word	0x20000004

08006d18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff ff63 	bl	8006bfc <SPI_WaitFifoStateUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d40:	f043 0220 	orr.w	r2, r3, #32
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e027      	b.n	8006d9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2200      	movs	r2, #0
 8006d54:	2180      	movs	r1, #128	; 0x80
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff fec8 	bl	8006aec <SPI_WaitFlagStateUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d007      	beq.n	8006d72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e014      	b.n	8006d9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff ff3c 	bl	8006bfc <SPI_WaitFifoStateUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8e:	f043 0220 	orr.w	r2, r3, #32
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e000      	b.n	8006d9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e049      	b.n	8006e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fb ff1c 	bl	8002c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f000 fd5a 	bl	800789c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e036      	b.n	8006eda <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a17      	ldr	r2, [pc, #92]	; (8006ee8 <HAL_TIM_Base_Start_IT+0x94>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x44>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d115      	bne.n	8006ec4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	4b13      	ldr	r3, [pc, #76]	; (8006eec <HAL_TIM_Base_Start_IT+0x98>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b06      	cmp	r3, #6
 8006ea8:	d015      	beq.n	8006ed6 <HAL_TIM_Base_Start_IT+0x82>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb0:	d011      	beq.n	8006ed6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0201 	orr.w	r2, r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec2:	e008      	b.n	8006ed6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e000      	b.n	8006ed8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	00010007 	.word	0x00010007

08006ef0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e049      	b.n	8006f96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d106      	bne.n	8006f1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f841 	bl	8006f9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4610      	mov	r0, r2
 8006f30:	f000 fcb4 	bl	800789c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d109      	bne.n	8006fd8 <HAL_TIM_PWM_Start+0x24>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	bf14      	ite	ne
 8006fd0:	2301      	movne	r3, #1
 8006fd2:	2300      	moveq	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e03c      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d109      	bne.n	8006ff2 <HAL_TIM_PWM_Start+0x3e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	bf14      	ite	ne
 8006fea:	2301      	movne	r3, #1
 8006fec:	2300      	moveq	r3, #0
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	e02f      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d109      	bne.n	800700c <HAL_TIM_PWM_Start+0x58>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	bf14      	ite	ne
 8007004:	2301      	movne	r3, #1
 8007006:	2300      	moveq	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	e022      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b0c      	cmp	r3, #12
 8007010:	d109      	bne.n	8007026 <HAL_TIM_PWM_Start+0x72>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b01      	cmp	r3, #1
 800701c:	bf14      	ite	ne
 800701e:	2301      	movne	r3, #1
 8007020:	2300      	moveq	r3, #0
 8007022:	b2db      	uxtb	r3, r3
 8007024:	e015      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b10      	cmp	r3, #16
 800702a:	d109      	bne.n	8007040 <HAL_TIM_PWM_Start+0x8c>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	bf14      	ite	ne
 8007038:	2301      	movne	r3, #1
 800703a:	2300      	moveq	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	e008      	b.n	8007052 <HAL_TIM_PWM_Start+0x9e>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b01      	cmp	r3, #1
 800704a:	bf14      	ite	ne
 800704c:	2301      	movne	r3, #1
 800704e:	2300      	moveq	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e079      	b.n	800714e <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d104      	bne.n	800706a <HAL_TIM_PWM_Start+0xb6>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007068:	e023      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b04      	cmp	r3, #4
 800706e:	d104      	bne.n	800707a <HAL_TIM_PWM_Start+0xc6>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007078:	e01b      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b08      	cmp	r3, #8
 800707e:	d104      	bne.n	800708a <HAL_TIM_PWM_Start+0xd6>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007088:	e013      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b0c      	cmp	r3, #12
 800708e:	d104      	bne.n	800709a <HAL_TIM_PWM_Start+0xe6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007098:	e00b      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b10      	cmp	r3, #16
 800709e:	d104      	bne.n	80070aa <HAL_TIM_PWM_Start+0xf6>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070a8:	e003      	b.n	80070b2 <HAL_TIM_PWM_Start+0xfe>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2201      	movs	r2, #1
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 ff6c 	bl	8007f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a24      	ldr	r2, [pc, #144]	; (8007158 <HAL_TIM_PWM_Start+0x1a4>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d009      	beq.n	80070de <HAL_TIM_PWM_Start+0x12a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a23      	ldr	r2, [pc, #140]	; (800715c <HAL_TIM_PWM_Start+0x1a8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d004      	beq.n	80070de <HAL_TIM_PWM_Start+0x12a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a21      	ldr	r2, [pc, #132]	; (8007160 <HAL_TIM_PWM_Start+0x1ac>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d101      	bne.n	80070e2 <HAL_TIM_PWM_Start+0x12e>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <HAL_TIM_PWM_Start+0x130>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a16      	ldr	r2, [pc, #88]	; (8007158 <HAL_TIM_PWM_Start+0x1a4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d004      	beq.n	800710c <HAL_TIM_PWM_Start+0x158>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710a:	d115      	bne.n	8007138 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <HAL_TIM_PWM_Start+0x1b0>)
 8007114:	4013      	ands	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b06      	cmp	r3, #6
 800711c:	d015      	beq.n	800714a <HAL_TIM_PWM_Start+0x196>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007124:	d011      	beq.n	800714a <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0201 	orr.w	r2, r2, #1
 8007134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007136:	e008      	b.n	800714a <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	e000      	b.n	800714c <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40012c00 	.word	0x40012c00
 800715c:	40014400 	.word	0x40014400
 8007160:	40014800 	.word	0x40014800
 8007164:	00010007 	.word	0x00010007

08007168 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 ff0c 	bl	8007f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a39      	ldr	r2, [pc, #228]	; (800726c <HAL_TIM_PWM_Stop+0x104>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d009      	beq.n	800719e <HAL_TIM_PWM_Stop+0x36>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a38      	ldr	r2, [pc, #224]	; (8007270 <HAL_TIM_PWM_Stop+0x108>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d004      	beq.n	800719e <HAL_TIM_PWM_Stop+0x36>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a36      	ldr	r2, [pc, #216]	; (8007274 <HAL_TIM_PWM_Stop+0x10c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d101      	bne.n	80071a2 <HAL_TIM_PWM_Stop+0x3a>
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <HAL_TIM_PWM_Stop+0x3c>
 80071a2:	2300      	movs	r3, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d017      	beq.n	80071d8 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6a1a      	ldr	r2, [r3, #32]
 80071ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80071b2:	4013      	ands	r3, r2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10f      	bne.n	80071d8 <HAL_TIM_PWM_Stop+0x70>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6a1a      	ldr	r2, [r3, #32]
 80071be:	f240 4344 	movw	r3, #1092	; 0x444
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d107      	bne.n	80071d8 <HAL_TIM_PWM_Stop+0x70>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6a1a      	ldr	r2, [r3, #32]
 80071de:	f241 1311 	movw	r3, #4369	; 0x1111
 80071e2:	4013      	ands	r3, r2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10f      	bne.n	8007208 <HAL_TIM_PWM_Stop+0xa0>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a1a      	ldr	r2, [r3, #32]
 80071ee:	f240 4344 	movw	r3, #1092	; 0x444
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d107      	bne.n	8007208 <HAL_TIM_PWM_Stop+0xa0>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0201 	bic.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d104      	bne.n	8007218 <HAL_TIM_PWM_Stop+0xb0>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007216:	e023      	b.n	8007260 <HAL_TIM_PWM_Stop+0xf8>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b04      	cmp	r3, #4
 800721c:	d104      	bne.n	8007228 <HAL_TIM_PWM_Stop+0xc0>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007226:	e01b      	b.n	8007260 <HAL_TIM_PWM_Stop+0xf8>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b08      	cmp	r3, #8
 800722c:	d104      	bne.n	8007238 <HAL_TIM_PWM_Stop+0xd0>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007236:	e013      	b.n	8007260 <HAL_TIM_PWM_Stop+0xf8>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b0c      	cmp	r3, #12
 800723c:	d104      	bne.n	8007248 <HAL_TIM_PWM_Stop+0xe0>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007246:	e00b      	b.n	8007260 <HAL_TIM_PWM_Stop+0xf8>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b10      	cmp	r3, #16
 800724c:	d104      	bne.n	8007258 <HAL_TIM_PWM_Stop+0xf0>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007256:	e003      	b.n	8007260 <HAL_TIM_PWM_Stop+0xf8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40012c00 	.word	0x40012c00
 8007270:	40014400 	.word	0x40014400
 8007274:	40014800 	.word	0x40014800

08007278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b02      	cmp	r3, #2
 800728c:	d122      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b02      	cmp	r3, #2
 800729a:	d11b      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0202 	mvn.w	r2, #2
 80072a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 facf 	bl	800785e <HAL_TIM_IC_CaptureCallback>
 80072c0:	e005      	b.n	80072ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fac1 	bl	800784a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fad2 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d122      	bne.n	8007328 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d11b      	bne.n	8007328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0204 	mvn.w	r2, #4
 80072f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 faa5 	bl	800785e <HAL_TIM_IC_CaptureCallback>
 8007314:	e005      	b.n	8007322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa97 	bl	800784a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 faa8 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b08      	cmp	r3, #8
 8007334:	d122      	bne.n	800737c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	2b08      	cmp	r3, #8
 8007342:	d11b      	bne.n	800737c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0208 	mvn.w	r2, #8
 800734c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2204      	movs	r2, #4
 8007352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa7b 	bl	800785e <HAL_TIM_IC_CaptureCallback>
 8007368:	e005      	b.n	8007376 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa6d 	bl	800784a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa7e 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	2b10      	cmp	r3, #16
 8007388:	d122      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b10      	cmp	r3, #16
 8007396:	d11b      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0210 	mvn.w	r2, #16
 80073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2208      	movs	r2, #8
 80073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa51 	bl	800785e <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa43 	bl	800784a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa54 	bl	8007872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d10e      	bne.n	80073fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d107      	bne.n	80073fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0201 	mvn.w	r2, #1
 80073f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fb faf2 	bl	80029e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007406:	2b80      	cmp	r3, #128	; 0x80
 8007408:	d10e      	bne.n	8007428 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007414:	2b80      	cmp	r3, #128	; 0x80
 8007416:	d107      	bne.n	8007428 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fed8 	bl	80081d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007436:	d10e      	bne.n	8007456 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d107      	bne.n	8007456 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800744e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fecb 	bl	80081ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	d10e      	bne.n	8007482 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746e:	2b40      	cmp	r3, #64	; 0x40
 8007470:	d107      	bne.n	8007482 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800747a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa02 	bl	8007886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b20      	cmp	r3, #32
 800748e:	d10e      	bne.n	80074ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b20      	cmp	r3, #32
 800749c:	d107      	bne.n	80074ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f06f 0220 	mvn.w	r2, #32
 80074a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fe8b 	bl	80081c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e0fd      	b.n	80076ce <HAL_TIM_PWM_ConfigChannel+0x216>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b14      	cmp	r3, #20
 80074de:	f200 80f0 	bhi.w	80076c2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80074e2:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	0800753d 	.word	0x0800753d
 80074ec:	080076c3 	.word	0x080076c3
 80074f0:	080076c3 	.word	0x080076c3
 80074f4:	080076c3 	.word	0x080076c3
 80074f8:	0800757d 	.word	0x0800757d
 80074fc:	080076c3 	.word	0x080076c3
 8007500:	080076c3 	.word	0x080076c3
 8007504:	080076c3 	.word	0x080076c3
 8007508:	080075bf 	.word	0x080075bf
 800750c:	080076c3 	.word	0x080076c3
 8007510:	080076c3 	.word	0x080076c3
 8007514:	080076c3 	.word	0x080076c3
 8007518:	080075ff 	.word	0x080075ff
 800751c:	080076c3 	.word	0x080076c3
 8007520:	080076c3 	.word	0x080076c3
 8007524:	080076c3 	.word	0x080076c3
 8007528:	08007641 	.word	0x08007641
 800752c:	080076c3 	.word	0x080076c3
 8007530:	080076c3 	.word	0x080076c3
 8007534:	080076c3 	.word	0x080076c3
 8007538:	08007681 	.word	0x08007681
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fa0e 	bl	8007964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0208 	orr.w	r2, r2, #8
 8007556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0204 	bic.w	r2, r2, #4
 8007566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6999      	ldr	r1, [r3, #24]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	691a      	ldr	r2, [r3, #16]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	619a      	str	r2, [r3, #24]
      break;
 800757a:	e0a3      	b.n	80076c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fa6a 	bl	8007a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6999      	ldr	r1, [r3, #24]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	021a      	lsls	r2, r3, #8
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	619a      	str	r2, [r3, #24]
      break;
 80075bc:	e082      	b.n	80076c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68b9      	ldr	r1, [r7, #8]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fac3 	bl	8007b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69da      	ldr	r2, [r3, #28]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f042 0208 	orr.w	r2, r2, #8
 80075d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69da      	ldr	r2, [r3, #28]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0204 	bic.w	r2, r2, #4
 80075e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69d9      	ldr	r1, [r3, #28]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	61da      	str	r2, [r3, #28]
      break;
 80075fc:	e062      	b.n	80076c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fb1b 	bl	8007c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69da      	ldr	r2, [r3, #28]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69d9      	ldr	r1, [r3, #28]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	021a      	lsls	r2, r3, #8
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	61da      	str	r2, [r3, #28]
      break;
 800763e:	e041      	b.n	80076c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fb58 	bl	8007cfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0208 	orr.w	r2, r2, #8
 800765a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0204 	bic.w	r2, r2, #4
 800766a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800767e:	e021      	b.n	80076c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fb90 	bl	8007dac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800769a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	021a      	lsls	r2, r3, #8
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076c0:	e000      	b.n	80076c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80076c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop

080076d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_TIM_ConfigClockSource+0x18>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e0a8      	b.n	8007842 <HAL_TIM_ConfigClockSource+0x16a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800770e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007712:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800771a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b40      	cmp	r3, #64	; 0x40
 800772a:	d067      	beq.n	80077fc <HAL_TIM_ConfigClockSource+0x124>
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d80b      	bhi.n	8007748 <HAL_TIM_ConfigClockSource+0x70>
 8007730:	2b10      	cmp	r3, #16
 8007732:	d073      	beq.n	800781c <HAL_TIM_ConfigClockSource+0x144>
 8007734:	2b10      	cmp	r3, #16
 8007736:	d802      	bhi.n	800773e <HAL_TIM_ConfigClockSource+0x66>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d06f      	beq.n	800781c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800773c:	e078      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800773e:	2b20      	cmp	r3, #32
 8007740:	d06c      	beq.n	800781c <HAL_TIM_ConfigClockSource+0x144>
 8007742:	2b30      	cmp	r3, #48	; 0x30
 8007744:	d06a      	beq.n	800781c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007746:	e073      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007748:	2b70      	cmp	r3, #112	; 0x70
 800774a:	d00d      	beq.n	8007768 <HAL_TIM_ConfigClockSource+0x90>
 800774c:	2b70      	cmp	r3, #112	; 0x70
 800774e:	d804      	bhi.n	800775a <HAL_TIM_ConfigClockSource+0x82>
 8007750:	2b50      	cmp	r3, #80	; 0x50
 8007752:	d033      	beq.n	80077bc <HAL_TIM_ConfigClockSource+0xe4>
 8007754:	2b60      	cmp	r3, #96	; 0x60
 8007756:	d041      	beq.n	80077dc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007758:	e06a      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800775a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775e:	d066      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x156>
 8007760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007764:	d017      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007766:	e063      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	6899      	ldr	r1, [r3, #8]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f000 fbee 	bl	8007f58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800778a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	609a      	str	r2, [r3, #8]
      break;
 8007794:	e04c      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6899      	ldr	r1, [r3, #8]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f000 fbd7 	bl	8007f58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077b8:	609a      	str	r2, [r3, #8]
      break;
 80077ba:	e039      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	6859      	ldr	r1, [r3, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	461a      	mov	r2, r3
 80077ca:	f000 fb49 	bl	8007e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2150      	movs	r1, #80	; 0x50
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fba2 	bl	8007f1e <TIM_ITRx_SetConfig>
      break;
 80077da:	e029      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	6859      	ldr	r1, [r3, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	461a      	mov	r2, r3
 80077ea:	f000 fb68 	bl	8007ebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2160      	movs	r1, #96	; 0x60
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fb92 	bl	8007f1e <TIM_ITRx_SetConfig>
      break;
 80077fa:	e019      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	6859      	ldr	r1, [r3, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	461a      	mov	r2, r3
 800780a:	f000 fb29 	bl	8007e60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2140      	movs	r1, #64	; 0x40
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fb82 	bl	8007f1e <TIM_ITRx_SetConfig>
      break;
 800781a:	e009      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f000 fb79 	bl	8007f1e <TIM_ITRx_SetConfig>
      break;
 800782c:	e000      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800782e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a2a      	ldr	r2, [pc, #168]	; (8007958 <TIM_Base_SetConfig+0xbc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_Base_SetConfig+0x20>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ba:	d108      	bne.n	80078ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a21      	ldr	r2, [pc, #132]	; (8007958 <TIM_Base_SetConfig+0xbc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00b      	beq.n	80078ee <TIM_Base_SetConfig+0x52>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078dc:	d007      	beq.n	80078ee <TIM_Base_SetConfig+0x52>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a1e      	ldr	r2, [pc, #120]	; (800795c <TIM_Base_SetConfig+0xc0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <TIM_Base_SetConfig+0x52>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <TIM_Base_SetConfig+0xc4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d108      	bne.n	8007900 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a0c      	ldr	r2, [pc, #48]	; (8007958 <TIM_Base_SetConfig+0xbc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d007      	beq.n	800793c <TIM_Base_SetConfig+0xa0>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a0b      	ldr	r2, [pc, #44]	; (800795c <TIM_Base_SetConfig+0xc0>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_Base_SetConfig+0xa0>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <TIM_Base_SetConfig+0xc4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d103      	bne.n	8007944 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	691a      	ldr	r2, [r3, #16]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	615a      	str	r2, [r3, #20]
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	40012c00 	.word	0x40012c00
 800795c:	40014400 	.word	0x40014400
 8007960:	40014800 	.word	0x40014800

08007964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f023 0201 	bic.w	r2, r3, #1
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0303 	bic.w	r3, r3, #3
 800799e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f023 0302 	bic.w	r3, r3, #2
 80079b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a24      	ldr	r2, [pc, #144]	; (8007a50 <TIM_OC1_SetConfig+0xec>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_OC1_SetConfig+0x70>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <TIM_OC1_SetConfig+0xf0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_OC1_SetConfig+0x70>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <TIM_OC1_SetConfig+0xf4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d10c      	bne.n	80079ee <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f023 0308 	bic.w	r3, r3, #8
 80079da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0304 	bic.w	r3, r3, #4
 80079ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <TIM_OC1_SetConfig+0xec>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d007      	beq.n	8007a06 <TIM_OC1_SetConfig+0xa2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <TIM_OC1_SetConfig+0xf4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d003      	beq.n	8007a06 <TIM_OC1_SetConfig+0xa2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <TIM_OC1_SetConfig+0xf0>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d111      	bne.n	8007a2a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	621a      	str	r2, [r3, #32]
}
 8007a44:	bf00      	nop
 8007a46:	371c      	adds	r7, #28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	40012c00 	.word	0x40012c00
 8007a54:	40014800 	.word	0x40014800
 8007a58:	40014400 	.word	0x40014400

08007a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	f023 0210 	bic.w	r2, r3, #16
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f023 0320 	bic.w	r3, r3, #32
 8007aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a22      	ldr	r2, [pc, #136]	; (8007b44 <TIM_OC2_SetConfig+0xe8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10d      	bne.n	8007adc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a19      	ldr	r2, [pc, #100]	; (8007b44 <TIM_OC2_SetConfig+0xe8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d007      	beq.n	8007af4 <TIM_OC2_SetConfig+0x98>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <TIM_OC2_SetConfig+0xec>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_OC2_SetConfig+0x98>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a17      	ldr	r2, [pc, #92]	; (8007b4c <TIM_OC2_SetConfig+0xf0>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d113      	bne.n	8007b1c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	621a      	str	r2, [r3, #32]
}
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40012c00 	.word	0x40012c00
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800

08007b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0303 	bic.w	r3, r3, #3
 8007b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a21      	ldr	r2, [pc, #132]	; (8007c34 <TIM_OC3_SetConfig+0xe4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d10d      	bne.n	8007bce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a18      	ldr	r2, [pc, #96]	; (8007c34 <TIM_OC3_SetConfig+0xe4>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d007      	beq.n	8007be6 <TIM_OC3_SetConfig+0x96>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <TIM_OC3_SetConfig+0xe8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d003      	beq.n	8007be6 <TIM_OC3_SetConfig+0x96>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a16      	ldr	r2, [pc, #88]	; (8007c3c <TIM_OC3_SetConfig+0xec>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d113      	bne.n	8007c0e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	621a      	str	r2, [r3, #32]
}
 8007c28:	bf00      	nop
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	40012c00 	.word	0x40012c00
 8007c38:	40014400 	.word	0x40014400
 8007c3c:	40014800 	.word	0x40014800

08007c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	031b      	lsls	r3, r3, #12
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a14      	ldr	r2, [pc, #80]	; (8007cf0 <TIM_OC4_SetConfig+0xb0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d007      	beq.n	8007cb4 <TIM_OC4_SetConfig+0x74>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a13      	ldr	r2, [pc, #76]	; (8007cf4 <TIM_OC4_SetConfig+0xb4>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_OC4_SetConfig+0x74>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a12      	ldr	r2, [pc, #72]	; (8007cf8 <TIM_OC4_SetConfig+0xb8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d109      	bne.n	8007cc8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	019b      	lsls	r3, r3, #6
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	621a      	str	r2, [r3, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40012c00 	.word	0x40012c00
 8007cf4:	40014400 	.word	0x40014400
 8007cf8:	40014800 	.word	0x40014800

08007cfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	041b      	lsls	r3, r3, #16
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a13      	ldr	r2, [pc, #76]	; (8007da0 <TIM_OC5_SetConfig+0xa4>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d007      	beq.n	8007d66 <TIM_OC5_SetConfig+0x6a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a12      	ldr	r2, [pc, #72]	; (8007da4 <TIM_OC5_SetConfig+0xa8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d003      	beq.n	8007d66 <TIM_OC5_SetConfig+0x6a>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a11      	ldr	r2, [pc, #68]	; (8007da8 <TIM_OC5_SetConfig+0xac>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d109      	bne.n	8007d7a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	021b      	lsls	r3, r3, #8
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	621a      	str	r2, [r3, #32]
}
 8007d94:	bf00      	nop
 8007d96:	371c      	adds	r7, #28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	40012c00 	.word	0x40012c00
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800

08007dac <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	051b      	lsls	r3, r3, #20
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a14      	ldr	r2, [pc, #80]	; (8007e54 <TIM_OC6_SetConfig+0xa8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d007      	beq.n	8007e18 <TIM_OC6_SetConfig+0x6c>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a13      	ldr	r2, [pc, #76]	; (8007e58 <TIM_OC6_SetConfig+0xac>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_OC6_SetConfig+0x6c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a12      	ldr	r2, [pc, #72]	; (8007e5c <TIM_OC6_SetConfig+0xb0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d109      	bne.n	8007e2c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	029b      	lsls	r3, r3, #10
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	621a      	str	r2, [r3, #32]
}
 8007e46:	bf00      	nop
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	40014400 	.word	0x40014400
 8007e5c:	40014800 	.word	0x40014800

08007e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	f023 0201 	bic.w	r2, r3, #1
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f023 030a 	bic.w	r3, r3, #10
 8007e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b087      	sub	sp, #28
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	60f8      	str	r0, [r7, #12]
 8007ec6:	60b9      	str	r1, [r7, #8]
 8007ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f023 0210 	bic.w	r2, r3, #16
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	031b      	lsls	r3, r3, #12
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007efa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b085      	sub	sp, #20
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	f043 0307 	orr.w	r3, r3, #7
 8007f44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	609a      	str	r2, [r3, #8]
}
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	021a      	lsls	r2, r3, #8
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	609a      	str	r2, [r3, #8]
}
 8007f8c:	bf00      	nop
 8007f8e:	371c      	adds	r7, #28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f003 031f 	and.w	r3, r3, #31
 8007faa:	2201      	movs	r2, #1
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a1a      	ldr	r2, [r3, #32]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	401a      	ands	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6a1a      	ldr	r2, [r3, #32]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	621a      	str	r2, [r3, #32]
}
 8007fd6:	bf00      	nop
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
	...

08007fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d101      	bne.n	8007ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e04a      	b.n	8008092 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d108      	bne.n	8008038 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800802c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a12      	ldr	r2, [pc, #72]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d004      	beq.n	8008066 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008064:	d10c      	bne.n	8008080 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	4313      	orrs	r3, r2
 8008076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	40012c00 	.word	0x40012c00

080080a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080bc:	2302      	movs	r3, #2
 80080be:	e078      	b.n	80081b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	041b      	lsls	r3, r3, #16
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a20      	ldr	r2, [pc, #128]	; (80081c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d106      	bne.n	8008152 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1a      	ldr	r2, [pc, #104]	; (80081c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d121      	bne.n	80081a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	051b      	lsls	r3, r3, #20
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	4313      	orrs	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a0c      	ldr	r2, [pc, #48]	; (80081c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d106      	bne.n	80081a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	4313      	orrs	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	40012c00 	.word	0x40012c00

080081c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008204:	bf00      	nop
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
	...

08008210 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008216:	f3ef 8305 	mrs	r3, IPSR
 800821a:	60bb      	str	r3, [r7, #8]
  return(result);
 800821c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10f      	bne.n	8008242 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008222:	f3ef 8310 	mrs	r3, PRIMASK
 8008226:	607b      	str	r3, [r7, #4]
  return(result);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d105      	bne.n	800823a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800822e:	f3ef 8311 	mrs	r3, BASEPRI
 8008232:	603b      	str	r3, [r7, #0]
  return(result);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <osKernelInitialize+0x3a>
 800823a:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <osKernelInitialize+0x64>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d103      	bne.n	800824a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008242:	f06f 0305 	mvn.w	r3, #5
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	e00c      	b.n	8008264 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800824a:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <osKernelInitialize+0x64>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d105      	bne.n	800825e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008252:	4b08      	ldr	r3, [pc, #32]	; (8008274 <osKernelInitialize+0x64>)
 8008254:	2201      	movs	r2, #1
 8008256:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008258:	2300      	movs	r3, #0
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	e002      	b.n	8008264 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008264:	68fb      	ldr	r3, [r7, #12]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	20000098 	.word	0x20000098

08008278 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800827e:	f3ef 8305 	mrs	r3, IPSR
 8008282:	60bb      	str	r3, [r7, #8]
  return(result);
 8008284:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10f      	bne.n	80082aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800828a:	f3ef 8310 	mrs	r3, PRIMASK
 800828e:	607b      	str	r3, [r7, #4]
  return(result);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008296:	f3ef 8311 	mrs	r3, BASEPRI
 800829a:	603b      	str	r3, [r7, #0]
  return(result);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d007      	beq.n	80082b2 <osKernelStart+0x3a>
 80082a2:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <osKernelStart+0x68>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d103      	bne.n	80082b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80082aa:	f06f 0305 	mvn.w	r3, #5
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	e010      	b.n	80082d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <osKernelStart+0x68>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d109      	bne.n	80082ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082ba:	f7ff ffa1 	bl	8008200 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082be:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <osKernelStart+0x68>)
 80082c0:	2202      	movs	r2, #2
 80082c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082c4:	f001 fccc 	bl	8009c60 <vTaskStartScheduler>
      stat = osOK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	e002      	b.n	80082d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80082ce:	f04f 33ff 	mov.w	r3, #4294967295
 80082d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80082d4:	68fb      	ldr	r3, [r7, #12]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000098 	.word	0x20000098

080082e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b090      	sub	sp, #64	; 0x40
 80082e8:	af04      	add	r7, sp, #16
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082f4:	f3ef 8305 	mrs	r3, IPSR
 80082f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80082fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 808f 	bne.w	8008420 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008302:	f3ef 8310 	mrs	r3, PRIMASK
 8008306:	61bb      	str	r3, [r7, #24]
  return(result);
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d105      	bne.n	800831a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800830e:	f3ef 8311 	mrs	r3, BASEPRI
 8008312:	617b      	str	r3, [r7, #20]
  return(result);
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <osThreadNew+0x3e>
 800831a:	4b44      	ldr	r3, [pc, #272]	; (800842c <osThreadNew+0x148>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b02      	cmp	r3, #2
 8008320:	d07e      	beq.n	8008420 <osThreadNew+0x13c>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d07b      	beq.n	8008420 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008328:	2380      	movs	r3, #128	; 0x80
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800832c:	2318      	movs	r3, #24
 800832e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008330:	2300      	movs	r3, #0
 8008332:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008334:	f04f 33ff 	mov.w	r3, #4294967295
 8008338:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d045      	beq.n	80083cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <osThreadNew+0x6a>
        name = attr->name;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d002      	beq.n	800835c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	2b00      	cmp	r3, #0
 8008360:	d008      	beq.n	8008374 <osThreadNew+0x90>
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	2b38      	cmp	r3, #56	; 0x38
 8008366:	d805      	bhi.n	8008374 <osThreadNew+0x90>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <osThreadNew+0x94>
        return (NULL);
 8008374:	2300      	movs	r3, #0
 8008376:	e054      	b.n	8008422 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d003      	beq.n	8008388 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	089b      	lsrs	r3, r3, #2
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00e      	beq.n	80083ae <osThreadNew+0xca>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	2b63      	cmp	r3, #99	; 0x63
 8008396:	d90a      	bls.n	80083ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800839c:	2b00      	cmp	r3, #0
 800839e:	d006      	beq.n	80083ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <osThreadNew+0xca>
        mem = 1;
 80083a8:	2301      	movs	r3, #1
 80083aa:	623b      	str	r3, [r7, #32]
 80083ac:	e010      	b.n	80083d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10c      	bne.n	80083d0 <osThreadNew+0xec>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d108      	bne.n	80083d0 <osThreadNew+0xec>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d104      	bne.n	80083d0 <osThreadNew+0xec>
          mem = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	623b      	str	r3, [r7, #32]
 80083ca:	e001      	b.n	80083d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d110      	bne.n	80083f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083de:	9202      	str	r2, [sp, #8]
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f001 fa5f 	bl	80098b0 <xTaskCreateStatic>
 80083f2:	4603      	mov	r3, r0
 80083f4:	613b      	str	r3, [r7, #16]
 80083f6:	e013      	b.n	8008420 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d110      	bne.n	8008420 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	b29a      	uxth	r2, r3
 8008402:	f107 0310 	add.w	r3, r7, #16
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f001 faa7 	bl	8009964 <xTaskCreate>
 8008416:	4603      	mov	r3, r0
 8008418:	2b01      	cmp	r3, #1
 800841a:	d001      	beq.n	8008420 <osThreadNew+0x13c>
          hTask = NULL;
 800841c:	2300      	movs	r3, #0
 800841e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008420:	693b      	ldr	r3, [r7, #16]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3730      	adds	r7, #48	; 0x30
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000098 	.word	0x20000098

08008430 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008438:	f3ef 8305 	mrs	r3, IPSR
 800843c:	613b      	str	r3, [r7, #16]
  return(result);
 800843e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10f      	bne.n	8008464 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008444:	f3ef 8310 	mrs	r3, PRIMASK
 8008448:	60fb      	str	r3, [r7, #12]
  return(result);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d105      	bne.n	800845c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008450:	f3ef 8311 	mrs	r3, BASEPRI
 8008454:	60bb      	str	r3, [r7, #8]
  return(result);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d007      	beq.n	800846c <osDelay+0x3c>
 800845c:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <osDelay+0x58>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d103      	bne.n	800846c <osDelay+0x3c>
    stat = osErrorISR;
 8008464:	f06f 0305 	mvn.w	r3, #5
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	e007      	b.n	800847c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800846c:	2300      	movs	r3, #0
 800846e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 fbbe 	bl	8009bf8 <vTaskDelay>
    }
  }

  return (stat);
 800847c:	697b      	ldr	r3, [r7, #20]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000098 	.word	0x20000098

0800848c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	; 0x28
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008498:	f3ef 8305 	mrs	r3, IPSR
 800849c:	613b      	str	r3, [r7, #16]
  return(result);
 800849e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f040 8085 	bne.w	80085b0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a6:	f3ef 8310 	mrs	r3, PRIMASK
 80084aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d105      	bne.n	80084be <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084b2:	f3ef 8311 	mrs	r3, BASEPRI
 80084b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <osMutexNew+0x3a>
 80084be:	4b3f      	ldr	r3, [pc, #252]	; (80085bc <osMutexNew+0x130>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d074      	beq.n	80085b0 <osMutexNew+0x124>
    if (attr != NULL) {
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <osMutexNew+0x48>
      type = attr->attr_bits;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	623b      	str	r3, [r7, #32]
 80084d2:	e001      	b.n	80084d8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <osMutexNew+0x5c>
      rmtx = 1U;
 80084e2:	2301      	movs	r3, #1
 80084e4:	61fb      	str	r3, [r7, #28]
 80084e6:	e001      	b.n	80084ec <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d15c      	bne.n	80085b0 <osMutexNew+0x124>
      mem = -1;
 80084f6:	f04f 33ff 	mov.w	r3, #4294967295
 80084fa:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d015      	beq.n	800852e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d006      	beq.n	8008518 <osMutexNew+0x8c>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b4f      	cmp	r3, #79	; 0x4f
 8008510:	d902      	bls.n	8008518 <osMutexNew+0x8c>
          mem = 1;
 8008512:	2301      	movs	r3, #1
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	e00c      	b.n	8008532 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d108      	bne.n	8008532 <osMutexNew+0xa6>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d104      	bne.n	8008532 <osMutexNew+0xa6>
            mem = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	e001      	b.n	8008532 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d112      	bne.n	800855e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d007      	beq.n	800854e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	4619      	mov	r1, r3
 8008544:	2004      	movs	r0, #4
 8008546:	f000 fc3a 	bl	8008dbe <xQueueCreateMutexStatic>
 800854a:	6278      	str	r0, [r7, #36]	; 0x24
 800854c:	e016      	b.n	800857c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	4619      	mov	r1, r3
 8008554:	2001      	movs	r0, #1
 8008556:	f000 fc32 	bl	8008dbe <xQueueCreateMutexStatic>
 800855a:	6278      	str	r0, [r7, #36]	; 0x24
 800855c:	e00e      	b.n	800857c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d004      	beq.n	8008574 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800856a:	2004      	movs	r0, #4
 800856c:	f000 fc0f 	bl	8008d8e <xQueueCreateMutex>
 8008570:	6278      	str	r0, [r7, #36]	; 0x24
 8008572:	e003      	b.n	800857c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008574:	2001      	movs	r0, #1
 8008576:	f000 fc0a 	bl	8008d8e <xQueueCreateMutex>
 800857a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00c      	beq.n	800859c <osMutexNew+0x110>
        if (attr != NULL) {
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <osMutexNew+0x104>
          name = attr->name;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	617b      	str	r3, [r7, #20]
 800858e:	e001      	b.n	8008594 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008594:	6979      	ldr	r1, [r7, #20]
 8008596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008598:	f001 f92e 	bl	80097f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d006      	beq.n	80085b0 <osMutexNew+0x124>
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	f043 0301 	orr.w	r3, r3, #1
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3728      	adds	r7, #40	; 0x28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000098 	.word	0x20000098

080085c0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f023 0301 	bic.w	r3, r3, #1
 80085d0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80085da:	2300      	movs	r3, #0
 80085dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085de:	f3ef 8305 	mrs	r3, IPSR
 80085e2:	613b      	str	r3, [r7, #16]
  return(result);
 80085e4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10f      	bne.n	800860a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ea:	f3ef 8310 	mrs	r3, PRIMASK
 80085ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d105      	bne.n	8008602 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085f6:	f3ef 8311 	mrs	r3, BASEPRI
 80085fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <osMutexAcquire+0x52>
 8008602:	4b1d      	ldr	r3, [pc, #116]	; (8008678 <osMutexAcquire+0xb8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d103      	bne.n	8008612 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800860a:	f06f 0305 	mvn.w	r3, #5
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	e02c      	b.n	800866c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d103      	bne.n	8008620 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008618:	f06f 0303 	mvn.w	r3, #3
 800861c:	61fb      	str	r3, [r7, #28]
 800861e:	e025      	b.n	800866c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d011      	beq.n	800864a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	69b8      	ldr	r0, [r7, #24]
 800862a:	f000 fc16 	bl	8008e5a <xQueueTakeMutexRecursive>
 800862e:	4603      	mov	r3, r0
 8008630:	2b01      	cmp	r3, #1
 8008632:	d01b      	beq.n	800866c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800863a:	f06f 0301 	mvn.w	r3, #1
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	e014      	b.n	800866c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008642:	f06f 0302 	mvn.w	r3, #2
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e010      	b.n	800866c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	69b8      	ldr	r0, [r7, #24]
 800864e:	f000 fea3 	bl	8009398 <xQueueSemaphoreTake>
 8008652:	4603      	mov	r3, r0
 8008654:	2b01      	cmp	r3, #1
 8008656:	d009      	beq.n	800866c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800865e:	f06f 0301 	mvn.w	r3, #1
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	e002      	b.n	800866c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008666:	f06f 0302 	mvn.w	r3, #2
 800866a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800866c:	69fb      	ldr	r3, [r7, #28]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3720      	adds	r7, #32
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000098 	.word	0x20000098

0800867c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008694:	2300      	movs	r3, #0
 8008696:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008698:	f3ef 8305 	mrs	r3, IPSR
 800869c:	613b      	str	r3, [r7, #16]
  return(result);
 800869e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10f      	bne.n	80086c4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086a4:	f3ef 8310 	mrs	r3, PRIMASK
 80086a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d105      	bne.n	80086bc <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086b0:	f3ef 8311 	mrs	r3, BASEPRI
 80086b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d007      	beq.n	80086cc <osMutexRelease+0x50>
 80086bc:	4b16      	ldr	r3, [pc, #88]	; (8008718 <osMutexRelease+0x9c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d103      	bne.n	80086cc <osMutexRelease+0x50>
    stat = osErrorISR;
 80086c4:	f06f 0305 	mvn.w	r3, #5
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	e01f      	b.n	800870c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d103      	bne.n	80086da <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80086d2:	f06f 0303 	mvn.w	r3, #3
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	e018      	b.n	800870c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80086e0:	69b8      	ldr	r0, [r7, #24]
 80086e2:	f000 fb87 	bl	8008df4 <xQueueGiveMutexRecursive>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d00f      	beq.n	800870c <osMutexRelease+0x90>
        stat = osErrorResource;
 80086ec:	f06f 0302 	mvn.w	r3, #2
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	e00b      	b.n	800870c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80086f4:	2300      	movs	r3, #0
 80086f6:	2200      	movs	r2, #0
 80086f8:	2100      	movs	r1, #0
 80086fa:	69b8      	ldr	r0, [r7, #24]
 80086fc:	f000 fbe2 	bl	8008ec4 <xQueueGenericSend>
 8008700:	4603      	mov	r3, r0
 8008702:	2b01      	cmp	r3, #1
 8008704:	d002      	beq.n	800870c <osMutexRelease+0x90>
        stat = osErrorResource;
 8008706:	f06f 0302 	mvn.w	r3, #2
 800870a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800870c:	69fb      	ldr	r3, [r7, #28]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3720      	adds	r7, #32
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000098 	.word	0x20000098

0800871c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800871c:	b580      	push	{r7, lr}
 800871e:	b08c      	sub	sp, #48	; 0x30
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008728:	2300      	movs	r3, #0
 800872a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800872c:	f3ef 8305 	mrs	r3, IPSR
 8008730:	61bb      	str	r3, [r7, #24]
  return(result);
 8008732:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008734:	2b00      	cmp	r3, #0
 8008736:	d170      	bne.n	800881a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008738:	f3ef 8310 	mrs	r3, PRIMASK
 800873c:	617b      	str	r3, [r7, #20]
  return(result);
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d105      	bne.n	8008750 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008744:	f3ef 8311 	mrs	r3, BASEPRI
 8008748:	613b      	str	r3, [r7, #16]
  return(result);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <osMessageQueueNew+0x3c>
 8008750:	4b34      	ldr	r3, [pc, #208]	; (8008824 <osMessageQueueNew+0x108>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d060      	beq.n	800881a <osMessageQueueNew+0xfe>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d05d      	beq.n	800881a <osMessageQueueNew+0xfe>
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d05a      	beq.n	800881a <osMessageQueueNew+0xfe>
    mem = -1;
 8008764:	f04f 33ff 	mov.w	r3, #4294967295
 8008768:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d029      	beq.n	80087c4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d012      	beq.n	800879e <osMessageQueueNew+0x82>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	2b4f      	cmp	r3, #79	; 0x4f
 800877e:	d90e      	bls.n	800879e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	695a      	ldr	r2, [r3, #20]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	fb01 f303 	mul.w	r3, r1, r3
 8008794:	429a      	cmp	r2, r3
 8008796:	d302      	bcc.n	800879e <osMessageQueueNew+0x82>
        mem = 1;
 8008798:	2301      	movs	r3, #1
 800879a:	623b      	str	r3, [r7, #32]
 800879c:	e014      	b.n	80087c8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d110      	bne.n	80087c8 <osMessageQueueNew+0xac>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10c      	bne.n	80087c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d108      	bne.n	80087c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d104      	bne.n	80087c8 <osMessageQueueNew+0xac>
          mem = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	623b      	str	r3, [r7, #32]
 80087c2:	e001      	b.n	80087c8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d10c      	bne.n	80087e8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691a      	ldr	r2, [r3, #16]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6899      	ldr	r1, [r3, #8]
 80087d6:	2300      	movs	r3, #0
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	460b      	mov	r3, r1
 80087dc:	68b9      	ldr	r1, [r7, #8]
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 f9e6 	bl	8008bb0 <xQueueGenericCreateStatic>
 80087e4:	6278      	str	r0, [r7, #36]	; 0x24
 80087e6:	e008      	b.n	80087fa <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d105      	bne.n	80087fa <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80087ee:	2200      	movs	r2, #0
 80087f0:	68b9      	ldr	r1, [r7, #8]
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 fa4f 	bl	8008c96 <xQueueGenericCreate>
 80087f8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00c      	beq.n	800881a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <osMessageQueueNew+0xf2>
        name = attr->name;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	e001      	b.n	8008812 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008812:	69f9      	ldr	r1, [r7, #28]
 8008814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008816:	f000 ffef 	bl	80097f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800881c:	4618      	mov	r0, r3
 800881e:	3728      	adds	r7, #40	; 0x28
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20000098 	.word	0x20000098

08008828 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b08a      	sub	sp, #40	; 0x28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	4613      	mov	r3, r2
 8008836:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800883c:	2300      	movs	r3, #0
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008840:	f3ef 8305 	mrs	r3, IPSR
 8008844:	61fb      	str	r3, [r7, #28]
  return(result);
 8008846:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10f      	bne.n	800886c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800884c:	f3ef 8310 	mrs	r3, PRIMASK
 8008850:	61bb      	str	r3, [r7, #24]
  return(result);
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d105      	bne.n	8008864 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008858:	f3ef 8311 	mrs	r3, BASEPRI
 800885c:	617b      	str	r3, [r7, #20]
  return(result);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d02c      	beq.n	80088be <osMessageQueuePut+0x96>
 8008864:	4b28      	ldr	r3, [pc, #160]	; (8008908 <osMessageQueuePut+0xe0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d128      	bne.n	80088be <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d005      	beq.n	800887e <osMessageQueuePut+0x56>
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <osMessageQueuePut+0x56>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800887e:	f06f 0303 	mvn.w	r3, #3
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008884:	e039      	b.n	80088fa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008886:	2300      	movs	r3, #0
 8008888:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800888a:	f107 0210 	add.w	r2, r7, #16
 800888e:	2300      	movs	r3, #0
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	6a38      	ldr	r0, [r7, #32]
 8008894:	f000 fc10 	bl	80090b8 <xQueueGenericSendFromISR>
 8008898:	4603      	mov	r3, r0
 800889a:	2b01      	cmp	r3, #1
 800889c:	d003      	beq.n	80088a6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800889e:	f06f 0302 	mvn.w	r3, #2
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088a4:	e029      	b.n	80088fa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d026      	beq.n	80088fa <osMessageQueuePut+0xd2>
 80088ac:	4b17      	ldr	r3, [pc, #92]	; (800890c <osMessageQueuePut+0xe4>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088bc:	e01d      	b.n	80088fa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <osMessageQueuePut+0xa2>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d103      	bne.n	80088d2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80088ca:	f06f 0303 	mvn.w	r3, #3
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
 80088d0:	e014      	b.n	80088fc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80088d2:	2300      	movs	r3, #0
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	6a38      	ldr	r0, [r7, #32]
 80088da:	f000 faf3 	bl	8008ec4 <xQueueGenericSend>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d00b      	beq.n	80088fc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80088ea:	f06f 0301 	mvn.w	r3, #1
 80088ee:	627b      	str	r3, [r7, #36]	; 0x24
 80088f0:	e004      	b.n	80088fc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80088f2:	f06f 0302 	mvn.w	r3, #2
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
 80088f8:	e000      	b.n	80088fc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80088fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3728      	adds	r7, #40	; 0x28
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20000098 	.word	0x20000098
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4a07      	ldr	r2, [pc, #28]	; (800893c <vApplicationGetIdleTaskMemory+0x2c>)
 8008920:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	4a06      	ldr	r2, [pc, #24]	; (8008940 <vApplicationGetIdleTaskMemory+0x30>)
 8008926:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2280      	movs	r2, #128	; 0x80
 800892c:	601a      	str	r2, [r3, #0]
}
 800892e:	bf00      	nop
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	2000009c 	.word	0x2000009c
 8008940:	20000100 	.word	0x20000100

08008944 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4a07      	ldr	r2, [pc, #28]	; (8008970 <vApplicationGetTimerTaskMemory+0x2c>)
 8008954:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	4a06      	ldr	r2, [pc, #24]	; (8008974 <vApplicationGetTimerTaskMemory+0x30>)
 800895a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008962:	601a      	str	r2, [r3, #0]
}
 8008964:	bf00      	nop
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	20000300 	.word	0x20000300
 8008974:	20000364 	.word	0x20000364

08008978 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f103 0208 	add.w	r2, r3, #8
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f04f 32ff 	mov.w	r2, #4294967295
 8008990:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f103 0208 	add.w	r2, r3, #8
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f103 0208 	add.w	r2, r3, #8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	601a      	str	r2, [r3, #0]
}
 8008a0e:	bf00      	nop
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b085      	sub	sp, #20
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a30:	d103      	bne.n	8008a3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e00c      	b.n	8008a54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e002      	b.n	8008a48 <vListInsert+0x2e>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d2f6      	bcs.n	8008a42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	601a      	str	r2, [r3, #0]
}
 8008a80:	bf00      	nop
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6892      	ldr	r2, [r2, #8]
 8008aa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6852      	ldr	r2, [r2, #4]
 8008aac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d103      	bne.n	8008ac0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	1e5a      	subs	r2, r3, #1
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d109      	bne.n	8008b08 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008af4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60bb      	str	r3, [r7, #8]
 8008b06:	e7fe      	b.n	8008b06 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008b08:	f002 fd80 	bl	800b60c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b14:	68f9      	ldr	r1, [r7, #12]
 8008b16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b18:	fb01 f303 	mul.w	r3, r1, r3
 8008b1c:	441a      	add	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	441a      	add	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	22ff      	movs	r2, #255	; 0xff
 8008b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	22ff      	movs	r2, #255	; 0xff
 8008b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d114      	bne.n	8008b88 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01a      	beq.n	8008b9c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3310      	adds	r3, #16
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 fb16 	bl	800a19c <xTaskRemoveFromEventList>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d012      	beq.n	8008b9c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b76:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <xQueueGenericReset+0xcc>)
 8008b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	e009      	b.n	8008b9c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3310      	adds	r3, #16
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff fef3 	bl	8008978 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3324      	adds	r3, #36	; 0x24
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff feee 	bl	8008978 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b9c:	f002 fd64 	bl	800b668 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ba0:	2301      	movs	r3, #1
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	e000ed04 	.word	0xe000ed04

08008bb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08e      	sub	sp, #56	; 0x38
 8008bb4:	af02      	add	r7, sp, #8
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d109      	bne.n	8008bd8 <xQueueGenericCreateStatic+0x28>
 8008bc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bd6:	e7fe      	b.n	8008bd6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <xQueueGenericCreateStatic+0x42>
 8008bde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf0:	e7fe      	b.n	8008bf0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <xQueueGenericCreateStatic+0x4e>
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <xQueueGenericCreateStatic+0x52>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueGenericCreateStatic+0x54>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d109      	bne.n	8008c1c <xQueueGenericCreateStatic+0x6c>
 8008c08:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	623b      	str	r3, [r7, #32]
 8008c1a:	e7fe      	b.n	8008c1a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d102      	bne.n	8008c28 <xQueueGenericCreateStatic+0x78>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <xQueueGenericCreateStatic+0x7c>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e000      	b.n	8008c2e <xQueueGenericCreateStatic+0x7e>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <xQueueGenericCreateStatic+0x96>
 8008c32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	61fb      	str	r3, [r7, #28]
 8008c44:	e7fe      	b.n	8008c44 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c46:	2350      	movs	r3, #80	; 0x50
 8008c48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b50      	cmp	r3, #80	; 0x50
 8008c4e:	d009      	beq.n	8008c64 <xQueueGenericCreateStatic+0xb4>
 8008c50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	e7fe      	b.n	8008c62 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00d      	beq.n	8008c8c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	4613      	mov	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	68b9      	ldr	r1, [r7, #8]
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 f844 	bl	8008d14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3730      	adds	r7, #48	; 0x30
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b08a      	sub	sp, #40	; 0x28
 8008c9a:	af02      	add	r7, sp, #8
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d109      	bne.n	8008cbe <xQueueGenericCreate+0x28>
 8008caa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	613b      	str	r3, [r7, #16]
 8008cbc:	e7fe      	b.n	8008cbc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d102      	bne.n	8008cca <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61fb      	str	r3, [r7, #28]
 8008cc8:	e004      	b.n	8008cd4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	fb02 f303 	mul.w	r3, r2, r3
 8008cd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	3350      	adds	r3, #80	; 0x50
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f002 fdb1 	bl	800b840 <pvPortMalloc>
 8008cde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d011      	beq.n	8008d0a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	3350      	adds	r3, #80	; 0x50
 8008cee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cf8:	79fa      	ldrb	r2, [r7, #7]
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	68b9      	ldr	r1, [r7, #8]
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 f805 	bl	8008d14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
	}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3720      	adds	r7, #32
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d103      	bne.n	8008d30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	e002      	b.n	8008d36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d42:	2101      	movs	r1, #1
 8008d44:	69b8      	ldr	r0, [r7, #24]
 8008d46:	f7ff fecb 	bl	8008ae0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00e      	beq.n	8008d86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2100      	movs	r1, #0
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f89f 	bl	8008ec4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b086      	sub	sp, #24
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	4603      	mov	r3, r0
 8008d96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	617b      	str	r3, [r7, #20]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	461a      	mov	r2, r3
 8008da4:	6939      	ldr	r1, [r7, #16]
 8008da6:	6978      	ldr	r0, [r7, #20]
 8008da8:	f7ff ff75 	bl	8008c96 <xQueueGenericCreate>
 8008dac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f7ff ffd3 	bl	8008d5a <prvInitialiseMutex>

		return xNewQueue;
 8008db4:	68fb      	ldr	r3, [r7, #12]
	}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b088      	sub	sp, #32
 8008dc2:	af02      	add	r7, sp, #8
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	6039      	str	r1, [r7, #0]
 8008dc8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	6939      	ldr	r1, [r7, #16]
 8008ddc:	6978      	ldr	r0, [r7, #20]
 8008dde:	f7ff fee7 	bl	8008bb0 <xQueueGenericCreateStatic>
 8008de2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7ff ffb8 	bl	8008d5a <prvInitialiseMutex>

		return xNewQueue;
 8008dea:	68fb      	ldr	r3, [r7, #12]
	}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008df4:	b590      	push	{r4, r7, lr}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d109      	bne.n	8008e1a <xQueueGiveMutexRecursive+0x26>
 8008e06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	e7fe      	b.n	8008e18 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	689c      	ldr	r4, [r3, #8]
 8008e1e:	f001 fb73 	bl	800a508 <xTaskGetCurrentTaskHandle>
 8008e22:	4603      	mov	r3, r0
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d111      	bne.n	8008e4c <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	1e5a      	subs	r2, r3, #1
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d105      	bne.n	8008e46 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2100      	movs	r1, #0
 8008e40:	6938      	ldr	r0, [r7, #16]
 8008e42:	f000 f83f 	bl	8008ec4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008e46:	2301      	movs	r3, #1
 8008e48:	617b      	str	r3, [r7, #20]
 8008e4a:	e001      	b.n	8008e50 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008e50:	697b      	ldr	r3, [r7, #20]
	}
 8008e52:	4618      	mov	r0, r3
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd90      	pop	{r4, r7, pc}

08008e5a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008e5a:	b590      	push	{r4, r7, lr}
 8008e5c:	b087      	sub	sp, #28
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d109      	bne.n	8008e82 <xQueueTakeMutexRecursive+0x28>
 8008e6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	e7fe      	b.n	8008e80 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	689c      	ldr	r4, [r3, #8]
 8008e86:	f001 fb3f 	bl	800a508 <xTaskGetCurrentTaskHandle>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	429c      	cmp	r4, r3
 8008e8e:	d107      	bne.n	8008ea0 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	617b      	str	r3, [r7, #20]
 8008e9e:	e00c      	b.n	8008eba <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6938      	ldr	r0, [r7, #16]
 8008ea4:	f000 fa78 	bl	8009398 <xQueueSemaphoreTake>
 8008ea8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008eba:	697b      	ldr	r3, [r7, #20]
	}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	371c      	adds	r7, #28
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd90      	pop	{r4, r7, pc}

08008ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08e      	sub	sp, #56	; 0x38
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <xQueueGenericSend+0x30>
 8008ee0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ef2:	e7fe      	b.n	8008ef2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d103      	bne.n	8008f02 <xQueueGenericSend+0x3e>
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <xQueueGenericSend+0x42>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e000      	b.n	8008f08 <xQueueGenericSend+0x44>
 8008f06:	2300      	movs	r3, #0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d109      	bne.n	8008f20 <xQueueGenericSend+0x5c>
 8008f0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f1e:	e7fe      	b.n	8008f1e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d103      	bne.n	8008f2e <xQueueGenericSend+0x6a>
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d101      	bne.n	8008f32 <xQueueGenericSend+0x6e>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <xQueueGenericSend+0x70>
 8008f32:	2300      	movs	r3, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d109      	bne.n	8008f4c <xQueueGenericSend+0x88>
 8008f38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	623b      	str	r3, [r7, #32]
 8008f4a:	e7fe      	b.n	8008f4a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f4c:	f001 faec 	bl	800a528 <xTaskGetSchedulerState>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d102      	bne.n	8008f5c <xQueueGenericSend+0x98>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <xQueueGenericSend+0x9c>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <xQueueGenericSend+0x9e>
 8008f60:	2300      	movs	r3, #0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d109      	bne.n	8008f7a <xQueueGenericSend+0xb6>
 8008f66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	61fb      	str	r3, [r7, #28]
 8008f78:	e7fe      	b.n	8008f78 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f7a:	f002 fb47 	bl	800b60c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d302      	bcc.n	8008f90 <xQueueGenericSend+0xcc>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d129      	bne.n	8008fe4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	68b9      	ldr	r1, [r7, #8]
 8008f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f96:	f000 fb1f 	bl	80095d8 <prvCopyDataToQueue>
 8008f9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d010      	beq.n	8008fc6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	3324      	adds	r3, #36	; 0x24
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 f8f7 	bl	800a19c <xTaskRemoveFromEventList>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d013      	beq.n	8008fdc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fb4:	4b3f      	ldr	r3, [pc, #252]	; (80090b4 <xQueueGenericSend+0x1f0>)
 8008fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	e00a      	b.n	8008fdc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d007      	beq.n	8008fdc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fcc:	4b39      	ldr	r3, [pc, #228]	; (80090b4 <xQueueGenericSend+0x1f0>)
 8008fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008fdc:	f002 fb44 	bl	800b668 <vPortExitCritical>
				return pdPASS;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e063      	b.n	80090ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d103      	bne.n	8008ff2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fea:	f002 fb3d 	bl	800b668 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e05c      	b.n	80090ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d106      	bne.n	8009006 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ff8:	f107 0314 	add.w	r3, r7, #20
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f001 f92f 	bl	800a260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009002:	2301      	movs	r3, #1
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009006:	f002 fb2f 	bl	800b668 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800900a:	f000 fe8f 	bl	8009d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800900e:	f002 fafd 	bl	800b60c <vPortEnterCritical>
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009018:	b25b      	sxtb	r3, r3
 800901a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901e:	d103      	bne.n	8009028 <xQueueGenericSend+0x164>
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800902e:	b25b      	sxtb	r3, r3
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d103      	bne.n	800903e <xQueueGenericSend+0x17a>
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800903e:	f002 fb13 	bl	800b668 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009042:	1d3a      	adds	r2, r7, #4
 8009044:	f107 0314 	add.w	r3, r7, #20
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f001 f91e 	bl	800a28c <xTaskCheckForTimeOut>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d124      	bne.n	80090a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009058:	f000 fbb6 	bl	80097c8 <prvIsQueueFull>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d018      	beq.n	8009094 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	3310      	adds	r3, #16
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f001 f848 	bl	800a100 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009072:	f000 fb41 	bl	80096f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009076:	f000 fe67 	bl	8009d48 <xTaskResumeAll>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	f47f af7c 	bne.w	8008f7a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009082:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <xQueueGenericSend+0x1f0>)
 8009084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	e772      	b.n	8008f7a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009096:	f000 fb2f 	bl	80096f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800909a:	f000 fe55 	bl	8009d48 <xTaskResumeAll>
 800909e:	e76c      	b.n	8008f7a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090a2:	f000 fb29 	bl	80096f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090a6:	f000 fe4f 	bl	8009d48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3738      	adds	r7, #56	; 0x38
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	e000ed04 	.word	0xe000ed04

080090b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	; 0x38
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d109      	bne.n	80090e4 <xQueueGenericSendFromISR+0x2c>
 80090d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
 80090e2:	e7fe      	b.n	80090e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d103      	bne.n	80090f2 <xQueueGenericSendFromISR+0x3a>
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <xQueueGenericSendFromISR+0x3e>
 80090f2:	2301      	movs	r3, #1
 80090f4:	e000      	b.n	80090f8 <xQueueGenericSendFromISR+0x40>
 80090f6:	2300      	movs	r3, #0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d109      	bne.n	8009110 <xQueueGenericSendFromISR+0x58>
 80090fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	623b      	str	r3, [r7, #32]
 800910e:	e7fe      	b.n	800910e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d103      	bne.n	800911e <xQueueGenericSendFromISR+0x66>
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <xQueueGenericSendFromISR+0x6a>
 800911e:	2301      	movs	r3, #1
 8009120:	e000      	b.n	8009124 <xQueueGenericSendFromISR+0x6c>
 8009122:	2300      	movs	r3, #0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <xQueueGenericSendFromISR+0x84>
 8009128:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	61fb      	str	r3, [r7, #28]
 800913a:	e7fe      	b.n	800913a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800913c:	f002 fb42 	bl	800b7c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009140:	f3ef 8211 	mrs	r2, BASEPRI
 8009144:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009148:	f383 8811 	msr	BASEPRI, r3
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	61ba      	str	r2, [r7, #24]
 8009156:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009158:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800915a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009164:	429a      	cmp	r2, r3
 8009166:	d302      	bcc.n	800916e <xQueueGenericSendFromISR+0xb6>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b02      	cmp	r3, #2
 800916c:	d12c      	bne.n	80091c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	68b9      	ldr	r1, [r7, #8]
 800917c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800917e:	f000 fa2b 	bl	80095d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009182:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918a:	d112      	bne.n	80091b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	2b00      	cmp	r3, #0
 8009192:	d016      	beq.n	80091c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	3324      	adds	r3, #36	; 0x24
 8009198:	4618      	mov	r0, r3
 800919a:	f000 ffff 	bl	800a19c <xTaskRemoveFromEventList>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00e      	beq.n	80091c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00b      	beq.n	80091c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	e007      	b.n	80091c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80091b6:	3301      	adds	r3, #1
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	b25a      	sxtb	r2, r3
 80091bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091c2:	2301      	movs	r3, #1
 80091c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80091c6:	e001      	b.n	80091cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091c8:	2300      	movs	r3, #0
 80091ca:	637b      	str	r3, [r7, #52]	; 0x34
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3738      	adds	r7, #56	; 0x38
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08c      	sub	sp, #48	; 0x30
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d109      	bne.n	800920e <xQueueReceive+0x2e>
	__asm volatile
 80091fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	623b      	str	r3, [r7, #32]
 800920c:	e7fe      	b.n	800920c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d103      	bne.n	800921c <xQueueReceive+0x3c>
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <xQueueReceive+0x40>
 800921c:	2301      	movs	r3, #1
 800921e:	e000      	b.n	8009222 <xQueueReceive+0x42>
 8009220:	2300      	movs	r3, #0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <xQueueReceive+0x5a>
 8009226:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	61fb      	str	r3, [r7, #28]
 8009238:	e7fe      	b.n	8009238 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800923a:	f001 f975 	bl	800a528 <xTaskGetSchedulerState>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <xQueueReceive+0x6a>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <xQueueReceive+0x6e>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueReceive+0x70>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <xQueueReceive+0x88>
 8009254:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	61bb      	str	r3, [r7, #24]
 8009266:	e7fe      	b.n	8009266 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009268:	f002 f9d0 	bl	800b60c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01f      	beq.n	80092b8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800927c:	f000 fa16 	bl	80096ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	1e5a      	subs	r2, r3, #1
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00f      	beq.n	80092b0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	3310      	adds	r3, #16
 8009294:	4618      	mov	r0, r3
 8009296:	f000 ff81 	bl	800a19c <xTaskRemoveFromEventList>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092a0:	4b3c      	ldr	r3, [pc, #240]	; (8009394 <xQueueReceive+0x1b4>)
 80092a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092b0:	f002 f9da 	bl	800b668 <vPortExitCritical>
				return pdPASS;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e069      	b.n	800938c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d103      	bne.n	80092c6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092be:	f002 f9d3 	bl	800b668 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092c2:	2300      	movs	r3, #0
 80092c4:	e062      	b.n	800938c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d106      	bne.n	80092da <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092cc:	f107 0310 	add.w	r3, r7, #16
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 ffc5 	bl	800a260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092d6:	2301      	movs	r3, #1
 80092d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092da:	f002 f9c5 	bl	800b668 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092de:	f000 fd25 	bl	8009d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092e2:	f002 f993 	bl	800b60c <vPortEnterCritical>
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ec:	b25b      	sxtb	r3, r3
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f2:	d103      	bne.n	80092fc <xQueueReceive+0x11c>
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009302:	b25b      	sxtb	r3, r3
 8009304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009308:	d103      	bne.n	8009312 <xQueueReceive+0x132>
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009312:	f002 f9a9 	bl	800b668 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009316:	1d3a      	adds	r2, r7, #4
 8009318:	f107 0310 	add.w	r3, r7, #16
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f000 ffb4 	bl	800a28c <xTaskCheckForTimeOut>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d123      	bne.n	8009372 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800932a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932c:	f000 fa36 	bl	800979c <prvIsQueueEmpty>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d017      	beq.n	8009366 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	3324      	adds	r3, #36	; 0x24
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	4611      	mov	r1, r2
 800933e:	4618      	mov	r0, r3
 8009340:	f000 fede 	bl	800a100 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009346:	f000 f9d7 	bl	80096f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800934a:	f000 fcfd 	bl	8009d48 <xTaskResumeAll>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d189      	bne.n	8009268 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009354:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <xQueueReceive+0x1b4>)
 8009356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	e780      	b.n	8009268 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009368:	f000 f9c6 	bl	80096f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800936c:	f000 fcec 	bl	8009d48 <xTaskResumeAll>
 8009370:	e77a      	b.n	8009268 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009374:	f000 f9c0 	bl	80096f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009378:	f000 fce6 	bl	8009d48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800937c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800937e:	f000 fa0d 	bl	800979c <prvIsQueueEmpty>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	f43f af6f 	beq.w	8009268 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800938a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800938c:	4618      	mov	r0, r3
 800938e:	3730      	adds	r7, #48	; 0x30
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	e000ed04 	.word	0xe000ed04

08009398 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08e      	sub	sp, #56	; 0x38
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80093aa:	2300      	movs	r3, #0
 80093ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <xQueueSemaphoreTake+0x30>
 80093b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	623b      	str	r3, [r7, #32]
 80093c6:	e7fe      	b.n	80093c6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d009      	beq.n	80093e4 <xQueueSemaphoreTake+0x4c>
 80093d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	61fb      	str	r3, [r7, #28]
 80093e2:	e7fe      	b.n	80093e2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093e4:	f001 f8a0 	bl	800a528 <xTaskGetSchedulerState>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d102      	bne.n	80093f4 <xQueueSemaphoreTake+0x5c>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <xQueueSemaphoreTake+0x60>
 80093f4:	2301      	movs	r3, #1
 80093f6:	e000      	b.n	80093fa <xQueueSemaphoreTake+0x62>
 80093f8:	2300      	movs	r3, #0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <xQueueSemaphoreTake+0x7a>
 80093fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	61bb      	str	r3, [r7, #24]
 8009410:	e7fe      	b.n	8009410 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009412:	f002 f8fb 	bl	800b60c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d024      	beq.n	800946c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	1e5a      	subs	r2, r3, #1
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d104      	bne.n	800943c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009432:	f001 f9eb 	bl	800a80c <pvTaskIncrementMutexHeldCount>
 8009436:	4602      	mov	r2, r0
 8009438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00f      	beq.n	8009464 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009446:	3310      	adds	r3, #16
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fea7 	bl	800a19c <xTaskRemoveFromEventList>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d007      	beq.n	8009464 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009454:	4b53      	ldr	r3, [pc, #332]	; (80095a4 <xQueueSemaphoreTake+0x20c>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009464:	f002 f900 	bl	800b668 <vPortExitCritical>
				return pdPASS;
 8009468:	2301      	movs	r3, #1
 800946a:	e096      	b.n	800959a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d110      	bne.n	8009494 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	2b00      	cmp	r3, #0
 8009476:	d009      	beq.n	800948c <xQueueSemaphoreTake+0xf4>
 8009478:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	e7fe      	b.n	800948a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800948c:	f002 f8ec 	bl	800b668 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009490:	2300      	movs	r3, #0
 8009492:	e082      	b.n	800959a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800949a:	f107 030c 	add.w	r3, r7, #12
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fede 	bl	800a260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094a4:	2301      	movs	r3, #1
 80094a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094a8:	f002 f8de 	bl	800b668 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094ac:	f000 fc3e 	bl	8009d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094b0:	f002 f8ac 	bl	800b60c <vPortEnterCritical>
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ba:	b25b      	sxtb	r3, r3
 80094bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c0:	d103      	bne.n	80094ca <xQueueSemaphoreTake+0x132>
 80094c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094d0:	b25b      	sxtb	r3, r3
 80094d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d6:	d103      	bne.n	80094e0 <xQueueSemaphoreTake+0x148>
 80094d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094e0:	f002 f8c2 	bl	800b668 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094e4:	463a      	mov	r2, r7
 80094e6:	f107 030c 	add.w	r3, r7, #12
 80094ea:	4611      	mov	r1, r2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 fecd 	bl	800a28c <xTaskCheckForTimeOut>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d132      	bne.n	800955e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094fa:	f000 f94f 	bl	800979c <prvIsQueueEmpty>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d026      	beq.n	8009552 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d109      	bne.n	8009520 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800950c:	f002 f87e 	bl	800b60c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	4618      	mov	r0, r3
 8009516:	f001 f825 	bl	800a564 <xTaskPriorityInherit>
 800951a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800951c:	f002 f8a4 	bl	800b668 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009522:	3324      	adds	r3, #36	; 0x24
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	4611      	mov	r1, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f000 fde9 	bl	800a100 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800952e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009530:	f000 f8e2 	bl	80096f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009534:	f000 fc08 	bl	8009d48 <xTaskResumeAll>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	f47f af69 	bne.w	8009412 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009540:	4b18      	ldr	r3, [pc, #96]	; (80095a4 <xQueueSemaphoreTake+0x20c>)
 8009542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	e75f      	b.n	8009412 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009554:	f000 f8d0 	bl	80096f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009558:	f000 fbf6 	bl	8009d48 <xTaskResumeAll>
 800955c:	e759      	b.n	8009412 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800955e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009560:	f000 f8ca 	bl	80096f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009564:	f000 fbf0 	bl	8009d48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800956a:	f000 f917 	bl	800979c <prvIsQueueEmpty>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	f43f af4e 	beq.w	8009412 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00d      	beq.n	8009598 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800957c:	f002 f846 	bl	800b60c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009582:	f000 f811 	bl	80095a8 <prvGetDisinheritPriorityAfterTimeout>
 8009586:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800958e:	4618      	mov	r0, r3
 8009590:	f001 f8bc 	bl	800a70c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009594:	f002 f868 	bl	800b668 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009598:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800959a:	4618      	mov	r0, r3
 800959c:	3738      	adds	r7, #56	; 0x38
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	e000ed04 	.word	0xe000ed04

080095a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d006      	beq.n	80095c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	e001      	b.n	80095ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80095ca:	68fb      	ldr	r3, [r7, #12]
	}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10d      	bne.n	8009612 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d14d      	bne.n	800969a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	4618      	mov	r0, r3
 8009604:	f001 f816 	bl	800a634 <xTaskPriorityDisinherit>
 8009608:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	609a      	str	r2, [r3, #8]
 8009610:	e043      	b.n	800969a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d119      	bne.n	800964c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6858      	ldr	r0, [r3, #4]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009620:	461a      	mov	r2, r3
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	f002 fb14 	bl	800bc50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	441a      	add	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	429a      	cmp	r2, r3
 8009640:	d32b      	bcc.n	800969a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	605a      	str	r2, [r3, #4]
 800964a:	e026      	b.n	800969a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	68d8      	ldr	r0, [r3, #12]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009654:	461a      	mov	r2, r3
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	f002 fafa 	bl	800bc50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68da      	ldr	r2, [r3, #12]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009664:	425b      	negs	r3, r3
 8009666:	441a      	add	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68da      	ldr	r2, [r3, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	d207      	bcs.n	8009688 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009680:	425b      	negs	r3, r3
 8009682:	441a      	add	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b02      	cmp	r3, #2
 800968c:	d105      	bne.n	800969a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	3b01      	subs	r3, #1
 8009698:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096a2:	697b      	ldr	r3, [r7, #20]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d018      	beq.n	80096f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c6:	441a      	add	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d303      	bcc.n	80096e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68d9      	ldr	r1, [r3, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	461a      	mov	r2, r3
 80096ea:	6838      	ldr	r0, [r7, #0]
 80096ec:	f002 fab0 	bl	800bc50 <memcpy>
	}
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009700:	f001 ff84 	bl	800b60c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800970a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800970c:	e011      	b.n	8009732 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009712:	2b00      	cmp	r3, #0
 8009714:	d012      	beq.n	800973c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3324      	adds	r3, #36	; 0x24
 800971a:	4618      	mov	r0, r3
 800971c:	f000 fd3e 	bl	800a19c <xTaskRemoveFromEventList>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009726:	f000 fe11 	bl	800a34c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	3b01      	subs	r3, #1
 800972e:	b2db      	uxtb	r3, r3
 8009730:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009736:	2b00      	cmp	r3, #0
 8009738:	dce9      	bgt.n	800970e <prvUnlockQueue+0x16>
 800973a:	e000      	b.n	800973e <prvUnlockQueue+0x46>
					break;
 800973c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	22ff      	movs	r2, #255	; 0xff
 8009742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009746:	f001 ff8f 	bl	800b668 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800974a:	f001 ff5f 	bl	800b60c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009754:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009756:	e011      	b.n	800977c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d012      	beq.n	8009786 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3310      	adds	r3, #16
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fd19 	bl	800a19c <xTaskRemoveFromEventList>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009770:	f000 fdec 	bl	800a34c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	3b01      	subs	r3, #1
 8009778:	b2db      	uxtb	r3, r3
 800977a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800977c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009780:	2b00      	cmp	r3, #0
 8009782:	dce9      	bgt.n	8009758 <prvUnlockQueue+0x60>
 8009784:	e000      	b.n	8009788 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009786:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	22ff      	movs	r2, #255	; 0xff
 800978c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009790:	f001 ff6a 	bl	800b668 <vPortExitCritical>
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097a4:	f001 ff32 	bl	800b60c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d102      	bne.n	80097b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097b0:	2301      	movs	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	e001      	b.n	80097ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097ba:	f001 ff55 	bl	800b668 <vPortExitCritical>

	return xReturn;
 80097be:	68fb      	ldr	r3, [r7, #12]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097d0:	f001 ff1c 	bl	800b60c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097dc:	429a      	cmp	r2, r3
 80097de:	d102      	bne.n	80097e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097e0:	2301      	movs	r3, #1
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e001      	b.n	80097ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097ea:	f001 ff3d 	bl	800b668 <vPortExitCritical>

	return xReturn;
 80097ee:	68fb      	ldr	r3, [r7, #12]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	e014      	b.n	8009832 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009808:	4a0e      	ldr	r2, [pc, #56]	; (8009844 <vQueueAddToRegistry+0x4c>)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10b      	bne.n	800982c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009814:	490b      	ldr	r1, [pc, #44]	; (8009844 <vQueueAddToRegistry+0x4c>)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800981e:	4a09      	ldr	r2, [pc, #36]	; (8009844 <vQueueAddToRegistry+0x4c>)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	00db      	lsls	r3, r3, #3
 8009824:	4413      	add	r3, r2
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800982a:	e005      	b.n	8009838 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3301      	adds	r3, #1
 8009830:	60fb      	str	r3, [r7, #12]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b07      	cmp	r3, #7
 8009836:	d9e7      	bls.n	8009808 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009838:	bf00      	nop
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	20003b10 	.word	0x20003b10

08009848 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009858:	f001 fed8 	bl	800b60c <vPortEnterCritical>
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009862:	b25b      	sxtb	r3, r3
 8009864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009868:	d103      	bne.n	8009872 <vQueueWaitForMessageRestricted+0x2a>
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009878:	b25b      	sxtb	r3, r3
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987e:	d103      	bne.n	8009888 <vQueueWaitForMessageRestricted+0x40>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009888:	f001 feee 	bl	800b668 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	3324      	adds	r3, #36	; 0x24
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	68b9      	ldr	r1, [r7, #8]
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fc53 	bl	800a148 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80098a2:	6978      	ldr	r0, [r7, #20]
 80098a4:	f7ff ff28 	bl	80096f8 <prvUnlockQueue>
	}
 80098a8:	bf00      	nop
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08e      	sub	sp, #56	; 0x38
 80098b4:	af04      	add	r7, sp, #16
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d109      	bne.n	80098d8 <xTaskCreateStatic+0x28>
 80098c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	623b      	str	r3, [r7, #32]
 80098d6:	e7fe      	b.n	80098d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d109      	bne.n	80098f2 <xTaskCreateStatic+0x42>
 80098de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	61fb      	str	r3, [r7, #28]
 80098f0:	e7fe      	b.n	80098f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80098f2:	2364      	movs	r3, #100	; 0x64
 80098f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	2b64      	cmp	r3, #100	; 0x64
 80098fa:	d009      	beq.n	8009910 <xTaskCreateStatic+0x60>
 80098fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	61bb      	str	r3, [r7, #24]
 800990e:	e7fe      	b.n	800990e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009910:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01e      	beq.n	8009956 <xTaskCreateStatic+0xa6>
 8009918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01b      	beq.n	8009956 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800991e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009926:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	2202      	movs	r2, #2
 800992c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009930:	2300      	movs	r3, #0
 8009932:	9303      	str	r3, [sp, #12]
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	9302      	str	r3, [sp, #8]
 8009938:	f107 0314 	add.w	r3, r7, #20
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 f850 	bl	80099ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800994e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009950:	f000 f8e2 	bl	8009b18 <prvAddNewTaskToReadyList>
 8009954:	e001      	b.n	800995a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009956:	2300      	movs	r3, #0
 8009958:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800995a:	697b      	ldr	r3, [r7, #20]
	}
 800995c:	4618      	mov	r0, r3
 800995e:	3728      	adds	r7, #40	; 0x28
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08c      	sub	sp, #48	; 0x30
 8009968:	af04      	add	r7, sp, #16
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	4613      	mov	r3, r2
 8009972:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009974:	88fb      	ldrh	r3, [r7, #6]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4618      	mov	r0, r3
 800997a:	f001 ff61 	bl	800b840 <pvPortMalloc>
 800997e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00e      	beq.n	80099a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009986:	2064      	movs	r0, #100	; 0x64
 8009988:	f001 ff5a 	bl	800b840 <pvPortMalloc>
 800998c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	631a      	str	r2, [r3, #48]	; 0x30
 800999a:	e005      	b.n	80099a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800999c:	6978      	ldr	r0, [r7, #20]
 800999e:	f002 f811 	bl	800b9c4 <vPortFree>
 80099a2:	e001      	b.n	80099a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d017      	beq.n	80099de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099b6:	88fa      	ldrh	r2, [r7, #6]
 80099b8:	2300      	movs	r3, #0
 80099ba:	9303      	str	r3, [sp, #12]
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	9302      	str	r3, [sp, #8]
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f80e 	bl	80099ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099d2:	69f8      	ldr	r0, [r7, #28]
 80099d4:	f000 f8a0 	bl	8009b18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80099d8:	2301      	movs	r3, #1
 80099da:	61bb      	str	r3, [r7, #24]
 80099dc:	e002      	b.n	80099e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80099de:	f04f 33ff 	mov.w	r3, #4294967295
 80099e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80099e4:	69bb      	ldr	r3, [r7, #24]
	}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3720      	adds	r7, #32
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b088      	sub	sp, #32
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	60f8      	str	r0, [r7, #12]
 80099f6:	60b9      	str	r1, [r7, #8]
 80099f8:	607a      	str	r2, [r7, #4]
 80099fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	461a      	mov	r2, r3
 8009a06:	21a5      	movs	r1, #165	; 0xa5
 8009a08:	f002 f92d 	bl	800bc66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a16:	3b01      	subs	r3, #1
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	f023 0307 	bic.w	r3, r3, #7
 8009a24:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d009      	beq.n	8009a44 <prvInitialiseNewTask+0x56>
 8009a30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	e7fe      	b.n	8009a42 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d01f      	beq.n	8009a90 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a50:	2300      	movs	r3, #0
 8009a52:	61fb      	str	r3, [r7, #28]
 8009a54:	e012      	b.n	8009a7c <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	7819      	ldrb	r1, [r3, #0]
 8009a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	4413      	add	r3, r2
 8009a64:	3334      	adds	r3, #52	; 0x34
 8009a66:	460a      	mov	r2, r1
 8009a68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	4413      	add	r3, r2
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d006      	beq.n	8009a84 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	61fb      	str	r3, [r7, #28]
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	2b0f      	cmp	r3, #15
 8009a80:	d9e9      	bls.n	8009a56 <prvInitialiseNewTask+0x68>
 8009a82:	e000      	b.n	8009a86 <prvInitialiseNewTask+0x98>
			{
				break;
 8009a84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a8e:	e003      	b.n	8009a98 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	2b37      	cmp	r3, #55	; 0x37
 8009a9c:	d901      	bls.n	8009aa2 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a9e:	2337      	movs	r3, #55	; 0x37
 8009aa0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aac:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe ff7d 	bl	80089b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	3318      	adds	r3, #24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe ff78 	bl	80089b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009acc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009adc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	68f9      	ldr	r1, [r7, #12]
 8009af6:	69b8      	ldr	r0, [r7, #24]
 8009af8:	f001 fc64 	bl	800b3c4 <pxPortInitialiseStack>
 8009afc:	4602      	mov	r2, r0
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d002      	beq.n	8009b0e <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b0e:	bf00      	nop
 8009b10:	3720      	adds	r7, #32
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b20:	f001 fd74 	bl	800b60c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b24:	4b2d      	ldr	r3, [pc, #180]	; (8009bdc <prvAddNewTaskToReadyList+0xc4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	4a2c      	ldr	r2, [pc, #176]	; (8009bdc <prvAddNewTaskToReadyList+0xc4>)
 8009b2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b2e:	4b2c      	ldr	r3, [pc, #176]	; (8009be0 <prvAddNewTaskToReadyList+0xc8>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d109      	bne.n	8009b4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b36:	4a2a      	ldr	r2, [pc, #168]	; (8009be0 <prvAddNewTaskToReadyList+0xc8>)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b3c:	4b27      	ldr	r3, [pc, #156]	; (8009bdc <prvAddNewTaskToReadyList+0xc4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d110      	bne.n	8009b66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b44:	f000 fc26 	bl	800a394 <prvInitialiseTaskLists>
 8009b48:	e00d      	b.n	8009b66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b4a:	4b26      	ldr	r3, [pc, #152]	; (8009be4 <prvAddNewTaskToReadyList+0xcc>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b52:	4b23      	ldr	r3, [pc, #140]	; (8009be0 <prvAddNewTaskToReadyList+0xc8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d802      	bhi.n	8009b66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b60:	4a1f      	ldr	r2, [pc, #124]	; (8009be0 <prvAddNewTaskToReadyList+0xc8>)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b66:	4b20      	ldr	r3, [pc, #128]	; (8009be8 <prvAddNewTaskToReadyList+0xd0>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	4a1e      	ldr	r2, [pc, #120]	; (8009be8 <prvAddNewTaskToReadyList+0xd0>)
 8009b6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b70:	4b1d      	ldr	r3, [pc, #116]	; (8009be8 <prvAddNewTaskToReadyList+0xd0>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <prvAddNewTaskToReadyList+0xd4>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d903      	bls.n	8009b8c <prvAddNewTaskToReadyList+0x74>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b88:	4a18      	ldr	r2, [pc, #96]	; (8009bec <prvAddNewTaskToReadyList+0xd4>)
 8009b8a:	6013      	str	r3, [r2, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b90:	4613      	mov	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4a15      	ldr	r2, [pc, #84]	; (8009bf0 <prvAddNewTaskToReadyList+0xd8>)
 8009b9a:	441a      	add	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	f7fe ff15 	bl	80089d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ba8:	f001 fd5e 	bl	800b668 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009bac:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <prvAddNewTaskToReadyList+0xcc>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00e      	beq.n	8009bd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <prvAddNewTaskToReadyList+0xc8>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d207      	bcs.n	8009bd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	; (8009bf4 <prvAddNewTaskToReadyList+0xdc>)
 8009bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20001038 	.word	0x20001038
 8009be0:	20000b64 	.word	0x20000b64
 8009be4:	20001044 	.word	0x20001044
 8009be8:	20001054 	.word	0x20001054
 8009bec:	20001040 	.word	0x20001040
 8009bf0:	20000b68 	.word	0x20000b68
 8009bf4:	e000ed04 	.word	0xe000ed04

08009bf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d016      	beq.n	8009c38 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c0a:	4b13      	ldr	r3, [pc, #76]	; (8009c58 <vTaskDelay+0x60>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d009      	beq.n	8009c26 <vTaskDelay+0x2e>
 8009c12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	60bb      	str	r3, [r7, #8]
 8009c24:	e7fe      	b.n	8009c24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009c26:	f000 f881 	bl	8009d2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 f82f 	bl	800ac90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c32:	f000 f889 	bl	8009d48 <xTaskResumeAll>
 8009c36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d107      	bne.n	8009c4e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009c3e:	4b07      	ldr	r3, [pc, #28]	; (8009c5c <vTaskDelay+0x64>)
 8009c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c4e:	bf00      	nop
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20001060 	.word	0x20001060
 8009c5c:	e000ed04 	.word	0xe000ed04

08009c60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b08a      	sub	sp, #40	; 0x28
 8009c64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c6e:	463a      	mov	r2, r7
 8009c70:	1d39      	adds	r1, r7, #4
 8009c72:	f107 0308 	add.w	r3, r7, #8
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fe4a 	bl	8008910 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	9202      	str	r2, [sp, #8]
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	2300      	movs	r3, #0
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	460a      	mov	r2, r1
 8009c8e:	4921      	ldr	r1, [pc, #132]	; (8009d14 <vTaskStartScheduler+0xb4>)
 8009c90:	4821      	ldr	r0, [pc, #132]	; (8009d18 <vTaskStartScheduler+0xb8>)
 8009c92:	f7ff fe0d 	bl	80098b0 <xTaskCreateStatic>
 8009c96:	4602      	mov	r2, r0
 8009c98:	4b20      	ldr	r3, [pc, #128]	; (8009d1c <vTaskStartScheduler+0xbc>)
 8009c9a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c9c:	4b1f      	ldr	r3, [pc, #124]	; (8009d1c <vTaskStartScheduler+0xbc>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	e001      	b.n	8009cae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d102      	bne.n	8009cba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009cb4:	f001 f840 	bl	800ad38 <xTimerCreateTimerTask>
 8009cb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d117      	bne.n	8009cf0 <vTaskStartScheduler+0x90>
 8009cc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cd2:	4b13      	ldr	r3, [pc, #76]	; (8009d20 <vTaskStartScheduler+0xc0>)
 8009cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cda:	4b12      	ldr	r3, [pc, #72]	; (8009d24 <vTaskStartScheduler+0xc4>)
 8009cdc:	2201      	movs	r2, #1
 8009cde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <vTaskStartScheduler+0xc8>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009ce6:	f7f6 fe91 	bl	8000a0c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cea:	f001 fbf1 	bl	800b4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cee:	e00d      	b.n	8009d0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf6:	d109      	bne.n	8009d0c <vTaskStartScheduler+0xac>
 8009cf8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	e7fe      	b.n	8009d0a <vTaskStartScheduler+0xaa>
}
 8009d0c:	bf00      	nop
 8009d0e:	3718      	adds	r7, #24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	0800c680 	.word	0x0800c680
 8009d18:	0800a365 	.word	0x0800a365
 8009d1c:	2000105c 	.word	0x2000105c
 8009d20:	20001058 	.word	0x20001058
 8009d24:	20001044 	.word	0x20001044
 8009d28:	2000103c 	.word	0x2000103c

08009d2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <vTaskSuspendAll+0x18>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3301      	adds	r3, #1
 8009d36:	4a03      	ldr	r2, [pc, #12]	; (8009d44 <vTaskSuspendAll+0x18>)
 8009d38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009d3a:	bf00      	nop
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	20001060 	.word	0x20001060

08009d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d56:	4b41      	ldr	r3, [pc, #260]	; (8009e5c <xTaskResumeAll+0x114>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d109      	bne.n	8009d72 <xTaskResumeAll+0x2a>
 8009d5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	e7fe      	b.n	8009d70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d72:	f001 fc4b 	bl	800b60c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d76:	4b39      	ldr	r3, [pc, #228]	; (8009e5c <xTaskResumeAll+0x114>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	4a37      	ldr	r2, [pc, #220]	; (8009e5c <xTaskResumeAll+0x114>)
 8009d7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d80:	4b36      	ldr	r3, [pc, #216]	; (8009e5c <xTaskResumeAll+0x114>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d162      	bne.n	8009e4e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d88:	4b35      	ldr	r3, [pc, #212]	; (8009e60 <xTaskResumeAll+0x118>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d05e      	beq.n	8009e4e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d90:	e02f      	b.n	8009df2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d92:	4b34      	ldr	r3, [pc, #208]	; (8009e64 <xTaskResumeAll+0x11c>)
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3318      	adds	r3, #24
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fe74 	bl	8008a8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3304      	adds	r3, #4
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fe fe6f 	bl	8008a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db2:	4b2d      	ldr	r3, [pc, #180]	; (8009e68 <xTaskResumeAll+0x120>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d903      	bls.n	8009dc2 <xTaskResumeAll+0x7a>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	4a2a      	ldr	r2, [pc, #168]	; (8009e68 <xTaskResumeAll+0x120>)
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4a27      	ldr	r2, [pc, #156]	; (8009e6c <xTaskResumeAll+0x124>)
 8009dd0:	441a      	add	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4610      	mov	r0, r2
 8009dda:	f7fe fdfa 	bl	80089d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de2:	4b23      	ldr	r3, [pc, #140]	; (8009e70 <xTaskResumeAll+0x128>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d302      	bcc.n	8009df2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009dec:	4b21      	ldr	r3, [pc, #132]	; (8009e74 <xTaskResumeAll+0x12c>)
 8009dee:	2201      	movs	r2, #1
 8009df0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009df2:	4b1c      	ldr	r3, [pc, #112]	; (8009e64 <xTaskResumeAll+0x11c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1cb      	bne.n	8009d92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e00:	f000 fb62 	bl	800a4c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009e04:	4b1c      	ldr	r3, [pc, #112]	; (8009e78 <xTaskResumeAll+0x130>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d010      	beq.n	8009e32 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e10:	f000 f846 	bl	8009ea0 <xTaskIncrementTick>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009e1a:	4b16      	ldr	r3, [pc, #88]	; (8009e74 <xTaskResumeAll+0x12c>)
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1f1      	bne.n	8009e10 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009e2c:	4b12      	ldr	r3, [pc, #72]	; (8009e78 <xTaskResumeAll+0x130>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e32:	4b10      	ldr	r3, [pc, #64]	; (8009e74 <xTaskResumeAll+0x12c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d009      	beq.n	8009e4e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <xTaskResumeAll+0x134>)
 8009e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e4e:	f001 fc0b 	bl	800b668 <vPortExitCritical>

	return xAlreadyYielded;
 8009e52:	68bb      	ldr	r3, [r7, #8]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	20001060 	.word	0x20001060
 8009e60:	20001038 	.word	0x20001038
 8009e64:	20000ff8 	.word	0x20000ff8
 8009e68:	20001040 	.word	0x20001040
 8009e6c:	20000b68 	.word	0x20000b68
 8009e70:	20000b64 	.word	0x20000b64
 8009e74:	2000104c 	.word	0x2000104c
 8009e78:	20001048 	.word	0x20001048
 8009e7c:	e000ed04 	.word	0xe000ed04

08009e80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e86:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <xTaskGetTickCount+0x1c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e8c:	687b      	ldr	r3, [r7, #4]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	2000103c 	.word	0x2000103c

08009ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eaa:	4b4e      	ldr	r3, [pc, #312]	; (8009fe4 <xTaskIncrementTick+0x144>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f040 8088 	bne.w	8009fc4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009eb4:	4b4c      	ldr	r3, [pc, #304]	; (8009fe8 <xTaskIncrementTick+0x148>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ebc:	4a4a      	ldr	r2, [pc, #296]	; (8009fe8 <xTaskIncrementTick+0x148>)
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d11f      	bne.n	8009f08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ec8:	4b48      	ldr	r3, [pc, #288]	; (8009fec <xTaskIncrementTick+0x14c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d009      	beq.n	8009ee6 <xTaskIncrementTick+0x46>
 8009ed2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	e7fe      	b.n	8009ee4 <xTaskIncrementTick+0x44>
 8009ee6:	4b41      	ldr	r3, [pc, #260]	; (8009fec <xTaskIncrementTick+0x14c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	4b40      	ldr	r3, [pc, #256]	; (8009ff0 <xTaskIncrementTick+0x150>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a3e      	ldr	r2, [pc, #248]	; (8009fec <xTaskIncrementTick+0x14c>)
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	4a3e      	ldr	r2, [pc, #248]	; (8009ff0 <xTaskIncrementTick+0x150>)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6013      	str	r3, [r2, #0]
 8009efa:	4b3e      	ldr	r3, [pc, #248]	; (8009ff4 <xTaskIncrementTick+0x154>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3301      	adds	r3, #1
 8009f00:	4a3c      	ldr	r2, [pc, #240]	; (8009ff4 <xTaskIncrementTick+0x154>)
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	f000 fae0 	bl	800a4c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f08:	4b3b      	ldr	r3, [pc, #236]	; (8009ff8 <xTaskIncrementTick+0x158>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d349      	bcc.n	8009fa6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f12:	4b36      	ldr	r3, [pc, #216]	; (8009fec <xTaskIncrementTick+0x14c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d104      	bne.n	8009f26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f1c:	4b36      	ldr	r3, [pc, #216]	; (8009ff8 <xTaskIncrementTick+0x158>)
 8009f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f22:	601a      	str	r2, [r3, #0]
					break;
 8009f24:	e03f      	b.n	8009fa6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f26:	4b31      	ldr	r3, [pc, #196]	; (8009fec <xTaskIncrementTick+0x14c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d203      	bcs.n	8009f46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f3e:	4a2e      	ldr	r2, [pc, #184]	; (8009ff8 <xTaskIncrementTick+0x158>)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f44:	e02f      	b.n	8009fa6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fd9e 	bl	8008a8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	3318      	adds	r3, #24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe fd95 	bl	8008a8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f66:	4b25      	ldr	r3, [pc, #148]	; (8009ffc <xTaskIncrementTick+0x15c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d903      	bls.n	8009f76 <xTaskIncrementTick+0xd6>
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f72:	4a22      	ldr	r2, [pc, #136]	; (8009ffc <xTaskIncrementTick+0x15c>)
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4a1f      	ldr	r2, [pc, #124]	; (800a000 <xTaskIncrementTick+0x160>)
 8009f84:	441a      	add	r2, r3
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f7fe fd20 	bl	80089d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f96:	4b1b      	ldr	r3, [pc, #108]	; (800a004 <xTaskIncrementTick+0x164>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d3b8      	bcc.n	8009f12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fa4:	e7b5      	b.n	8009f12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009fa6:	4b17      	ldr	r3, [pc, #92]	; (800a004 <xTaskIncrementTick+0x164>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fac:	4914      	ldr	r1, [pc, #80]	; (800a000 <xTaskIncrementTick+0x160>)
 8009fae:	4613      	mov	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	440b      	add	r3, r1
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d907      	bls.n	8009fce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	e004      	b.n	8009fce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009fc4:	4b10      	ldr	r3, [pc, #64]	; (800a008 <xTaskIncrementTick+0x168>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	4a0f      	ldr	r2, [pc, #60]	; (800a008 <xTaskIncrementTick+0x168>)
 8009fcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009fce:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <xTaskIncrementTick+0x16c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009fda:	697b      	ldr	r3, [r7, #20]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20001060 	.word	0x20001060
 8009fe8:	2000103c 	.word	0x2000103c
 8009fec:	20000ff0 	.word	0x20000ff0
 8009ff0:	20000ff4 	.word	0x20000ff4
 8009ff4:	20001050 	.word	0x20001050
 8009ff8:	20001058 	.word	0x20001058
 8009ffc:	20001040 	.word	0x20001040
 800a000:	20000b68 	.word	0x20000b68
 800a004:	20000b64 	.word	0x20000b64
 800a008:	20001048 	.word	0x20001048
 800a00c:	2000104c 	.word	0x2000104c

0800a010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a016:	4b33      	ldr	r3, [pc, #204]	; (800a0e4 <vTaskSwitchContext+0xd4>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a01e:	4b32      	ldr	r3, [pc, #200]	; (800a0e8 <vTaskSwitchContext+0xd8>)
 800a020:	2201      	movs	r2, #1
 800a022:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a024:	e059      	b.n	800a0da <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 800a026:	4b30      	ldr	r3, [pc, #192]	; (800a0e8 <vTaskSwitchContext+0xd8>)
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a02c:	f7f6 fcf5 	bl	8000a1a <getRunTimeCounterValue>
 800a030:	4602      	mov	r2, r0
 800a032:	4b2e      	ldr	r3, [pc, #184]	; (800a0ec <vTaskSwitchContext+0xdc>)
 800a034:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a036:	4b2d      	ldr	r3, [pc, #180]	; (800a0ec <vTaskSwitchContext+0xdc>)
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	4b2d      	ldr	r3, [pc, #180]	; (800a0f0 <vTaskSwitchContext+0xe0>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d909      	bls.n	800a056 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a042:	4b2c      	ldr	r3, [pc, #176]	; (800a0f4 <vTaskSwitchContext+0xe4>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800a048:	4a28      	ldr	r2, [pc, #160]	; (800a0ec <vTaskSwitchContext+0xdc>)
 800a04a:	6810      	ldr	r0, [r2, #0]
 800a04c:	4a28      	ldr	r2, [pc, #160]	; (800a0f0 <vTaskSwitchContext+0xe0>)
 800a04e:	6812      	ldr	r2, [r2, #0]
 800a050:	1a82      	subs	r2, r0, r2
 800a052:	440a      	add	r2, r1
 800a054:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a056:	4b25      	ldr	r3, [pc, #148]	; (800a0ec <vTaskSwitchContext+0xdc>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a25      	ldr	r2, [pc, #148]	; (800a0f0 <vTaskSwitchContext+0xe0>)
 800a05c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a05e:	4b26      	ldr	r3, [pc, #152]	; (800a0f8 <vTaskSwitchContext+0xe8>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e00f      	b.n	800a086 <vTaskSwitchContext+0x76>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d109      	bne.n	800a080 <vTaskSwitchContext+0x70>
 800a06c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	607b      	str	r3, [r7, #4]
 800a07e:	e7fe      	b.n	800a07e <vTaskSwitchContext+0x6e>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3b01      	subs	r3, #1
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	491d      	ldr	r1, [pc, #116]	; (800a0fc <vTaskSwitchContext+0xec>)
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	440b      	add	r3, r1
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d0e5      	beq.n	800a066 <vTaskSwitchContext+0x56>
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	4613      	mov	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4a15      	ldr	r2, [pc, #84]	; (800a0fc <vTaskSwitchContext+0xec>)
 800a0a6:	4413      	add	r3, r2
 800a0a8:	60bb      	str	r3, [r7, #8]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	605a      	str	r2, [r3, #4]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d104      	bne.n	800a0ca <vTaskSwitchContext+0xba>
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	605a      	str	r2, [r3, #4]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	4a08      	ldr	r2, [pc, #32]	; (800a0f4 <vTaskSwitchContext+0xe4>)
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	4a08      	ldr	r2, [pc, #32]	; (800a0f8 <vTaskSwitchContext+0xe8>)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6013      	str	r3, [r2, #0]
}
 800a0da:	bf00      	nop
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20001060 	.word	0x20001060
 800a0e8:	2000104c 	.word	0x2000104c
 800a0ec:	20001068 	.word	0x20001068
 800a0f0:	20001064 	.word	0x20001064
 800a0f4:	20000b64 	.word	0x20000b64
 800a0f8:	20001040 	.word	0x20001040
 800a0fc:	20000b68 	.word	0x20000b68

0800a100 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d109      	bne.n	800a124 <vTaskPlaceOnEventList+0x24>
 800a110:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	e7fe      	b.n	800a122 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a124:	4b07      	ldr	r3, [pc, #28]	; (800a144 <vTaskPlaceOnEventList+0x44>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3318      	adds	r3, #24
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7fe fc74 	bl	8008a1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a132:	2101      	movs	r1, #1
 800a134:	6838      	ldr	r0, [r7, #0]
 800a136:	f000 fdab 	bl	800ac90 <prvAddCurrentTaskToDelayedList>
}
 800a13a:	bf00      	nop
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20000b64 	.word	0x20000b64

0800a148 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d109      	bne.n	800a16e <vTaskPlaceOnEventListRestricted+0x26>
 800a15a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	e7fe      	b.n	800a16c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a16e:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <vTaskPlaceOnEventListRestricted+0x50>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3318      	adds	r3, #24
 800a174:	4619      	mov	r1, r3
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7fe fc2b 	bl	80089d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d002      	beq.n	800a188 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a182:	f04f 33ff 	mov.w	r3, #4294967295
 800a186:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a188:	6879      	ldr	r1, [r7, #4]
 800a18a:	68b8      	ldr	r0, [r7, #8]
 800a18c:	f000 fd80 	bl	800ac90 <prvAddCurrentTaskToDelayedList>
	}
 800a190:	bf00      	nop
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20000b64 	.word	0x20000b64

0800a19c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d109      	bne.n	800a1c6 <xTaskRemoveFromEventList+0x2a>
 800a1b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e7fe      	b.n	800a1c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	3318      	adds	r3, #24
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fc5e 	bl	8008a8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1d0:	4b1d      	ldr	r3, [pc, #116]	; (800a248 <xTaskRemoveFromEventList+0xac>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d11d      	bne.n	800a214 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe fc55 	bl	8008a8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e6:	4b19      	ldr	r3, [pc, #100]	; (800a24c <xTaskRemoveFromEventList+0xb0>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d903      	bls.n	800a1f6 <xTaskRemoveFromEventList+0x5a>
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f2:	4a16      	ldr	r2, [pc, #88]	; (800a24c <xTaskRemoveFromEventList+0xb0>)
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4a13      	ldr	r2, [pc, #76]	; (800a250 <xTaskRemoveFromEventList+0xb4>)
 800a204:	441a      	add	r2, r3
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	3304      	adds	r3, #4
 800a20a:	4619      	mov	r1, r3
 800a20c:	4610      	mov	r0, r2
 800a20e:	f7fe fbe0 	bl	80089d2 <vListInsertEnd>
 800a212:	e005      	b.n	800a220 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	3318      	adds	r3, #24
 800a218:	4619      	mov	r1, r3
 800a21a:	480e      	ldr	r0, [pc, #56]	; (800a254 <xTaskRemoveFromEventList+0xb8>)
 800a21c:	f7fe fbd9 	bl	80089d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a224:	4b0c      	ldr	r3, [pc, #48]	; (800a258 <xTaskRemoveFromEventList+0xbc>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d905      	bls.n	800a23a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a22e:	2301      	movs	r3, #1
 800a230:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a232:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <xTaskRemoveFromEventList+0xc0>)
 800a234:	2201      	movs	r2, #1
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	e001      	b.n	800a23e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a23e:	697b      	ldr	r3, [r7, #20]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20001060 	.word	0x20001060
 800a24c:	20001040 	.word	0x20001040
 800a250:	20000b68 	.word	0x20000b68
 800a254:	20000ff8 	.word	0x20000ff8
 800a258:	20000b64 	.word	0x20000b64
 800a25c:	2000104c 	.word	0x2000104c

0800a260 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a268:	4b06      	ldr	r3, [pc, #24]	; (800a284 <vTaskInternalSetTimeOutState+0x24>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a270:	4b05      	ldr	r3, [pc, #20]	; (800a288 <vTaskInternalSetTimeOutState+0x28>)
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	605a      	str	r2, [r3, #4]
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	20001050 	.word	0x20001050
 800a288:	2000103c 	.word	0x2000103c

0800a28c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d109      	bne.n	800a2b0 <xTaskCheckForTimeOut+0x24>
 800a29c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	613b      	str	r3, [r7, #16]
 800a2ae:	e7fe      	b.n	800a2ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d109      	bne.n	800a2ca <xTaskCheckForTimeOut+0x3e>
 800a2b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	e7fe      	b.n	800a2c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a2ca:	f001 f99f 	bl	800b60c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a2ce:	4b1d      	ldr	r3, [pc, #116]	; (800a344 <xTaskCheckForTimeOut+0xb8>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e6:	d102      	bne.n	800a2ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61fb      	str	r3, [r7, #28]
 800a2ec:	e023      	b.n	800a336 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	4b15      	ldr	r3, [pc, #84]	; (800a348 <xTaskCheckForTimeOut+0xbc>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d007      	beq.n	800a30a <xTaskCheckForTimeOut+0x7e>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	429a      	cmp	r2, r3
 800a302:	d302      	bcc.n	800a30a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	61fb      	str	r3, [r7, #28]
 800a308:	e015      	b.n	800a336 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	429a      	cmp	r2, r3
 800a312:	d20b      	bcs.n	800a32c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	1ad2      	subs	r2, r2, r3
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff ff9d 	bl	800a260 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a326:	2300      	movs	r3, #0
 800a328:	61fb      	str	r3, [r7, #28]
 800a32a:	e004      	b.n	800a336 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a332:	2301      	movs	r3, #1
 800a334:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a336:	f001 f997 	bl	800b668 <vPortExitCritical>

	return xReturn;
 800a33a:	69fb      	ldr	r3, [r7, #28]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3720      	adds	r7, #32
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	2000103c 	.word	0x2000103c
 800a348:	20001050 	.word	0x20001050

0800a34c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a350:	4b03      	ldr	r3, [pc, #12]	; (800a360 <vTaskMissedYield+0x14>)
 800a352:	2201      	movs	r2, #1
 800a354:	601a      	str	r2, [r3, #0]
}
 800a356:	bf00      	nop
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	2000104c 	.word	0x2000104c

0800a364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a36c:	f000 f852 	bl	800a414 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a370:	4b06      	ldr	r3, [pc, #24]	; (800a38c <prvIdleTask+0x28>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d9f9      	bls.n	800a36c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a378:	4b05      	ldr	r3, [pc, #20]	; (800a390 <prvIdleTask+0x2c>)
 800a37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a388:	e7f0      	b.n	800a36c <prvIdleTask+0x8>
 800a38a:	bf00      	nop
 800a38c:	20000b68 	.word	0x20000b68
 800a390:	e000ed04 	.word	0xe000ed04

0800a394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a39a:	2300      	movs	r3, #0
 800a39c:	607b      	str	r3, [r7, #4]
 800a39e:	e00c      	b.n	800a3ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4a12      	ldr	r2, [pc, #72]	; (800a3f4 <prvInitialiseTaskLists+0x60>)
 800a3ac:	4413      	add	r3, r2
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fae2 	bl	8008978 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b37      	cmp	r3, #55	; 0x37
 800a3be:	d9ef      	bls.n	800a3a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3c0:	480d      	ldr	r0, [pc, #52]	; (800a3f8 <prvInitialiseTaskLists+0x64>)
 800a3c2:	f7fe fad9 	bl	8008978 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3c6:	480d      	ldr	r0, [pc, #52]	; (800a3fc <prvInitialiseTaskLists+0x68>)
 800a3c8:	f7fe fad6 	bl	8008978 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3cc:	480c      	ldr	r0, [pc, #48]	; (800a400 <prvInitialiseTaskLists+0x6c>)
 800a3ce:	f7fe fad3 	bl	8008978 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3d2:	480c      	ldr	r0, [pc, #48]	; (800a404 <prvInitialiseTaskLists+0x70>)
 800a3d4:	f7fe fad0 	bl	8008978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3d8:	480b      	ldr	r0, [pc, #44]	; (800a408 <prvInitialiseTaskLists+0x74>)
 800a3da:	f7fe facd 	bl	8008978 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3de:	4b0b      	ldr	r3, [pc, #44]	; (800a40c <prvInitialiseTaskLists+0x78>)
 800a3e0:	4a05      	ldr	r2, [pc, #20]	; (800a3f8 <prvInitialiseTaskLists+0x64>)
 800a3e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3e4:	4b0a      	ldr	r3, [pc, #40]	; (800a410 <prvInitialiseTaskLists+0x7c>)
 800a3e6:	4a05      	ldr	r2, [pc, #20]	; (800a3fc <prvInitialiseTaskLists+0x68>)
 800a3e8:	601a      	str	r2, [r3, #0]
}
 800a3ea:	bf00      	nop
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20000b68 	.word	0x20000b68
 800a3f8:	20000fc8 	.word	0x20000fc8
 800a3fc:	20000fdc 	.word	0x20000fdc
 800a400:	20000ff8 	.word	0x20000ff8
 800a404:	2000100c 	.word	0x2000100c
 800a408:	20001024 	.word	0x20001024
 800a40c:	20000ff0 	.word	0x20000ff0
 800a410:	20000ff4 	.word	0x20000ff4

0800a414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a41a:	e019      	b.n	800a450 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a41c:	f001 f8f6 	bl	800b60c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a420:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <prvCheckTasksWaitingTermination+0x4c>)
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3304      	adds	r3, #4
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fe fb2d 	bl	8008a8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a432:	4b0c      	ldr	r3, [pc, #48]	; (800a464 <prvCheckTasksWaitingTermination+0x50>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3b01      	subs	r3, #1
 800a438:	4a0a      	ldr	r2, [pc, #40]	; (800a464 <prvCheckTasksWaitingTermination+0x50>)
 800a43a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a43c:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <prvCheckTasksWaitingTermination+0x54>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	3b01      	subs	r3, #1
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <prvCheckTasksWaitingTermination+0x54>)
 800a444:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a446:	f001 f90f 	bl	800b668 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f80e 	bl	800a46c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a450:	4b05      	ldr	r3, [pc, #20]	; (800a468 <prvCheckTasksWaitingTermination+0x54>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1e1      	bne.n	800a41c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	2000100c 	.word	0x2000100c
 800a464:	20001038 	.word	0x20001038
 800a468:	20001020 	.word	0x20001020

0800a46c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d108      	bne.n	800a490 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	4618      	mov	r0, r3
 800a484:	f001 fa9e 	bl	800b9c4 <vPortFree>
				vPortFree( pxTCB );
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 fa9b 	bl	800b9c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a48e:	e017      	b.n	800a4c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a496:	2b01      	cmp	r3, #1
 800a498:	d103      	bne.n	800a4a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f001 fa92 	bl	800b9c4 <vPortFree>
	}
 800a4a0:	e00e      	b.n	800a4c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d009      	beq.n	800a4c0 <prvDeleteTCB+0x54>
 800a4ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	e7fe      	b.n	800a4be <prvDeleteTCB+0x52>
	}
 800a4c0:	bf00      	nop
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ce:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <prvResetNextTaskUnblockTime+0x38>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d104      	bne.n	800a4e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4d8:	4b0a      	ldr	r3, [pc, #40]	; (800a504 <prvResetNextTaskUnblockTime+0x3c>)
 800a4da:	f04f 32ff 	mov.w	r2, #4294967295
 800a4de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4e0:	e008      	b.n	800a4f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e2:	4b07      	ldr	r3, [pc, #28]	; (800a500 <prvResetNextTaskUnblockTime+0x38>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	4a04      	ldr	r2, [pc, #16]	; (800a504 <prvResetNextTaskUnblockTime+0x3c>)
 800a4f2:	6013      	str	r3, [r2, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	20000ff0 	.word	0x20000ff0
 800a504:	20001058 	.word	0x20001058

0800a508 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a50e:	4b05      	ldr	r3, [pc, #20]	; (800a524 <xTaskGetCurrentTaskHandle+0x1c>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a514:	687b      	ldr	r3, [r7, #4]
	}
 800a516:	4618      	mov	r0, r3
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	20000b64 	.word	0x20000b64

0800a528 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a52e:	4b0b      	ldr	r3, [pc, #44]	; (800a55c <xTaskGetSchedulerState+0x34>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d102      	bne.n	800a53c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a536:	2301      	movs	r3, #1
 800a538:	607b      	str	r3, [r7, #4]
 800a53a:	e008      	b.n	800a54e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a53c:	4b08      	ldr	r3, [pc, #32]	; (800a560 <xTaskGetSchedulerState+0x38>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d102      	bne.n	800a54a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a544:	2302      	movs	r3, #2
 800a546:	607b      	str	r3, [r7, #4]
 800a548:	e001      	b.n	800a54e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a54a:	2300      	movs	r3, #0
 800a54c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a54e:	687b      	ldr	r3, [r7, #4]
	}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	20001044 	.word	0x20001044
 800a560:	20001060 	.word	0x20001060

0800a564 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a570:	2300      	movs	r3, #0
 800a572:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d051      	beq.n	800a61e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57e:	4b2a      	ldr	r3, [pc, #168]	; (800a628 <xTaskPriorityInherit+0xc4>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a584:	429a      	cmp	r2, r3
 800a586:	d241      	bcs.n	800a60c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	db06      	blt.n	800a59e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a590:	4b25      	ldr	r3, [pc, #148]	; (800a628 <xTaskPriorityInherit+0xc4>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a596:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	6959      	ldr	r1, [r3, #20]
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4a1f      	ldr	r2, [pc, #124]	; (800a62c <xTaskPriorityInherit+0xc8>)
 800a5b0:	4413      	add	r3, r2
 800a5b2:	4299      	cmp	r1, r3
 800a5b4:	d122      	bne.n	800a5fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fa66 	bl	8008a8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5c0:	4b19      	ldr	r3, [pc, #100]	; (800a628 <xTaskPriorityInherit+0xc4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ce:	4b18      	ldr	r3, [pc, #96]	; (800a630 <xTaskPriorityInherit+0xcc>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d903      	bls.n	800a5de <xTaskPriorityInherit+0x7a>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5da:	4a15      	ldr	r2, [pc, #84]	; (800a630 <xTaskPriorityInherit+0xcc>)
 800a5dc:	6013      	str	r3, [r2, #0]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4a10      	ldr	r2, [pc, #64]	; (800a62c <xTaskPriorityInherit+0xc8>)
 800a5ec:	441a      	add	r2, r3
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	f7fe f9ec 	bl	80089d2 <vListInsertEnd>
 800a5fa:	e004      	b.n	800a606 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <xTaskPriorityInherit+0xc4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a606:	2301      	movs	r3, #1
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	e008      	b.n	800a61e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a610:	4b05      	ldr	r3, [pc, #20]	; (800a628 <xTaskPriorityInherit+0xc4>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a616:	429a      	cmp	r2, r3
 800a618:	d201      	bcs.n	800a61e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a61a:	2301      	movs	r3, #1
 800a61c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a61e:	68fb      	ldr	r3, [r7, #12]
	}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20000b64 	.word	0x20000b64
 800a62c:	20000b68 	.word	0x20000b68
 800a630:	20001040 	.word	0x20001040

0800a634 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d054      	beq.n	800a6f4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a64a:	4b2d      	ldr	r3, [pc, #180]	; (800a700 <xTaskPriorityDisinherit+0xcc>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	429a      	cmp	r2, r3
 800a652:	d009      	beq.n	800a668 <xTaskPriorityDisinherit+0x34>
 800a654:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	60fb      	str	r3, [r7, #12]
 800a666:	e7fe      	b.n	800a666 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d109      	bne.n	800a684 <xTaskPriorityDisinherit+0x50>
 800a670:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	60bb      	str	r3, [r7, #8]
 800a682:	e7fe      	b.n	800a682 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a688:	1e5a      	subs	r2, r3, #1
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a696:	429a      	cmp	r2, r3
 800a698:	d02c      	beq.n	800a6f4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d128      	bne.n	800a6f4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe f9f0 	bl	8008a8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c4:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <xTaskPriorityDisinherit+0xd0>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d903      	bls.n	800a6d4 <xTaskPriorityDisinherit+0xa0>
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d0:	4a0c      	ldr	r2, [pc, #48]	; (800a704 <xTaskPriorityDisinherit+0xd0>)
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4a09      	ldr	r2, [pc, #36]	; (800a708 <xTaskPriorityDisinherit+0xd4>)
 800a6e2:	441a      	add	r2, r3
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	f7fe f971 	bl	80089d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6f4:	697b      	ldr	r3, [r7, #20]
	}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000b64 	.word	0x20000b64
 800a704:	20001040 	.word	0x20001040
 800a708:	20000b68 	.word	0x20000b68

0800a70c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a71a:	2301      	movs	r3, #1
 800a71c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d068      	beq.n	800a7f6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d109      	bne.n	800a740 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800a72c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	e7fe      	b.n	800a73e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d902      	bls.n	800a750 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	61fb      	str	r3, [r7, #28]
 800a74e:	e002      	b.n	800a756 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a754:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d04a      	beq.n	800a7f6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	429a      	cmp	r2, r3
 800a768:	d145      	bne.n	800a7f6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a76a:	4b25      	ldr	r3, [pc, #148]	; (800a800 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	429a      	cmp	r2, r3
 800a772:	d109      	bne.n	800a788 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800a774:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	60bb      	str	r3, [r7, #8]
 800a786:	e7fe      	b.n	800a786 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	69fa      	ldr	r2, [r7, #28]
 800a792:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	db04      	blt.n	800a7a6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	6959      	ldr	r1, [r3, #20]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4a13      	ldr	r2, [pc, #76]	; (800a804 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a7b6:	4413      	add	r3, r2
 800a7b8:	4299      	cmp	r1, r3
 800a7ba:	d11c      	bne.n	800a7f6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fe f963 	bl	8008a8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ca:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d903      	bls.n	800a7da <vTaskPriorityDisinheritAfterTimeout+0xce>
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d6:	4a0c      	ldr	r2, [pc, #48]	; (800a808 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7de:	4613      	mov	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4a07      	ldr	r2, [pc, #28]	; (800a804 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a7e8:	441a      	add	r2, r3
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7fe f8ee 	bl	80089d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7f6:	bf00      	nop
 800a7f8:	3720      	adds	r7, #32
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20000b64 	.word	0x20000b64
 800a804:	20000b68 	.word	0x20000b68
 800a808:	20001040 	.word	0x20001040

0800a80c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <pvTaskIncrementMutexHeldCount+0x24>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d004      	beq.n	800a822 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <pvTaskIncrementMutexHeldCount+0x24>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a81e:	3201      	adds	r2, #1
 800a820:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800a822:	4b03      	ldr	r3, [pc, #12]	; (800a830 <pvTaskIncrementMutexHeldCount+0x24>)
 800a824:	681b      	ldr	r3, [r3, #0]
	}
 800a826:	4618      	mov	r0, r3
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	20000b64 	.word	0x20000b64

0800a834 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800a83e:	f000 fee5 	bl	800b60c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a842:	4b1e      	ldr	r3, [pc, #120]	; (800a8bc <ulTaskNotifyTake+0x88>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d113      	bne.n	800a874 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a84c:	4b1b      	ldr	r3, [pc, #108]	; (800a8bc <ulTaskNotifyTake+0x88>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00b      	beq.n	800a874 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a85c:	2101      	movs	r1, #1
 800a85e:	6838      	ldr	r0, [r7, #0]
 800a860:	f000 fa16 	bl	800ac90 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a864:	4b16      	ldr	r3, [pc, #88]	; (800a8c0 <ulTaskNotifyTake+0x8c>)
 800a866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a874:	f000 fef8 	bl	800b668 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a878:	f000 fec8 	bl	800b60c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a87c:	4b0f      	ldr	r3, [pc, #60]	; (800a8bc <ulTaskNotifyTake+0x88>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a882:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00c      	beq.n	800a8a4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d004      	beq.n	800a89a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a890:	4b0a      	ldr	r3, [pc, #40]	; (800a8bc <ulTaskNotifyTake+0x88>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2200      	movs	r2, #0
 800a896:	65da      	str	r2, [r3, #92]	; 0x5c
 800a898:	e004      	b.n	800a8a4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a89a:	4b08      	ldr	r3, [pc, #32]	; (800a8bc <ulTaskNotifyTake+0x88>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	3a01      	subs	r2, #1
 800a8a2:	65da      	str	r2, [r3, #92]	; 0x5c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <ulTaskNotifyTake+0x88>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 800a8ae:	f000 fedb 	bl	800b668 <vPortExitCritical>

		return ulReturn;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
	}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20000b64 	.word	0x20000b64
 800a8c0:	e000ed04 	.word	0xe000ed04

0800a8c4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
 800a8d0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a8d2:	f000 fe9b 	bl	800b60c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a8d6:	4b26      	ldr	r3, [pc, #152]	; (800a970 <xTaskNotifyWait+0xac>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d01a      	beq.n	800a91a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a8e4:	4b22      	ldr	r3, [pc, #136]	; (800a970 <xTaskNotifyWait+0xac>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	43d2      	mvns	r2, r2
 800a8ee:	400a      	ands	r2, r1
 800a8f0:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a8f2:	4b1f      	ldr	r3, [pc, #124]	; (800a970 <xTaskNotifyWait+0xac>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00b      	beq.n	800a91a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a902:	2101      	movs	r1, #1
 800a904:	6838      	ldr	r0, [r7, #0]
 800a906:	f000 f9c3 	bl	800ac90 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a90a:	4b1a      	ldr	r3, [pc, #104]	; (800a974 <xTaskNotifyWait+0xb0>)
 800a90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a91a:	f000 fea5 	bl	800b668 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a91e:	f000 fe75 	bl	800b60c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d004      	beq.n	800a932 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a928:	4b11      	ldr	r3, [pc, #68]	; (800a970 <xTaskNotifyWait+0xac>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a932:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <xTaskNotifyWait+0xac>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d002      	beq.n	800a946 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e008      	b.n	800a958 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a946:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <xTaskNotifyWait+0xac>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	43d2      	mvns	r2, r2
 800a950:	400a      	ands	r2, r1
 800a952:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 800a954:	2301      	movs	r3, #1
 800a956:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a958:	4b05      	ldr	r3, [pc, #20]	; (800a970 <xTaskNotifyWait+0xac>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 800a962:	f000 fe81 	bl	800b668 <vPortExitCritical>

		return xReturn;
 800a966:	697b      	ldr	r3, [r7, #20]
	}
 800a968:	4618      	mov	r0, r3
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	20000b64 	.word	0x20000b64
 800a974:	e000ed04 	.word	0xe000ed04

0800a978 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	; 0x28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	4613      	mov	r3, r2
 800a986:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a988:	2301      	movs	r3, #1
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d109      	bne.n	800a9a6 <xTaskGenericNotify+0x2e>
 800a992:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	61bb      	str	r3, [r7, #24]
 800a9a4:	e7fe      	b.n	800a9a4 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a9aa:	f000 fe2f 	bl	800b60c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a9c2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d827      	bhi.n	800aa22 <xTaskGenericNotify+0xaa>
 800a9d2:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <xTaskGenericNotify+0x60>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800aa41 	.word	0x0800aa41
 800a9dc:	0800a9ed 	.word	0x0800a9ed
 800a9e0:	0800a9fb 	.word	0x0800a9fb
 800a9e4:	0800aa07 	.word	0x0800aa07
 800a9e8:	0800aa0f 	.word	0x0800aa0f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	431a      	orrs	r2, r3
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800a9f8:	e025      	b.n	800aa46 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9fe:	1c5a      	adds	r2, r3, #1
 800aa00:	6a3b      	ldr	r3, [r7, #32]
 800aa02:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800aa04:	e01f      	b.n	800aa46 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800aa0c:	e01b      	b.n	800aa46 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800aa0e:	7ffb      	ldrb	r3, [r7, #31]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d003      	beq.n	800aa1c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800aa1a:	e014      	b.n	800aa46 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800aa20:	e011      	b.n	800aa46 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2a:	d00b      	beq.n	800aa44 <xTaskGenericNotify+0xcc>
 800aa2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	617b      	str	r3, [r7, #20]
 800aa3e:	e7fe      	b.n	800aa3e <xTaskGenericNotify+0xc6>
					break;
 800aa40:	bf00      	nop
 800aa42:	e000      	b.n	800aa46 <xTaskGenericNotify+0xce>

					break;
 800aa44:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800aa46:	7ffb      	ldrb	r3, [r7, #31]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d139      	bne.n	800aac0 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fe f81b 	bl	8008a8c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5a:	4b1d      	ldr	r3, [pc, #116]	; (800aad0 <xTaskGenericNotify+0x158>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d903      	bls.n	800aa6a <xTaskGenericNotify+0xf2>
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa66:	4a1a      	ldr	r2, [pc, #104]	; (800aad0 <xTaskGenericNotify+0x158>)
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4a17      	ldr	r2, [pc, #92]	; (800aad4 <xTaskGenericNotify+0x15c>)
 800aa78:	441a      	add	r2, r3
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4610      	mov	r0, r2
 800aa82:	f7fd ffa6 	bl	80089d2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d009      	beq.n	800aaa2 <xTaskGenericNotify+0x12a>
 800aa8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	e7fe      	b.n	800aaa0 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa6:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <xTaskGenericNotify+0x160>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d907      	bls.n	800aac0 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <xTaskGenericNotify+0x164>)
 800aab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800aac0:	f000 fdd2 	bl	800b668 <vPortExitCritical>

		return xReturn;
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3728      	adds	r7, #40	; 0x28
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20001040 	.word	0x20001040
 800aad4:	20000b68 	.word	0x20000b68
 800aad8:	20000b64 	.word	0x20000b64
 800aadc:	e000ed04 	.word	0xe000ed04

0800aae0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08e      	sub	sp, #56	; 0x38
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	4613      	mov	r3, r2
 800aaee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d109      	bne.n	800ab0e <xTaskGenericNotifyFromISR+0x2e>
 800aafa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab0c:	e7fe      	b.n	800ab0c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab0e:	f000 fe59 	bl	800b7c4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ab16:	f3ef 8211 	mrs	r2, BASEPRI
 800ab1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	623a      	str	r2, [r7, #32]
 800ab2c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ab2e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab30:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ab46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 800ab52:	79fb      	ldrb	r3, [r7, #7]
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	d829      	bhi.n	800abac <xTaskGenericNotifyFromISR+0xcc>
 800ab58:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <xTaskGenericNotifyFromISR+0x80>)
 800ab5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5e:	bf00      	nop
 800ab60:	0800abcb 	.word	0x0800abcb
 800ab64:	0800ab75 	.word	0x0800ab75
 800ab68:	0800ab83 	.word	0x0800ab83
 800ab6c:	0800ab8f 	.word	0x0800ab8f
 800ab70:	0800ab97 	.word	0x0800ab97
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800ab80:	e026      	b.n	800abd0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab86:	1c5a      	adds	r2, r3, #1
 800ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800ab8c:	e020      	b.n	800abd0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800ab94:	e01c      	b.n	800abd0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ab96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d003      	beq.n	800aba6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800aba4:	e014      	b.n	800abd0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800abaa:	e011      	b.n	800abd0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800abac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb4:	d00b      	beq.n	800abce <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800abb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	61bb      	str	r3, [r7, #24]
 800abc8:	e7fe      	b.n	800abc8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800abca:	bf00      	nop
 800abcc:	e000      	b.n	800abd0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800abce:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800abd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d145      	bne.n	800ac64 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800abd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d009      	beq.n	800abf4 <xTaskGenericNotifyFromISR+0x114>
 800abe0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	617b      	str	r3, [r7, #20]
 800abf2:	e7fe      	b.n	800abf2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abf4:	4b20      	ldr	r3, [pc, #128]	; (800ac78 <xTaskGenericNotifyFromISR+0x198>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d11d      	bne.n	800ac38 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	3304      	adds	r3, #4
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fd ff43 	bl	8008a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0a:	4b1c      	ldr	r3, [pc, #112]	; (800ac7c <xTaskGenericNotifyFromISR+0x19c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d903      	bls.n	800ac1a <xTaskGenericNotifyFromISR+0x13a>
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac16:	4a19      	ldr	r2, [pc, #100]	; (800ac7c <xTaskGenericNotifyFromISR+0x19c>)
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4a16      	ldr	r2, [pc, #88]	; (800ac80 <xTaskGenericNotifyFromISR+0x1a0>)
 800ac28:	441a      	add	r2, r3
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f7fd fece 	bl	80089d2 <vListInsertEnd>
 800ac36:	e005      	b.n	800ac44 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	3318      	adds	r3, #24
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4811      	ldr	r0, [pc, #68]	; (800ac84 <xTaskGenericNotifyFromISR+0x1a4>)
 800ac40:	f7fd fec7 	bl	80089d2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	4b0f      	ldr	r3, [pc, #60]	; (800ac88 <xTaskGenericNotifyFromISR+0x1a8>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d908      	bls.n	800ac64 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ac52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ac58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ac5e:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <xTaskGenericNotifyFromISR+0x1ac>)
 800ac60:	2201      	movs	r2, #1
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac66:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ac6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3738      	adds	r7, #56	; 0x38
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20001060 	.word	0x20001060
 800ac7c:	20001040 	.word	0x20001040
 800ac80:	20000b68 	.word	0x20000b68
 800ac84:	20000ff8 	.word	0x20000ff8
 800ac88:	20000b64 	.word	0x20000b64
 800ac8c:	2000104c 	.word	0x2000104c

0800ac90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac9a:	4b21      	ldr	r3, [pc, #132]	; (800ad20 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aca0:	4b20      	ldr	r3, [pc, #128]	; (800ad24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fd fef0 	bl	8008a8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb2:	d10a      	bne.n	800acca <prvAddCurrentTaskToDelayedList+0x3a>
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d007      	beq.n	800acca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acba:	4b1a      	ldr	r3, [pc, #104]	; (800ad24 <prvAddCurrentTaskToDelayedList+0x94>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3304      	adds	r3, #4
 800acc0:	4619      	mov	r1, r3
 800acc2:	4819      	ldr	r0, [pc, #100]	; (800ad28 <prvAddCurrentTaskToDelayedList+0x98>)
 800acc4:	f7fd fe85 	bl	80089d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800acc8:	e026      	b.n	800ad18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4413      	add	r3, r2
 800acd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acd2:	4b14      	ldr	r3, [pc, #80]	; (800ad24 <prvAddCurrentTaskToDelayedList+0x94>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d209      	bcs.n	800acf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ace2:	4b12      	ldr	r3, [pc, #72]	; (800ad2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3304      	adds	r3, #4
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f7fd fe93 	bl	8008a1a <vListInsert>
}
 800acf4:	e010      	b.n	800ad18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acf6:	4b0e      	ldr	r3, [pc, #56]	; (800ad30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <prvAddCurrentTaskToDelayedList+0x94>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3304      	adds	r3, #4
 800ad00:	4619      	mov	r1, r3
 800ad02:	4610      	mov	r0, r2
 800ad04:	f7fd fe89 	bl	8008a1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad08:	4b0a      	ldr	r3, [pc, #40]	; (800ad34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d202      	bcs.n	800ad18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad12:	4a08      	ldr	r2, [pc, #32]	; (800ad34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	6013      	str	r3, [r2, #0]
}
 800ad18:	bf00      	nop
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	2000103c 	.word	0x2000103c
 800ad24:	20000b64 	.word	0x20000b64
 800ad28:	20001024 	.word	0x20001024
 800ad2c:	20000ff4 	.word	0x20000ff4
 800ad30:	20000ff0 	.word	0x20000ff0
 800ad34:	20001058 	.word	0x20001058

0800ad38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08a      	sub	sp, #40	; 0x28
 800ad3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad42:	f000 faff 	bl	800b344 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad46:	4b1c      	ldr	r3, [pc, #112]	; (800adb8 <xTimerCreateTimerTask+0x80>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d021      	beq.n	800ad92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad56:	1d3a      	adds	r2, r7, #4
 800ad58:	f107 0108 	add.w	r1, r7, #8
 800ad5c:	f107 030c 	add.w	r3, r7, #12
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fd fdef 	bl	8008944 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	9202      	str	r2, [sp, #8]
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	2302      	movs	r3, #2
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	2300      	movs	r3, #0
 800ad76:	460a      	mov	r2, r1
 800ad78:	4910      	ldr	r1, [pc, #64]	; (800adbc <xTimerCreateTimerTask+0x84>)
 800ad7a:	4811      	ldr	r0, [pc, #68]	; (800adc0 <xTimerCreateTimerTask+0x88>)
 800ad7c:	f7fe fd98 	bl	80098b0 <xTaskCreateStatic>
 800ad80:	4602      	mov	r2, r0
 800ad82:	4b10      	ldr	r3, [pc, #64]	; (800adc4 <xTimerCreateTimerTask+0x8c>)
 800ad84:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad86:	4b0f      	ldr	r3, [pc, #60]	; (800adc4 <xTimerCreateTimerTask+0x8c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d109      	bne.n	800adac <xTimerCreateTimerTask+0x74>
	__asm volatile
 800ad98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	613b      	str	r3, [r7, #16]
 800adaa:	e7fe      	b.n	800adaa <xTimerCreateTimerTask+0x72>
	return xReturn;
 800adac:	697b      	ldr	r3, [r7, #20]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	2000109c 	.word	0x2000109c
 800adbc:	0800c688 	.word	0x0800c688
 800adc0:	0800aef9 	.word	0x0800aef9
 800adc4:	200010a0 	.word	0x200010a0

0800adc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08a      	sub	sp, #40	; 0x28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800add6:	2300      	movs	r3, #0
 800add8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d109      	bne.n	800adf4 <xTimerGenericCommand+0x2c>
 800ade0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	623b      	str	r3, [r7, #32]
 800adf2:	e7fe      	b.n	800adf2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800adf4:	4b19      	ldr	r3, [pc, #100]	; (800ae5c <xTimerGenericCommand+0x94>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d02a      	beq.n	800ae52 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b05      	cmp	r3, #5
 800ae0c:	dc18      	bgt.n	800ae40 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae0e:	f7ff fb8b 	bl	800a528 <xTaskGetSchedulerState>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d109      	bne.n	800ae2c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae18:	4b10      	ldr	r3, [pc, #64]	; (800ae5c <xTimerGenericCommand+0x94>)
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	f107 0110 	add.w	r1, r7, #16
 800ae20:	2300      	movs	r3, #0
 800ae22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae24:	f7fe f84e 	bl	8008ec4 <xQueueGenericSend>
 800ae28:	6278      	str	r0, [r7, #36]	; 0x24
 800ae2a:	e012      	b.n	800ae52 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae2c:	4b0b      	ldr	r3, [pc, #44]	; (800ae5c <xTimerGenericCommand+0x94>)
 800ae2e:	6818      	ldr	r0, [r3, #0]
 800ae30:	f107 0110 	add.w	r1, r7, #16
 800ae34:	2300      	movs	r3, #0
 800ae36:	2200      	movs	r2, #0
 800ae38:	f7fe f844 	bl	8008ec4 <xQueueGenericSend>
 800ae3c:	6278      	str	r0, [r7, #36]	; 0x24
 800ae3e:	e008      	b.n	800ae52 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae40:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <xTimerGenericCommand+0x94>)
 800ae42:	6818      	ldr	r0, [r3, #0]
 800ae44:	f107 0110 	add.w	r1, r7, #16
 800ae48:	2300      	movs	r3, #0
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	f7fe f934 	bl	80090b8 <xQueueGenericSendFromISR>
 800ae50:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3728      	adds	r7, #40	; 0x28
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	2000109c 	.word	0x2000109c

0800ae60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae6a:	4b22      	ldr	r3, [pc, #136]	; (800aef4 <prvProcessExpiredTimer+0x94>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	3304      	adds	r3, #4
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fd fe07 	bl	8008a8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d021      	beq.n	800aed0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	699a      	ldr	r2, [r3, #24]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	18d1      	adds	r1, r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	6978      	ldr	r0, [r7, #20]
 800ae9a:	f000 f8d1 	bl	800b040 <prvInsertTimerInActiveList>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01e      	beq.n	800aee2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aea4:	2300      	movs	r3, #0
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	2100      	movs	r1, #0
 800aeae:	6978      	ldr	r0, [r7, #20]
 800aeb0:	f7ff ff8a 	bl	800adc8 <xTimerGenericCommand>
 800aeb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d112      	bne.n	800aee2 <prvProcessExpiredTimer+0x82>
 800aebc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	60fb      	str	r3, [r7, #12]
 800aece:	e7fe      	b.n	800aece <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aed6:	f023 0301 	bic.w	r3, r3, #1
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	6978      	ldr	r0, [r7, #20]
 800aee8:	4798      	blx	r3
}
 800aeea:	bf00      	nop
 800aeec:	3718      	adds	r7, #24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20001094 	.word	0x20001094

0800aef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af00:	f107 0308 	add.w	r3, r7, #8
 800af04:	4618      	mov	r0, r3
 800af06:	f000 f857 	bl	800afb8 <prvGetNextExpireTime>
 800af0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	4619      	mov	r1, r3
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f000 f803 	bl	800af1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af16:	f000 f8d5 	bl	800b0c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af1a:	e7f1      	b.n	800af00 <prvTimerTask+0x8>

0800af1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af26:	f7fe ff01 	bl	8009d2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af2a:	f107 0308 	add.w	r3, r7, #8
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 f866 	bl	800b000 <prvSampleTimeNow>
 800af34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d130      	bne.n	800af9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10a      	bne.n	800af58 <prvProcessTimerOrBlockTask+0x3c>
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	429a      	cmp	r2, r3
 800af48:	d806      	bhi.n	800af58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af4a:	f7fe fefd 	bl	8009d48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af4e:	68f9      	ldr	r1, [r7, #12]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff ff85 	bl	800ae60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af56:	e024      	b.n	800afa2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d008      	beq.n	800af70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af5e:	4b13      	ldr	r3, [pc, #76]	; (800afac <prvProcessTimerOrBlockTask+0x90>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <prvProcessTimerOrBlockTask+0x50>
 800af68:	2301      	movs	r3, #1
 800af6a:	e000      	b.n	800af6e <prvProcessTimerOrBlockTask+0x52>
 800af6c:	2300      	movs	r3, #0
 800af6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af70:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <prvProcessTimerOrBlockTask+0x94>)
 800af72:	6818      	ldr	r0, [r3, #0]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	4619      	mov	r1, r3
 800af7e:	f7fe fc63 	bl	8009848 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af82:	f7fe fee1 	bl	8009d48 <xTaskResumeAll>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10a      	bne.n	800afa2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af8c:	4b09      	ldr	r3, [pc, #36]	; (800afb4 <prvProcessTimerOrBlockTask+0x98>)
 800af8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	f3bf 8f6f 	isb	sy
}
 800af9c:	e001      	b.n	800afa2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af9e:	f7fe fed3 	bl	8009d48 <xTaskResumeAll>
}
 800afa2:	bf00      	nop
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20001098 	.word	0x20001098
 800afb0:	2000109c 	.word	0x2000109c
 800afb4:	e000ed04 	.word	0xe000ed04

0800afb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afc0:	4b0e      	ldr	r3, [pc, #56]	; (800affc <prvGetNextExpireTime+0x44>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d101      	bne.n	800afce <prvGetNextExpireTime+0x16>
 800afca:	2201      	movs	r2, #1
 800afcc:	e000      	b.n	800afd0 <prvGetNextExpireTime+0x18>
 800afce:	2200      	movs	r2, #0
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d105      	bne.n	800afe8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afdc:	4b07      	ldr	r3, [pc, #28]	; (800affc <prvGetNextExpireTime+0x44>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e001      	b.n	800afec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afec:	68fb      	ldr	r3, [r7, #12]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	20001094 	.word	0x20001094

0800b000 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b008:	f7fe ff3a 	bl	8009e80 <xTaskGetTickCount>
 800b00c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b00e:	4b0b      	ldr	r3, [pc, #44]	; (800b03c <prvSampleTimeNow+0x3c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	429a      	cmp	r2, r3
 800b016:	d205      	bcs.n	800b024 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b018:	f000 f930 	bl	800b27c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	e002      	b.n	800b02a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b02a:	4a04      	ldr	r2, [pc, #16]	; (800b03c <prvSampleTimeNow+0x3c>)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b030:	68fb      	ldr	r3, [r7, #12]
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	200010a4 	.word	0x200010a4

0800b040 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b04e:	2300      	movs	r3, #0
 800b050:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	429a      	cmp	r2, r3
 800b064:	d812      	bhi.n	800b08c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	1ad2      	subs	r2, r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	429a      	cmp	r2, r3
 800b072:	d302      	bcc.n	800b07a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b074:	2301      	movs	r3, #1
 800b076:	617b      	str	r3, [r7, #20]
 800b078:	e01b      	b.n	800b0b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b07a:	4b10      	ldr	r3, [pc, #64]	; (800b0bc <prvInsertTimerInActiveList+0x7c>)
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3304      	adds	r3, #4
 800b082:	4619      	mov	r1, r3
 800b084:	4610      	mov	r0, r2
 800b086:	f7fd fcc8 	bl	8008a1a <vListInsert>
 800b08a:	e012      	b.n	800b0b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d206      	bcs.n	800b0a2 <prvInsertTimerInActiveList+0x62>
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d302      	bcc.n	800b0a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b09c:	2301      	movs	r3, #1
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e007      	b.n	800b0b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0a2:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <prvInsertTimerInActiveList+0x80>)
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	f7fd fcb4 	bl	8008a1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0b2:	697b      	ldr	r3, [r7, #20]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3718      	adds	r7, #24
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	20001098 	.word	0x20001098
 800b0c0:	20001094 	.word	0x20001094

0800b0c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08e      	sub	sp, #56	; 0x38
 800b0c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0ca:	e0c6      	b.n	800b25a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	da17      	bge.n	800b102 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0d2:	1d3b      	adds	r3, r7, #4
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d109      	bne.n	800b0f2 <prvProcessReceivedCommands+0x2e>
 800b0de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	61fb      	str	r3, [r7, #28]
 800b0f0:	e7fe      	b.n	800b0f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0f8:	6850      	ldr	r0, [r2, #4]
 800b0fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0fc:	6892      	ldr	r2, [r2, #8]
 800b0fe:	4611      	mov	r1, r2
 800b100:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f2c0 80a7 	blt.w	800b258 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d004      	beq.n	800b120 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	3304      	adds	r3, #4
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fd fcb6 	bl	8008a8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b120:	463b      	mov	r3, r7
 800b122:	4618      	mov	r0, r3
 800b124:	f7ff ff6c 	bl	800b000 <prvSampleTimeNow>
 800b128:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b09      	cmp	r3, #9
 800b12e:	f200 8094 	bhi.w	800b25a <prvProcessReceivedCommands+0x196>
 800b132:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <prvProcessReceivedCommands+0x74>)
 800b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b138:	0800b161 	.word	0x0800b161
 800b13c:	0800b161 	.word	0x0800b161
 800b140:	0800b161 	.word	0x0800b161
 800b144:	0800b1d3 	.word	0x0800b1d3
 800b148:	0800b1e7 	.word	0x0800b1e7
 800b14c:	0800b22f 	.word	0x0800b22f
 800b150:	0800b161 	.word	0x0800b161
 800b154:	0800b161 	.word	0x0800b161
 800b158:	0800b1d3 	.word	0x0800b1d3
 800b15c:	0800b1e7 	.word	0x0800b1e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b166:	f043 0301 	orr.w	r3, r3, #1
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	18d1      	adds	r1, r2, r3
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b180:	f7ff ff5e 	bl	800b040 <prvInsertTimerInActiveList>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d067      	beq.n	800b25a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d05c      	beq.n	800b25a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	441a      	add	r2, r3
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b2:	f7ff fe09 	bl	800adc8 <xTimerGenericCommand>
 800b1b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d14d      	bne.n	800b25a <prvProcessReceivedCommands+0x196>
 800b1be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	61bb      	str	r3, [r7, #24]
 800b1d0:	e7fe      	b.n	800b1d0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1d8:	f023 0301 	bic.w	r3, r3, #1
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b1e4:	e039      	b.n	800b25a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ec:	f043 0301 	orr.w	r3, r3, #1
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d109      	bne.n	800b21a <prvProcessReceivedCommands+0x156>
 800b206:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	617b      	str	r3, [r7, #20]
 800b218:	e7fe      	b.n	800b218 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21c:	699a      	ldr	r2, [r3, #24]
 800b21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b220:	18d1      	adds	r1, r2, r3
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b228:	f7ff ff0a 	bl	800b040 <prvInsertTimerInActiveList>
					break;
 800b22c:	e015      	b.n	800b25a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b234:	f003 0302 	and.w	r3, r3, #2
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d103      	bne.n	800b244 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b23e:	f000 fbc1 	bl	800b9c4 <vPortFree>
 800b242:	e00a      	b.n	800b25a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b24a:	f023 0301 	bic.w	r3, r3, #1
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b256:	e000      	b.n	800b25a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b258:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b25a:	4b07      	ldr	r3, [pc, #28]	; (800b278 <prvProcessReceivedCommands+0x1b4>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	1d39      	adds	r1, r7, #4
 800b260:	2200      	movs	r2, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f7fd ffbc 	bl	80091e0 <xQueueReceive>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f47f af2e 	bne.w	800b0cc <prvProcessReceivedCommands+0x8>
	}
}
 800b270:	bf00      	nop
 800b272:	3730      	adds	r7, #48	; 0x30
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	2000109c 	.word	0x2000109c

0800b27c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b282:	e047      	b.n	800b314 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b284:	4b2d      	ldr	r3, [pc, #180]	; (800b33c <prvSwitchTimerLists+0xc0>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b28e:	4b2b      	ldr	r3, [pc, #172]	; (800b33c <prvSwitchTimerLists+0xc0>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	3304      	adds	r3, #4
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fd fbf5 	bl	8008a8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6a1b      	ldr	r3, [r3, #32]
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d02d      	beq.n	800b314 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	4413      	add	r3, r2
 800b2c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d90e      	bls.n	800b2e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2d6:	4b19      	ldr	r3, [pc, #100]	; (800b33c <prvSwitchTimerLists+0xc0>)
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3304      	adds	r3, #4
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	f7fd fb9a 	bl	8008a1a <vListInsert>
 800b2e6:	e015      	b.n	800b314 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	693a      	ldr	r2, [r7, #16]
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7ff fd68 	bl	800adc8 <xTimerGenericCommand>
 800b2f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d109      	bne.n	800b314 <prvSwitchTimerLists+0x98>
 800b300:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	e7fe      	b.n	800b312 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b314:	4b09      	ldr	r3, [pc, #36]	; (800b33c <prvSwitchTimerLists+0xc0>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1b2      	bne.n	800b284 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b31e:	4b07      	ldr	r3, [pc, #28]	; (800b33c <prvSwitchTimerLists+0xc0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b324:	4b06      	ldr	r3, [pc, #24]	; (800b340 <prvSwitchTimerLists+0xc4>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a04      	ldr	r2, [pc, #16]	; (800b33c <prvSwitchTimerLists+0xc0>)
 800b32a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b32c:	4a04      	ldr	r2, [pc, #16]	; (800b340 <prvSwitchTimerLists+0xc4>)
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	6013      	str	r3, [r2, #0]
}
 800b332:	bf00      	nop
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	20001094 	.word	0x20001094
 800b340:	20001098 	.word	0x20001098

0800b344 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b34a:	f000 f95f 	bl	800b60c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b34e:	4b15      	ldr	r3, [pc, #84]	; (800b3a4 <prvCheckForValidListAndQueue+0x60>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d120      	bne.n	800b398 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b356:	4814      	ldr	r0, [pc, #80]	; (800b3a8 <prvCheckForValidListAndQueue+0x64>)
 800b358:	f7fd fb0e 	bl	8008978 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b35c:	4813      	ldr	r0, [pc, #76]	; (800b3ac <prvCheckForValidListAndQueue+0x68>)
 800b35e:	f7fd fb0b 	bl	8008978 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b362:	4b13      	ldr	r3, [pc, #76]	; (800b3b0 <prvCheckForValidListAndQueue+0x6c>)
 800b364:	4a10      	ldr	r2, [pc, #64]	; (800b3a8 <prvCheckForValidListAndQueue+0x64>)
 800b366:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b368:	4b12      	ldr	r3, [pc, #72]	; (800b3b4 <prvCheckForValidListAndQueue+0x70>)
 800b36a:	4a10      	ldr	r2, [pc, #64]	; (800b3ac <prvCheckForValidListAndQueue+0x68>)
 800b36c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b36e:	2300      	movs	r3, #0
 800b370:	9300      	str	r3, [sp, #0]
 800b372:	4b11      	ldr	r3, [pc, #68]	; (800b3b8 <prvCheckForValidListAndQueue+0x74>)
 800b374:	4a11      	ldr	r2, [pc, #68]	; (800b3bc <prvCheckForValidListAndQueue+0x78>)
 800b376:	2110      	movs	r1, #16
 800b378:	200a      	movs	r0, #10
 800b37a:	f7fd fc19 	bl	8008bb0 <xQueueGenericCreateStatic>
 800b37e:	4602      	mov	r2, r0
 800b380:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <prvCheckForValidListAndQueue+0x60>)
 800b382:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b384:	4b07      	ldr	r3, [pc, #28]	; (800b3a4 <prvCheckForValidListAndQueue+0x60>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d005      	beq.n	800b398 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b38c:	4b05      	ldr	r3, [pc, #20]	; (800b3a4 <prvCheckForValidListAndQueue+0x60>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	490b      	ldr	r1, [pc, #44]	; (800b3c0 <prvCheckForValidListAndQueue+0x7c>)
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fa30 	bl	80097f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b398:	f000 f966 	bl	800b668 <vPortExitCritical>
}
 800b39c:	bf00      	nop
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	2000109c 	.word	0x2000109c
 800b3a8:	2000106c 	.word	0x2000106c
 800b3ac:	20001080 	.word	0x20001080
 800b3b0:	20001094 	.word	0x20001094
 800b3b4:	20001098 	.word	0x20001098
 800b3b8:	20001148 	.word	0x20001148
 800b3bc:	200010a8 	.word	0x200010a8
 800b3c0:	0800c690 	.word	0x0800c690

0800b3c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	3b04      	subs	r3, #4
 800b3d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3b04      	subs	r3, #4
 800b3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	f023 0201 	bic.w	r2, r3, #1
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3b04      	subs	r3, #4
 800b3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3f4:	4a0c      	ldr	r2, [pc, #48]	; (800b428 <pxPortInitialiseStack+0x64>)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3b14      	subs	r3, #20
 800b3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3b04      	subs	r3, #4
 800b40a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f06f 0202 	mvn.w	r2, #2
 800b412:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3b20      	subs	r3, #32
 800b418:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b41a:	68fb      	ldr	r3, [r7, #12]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	0800b42d 	.word	0x0800b42d

0800b42c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b436:	4b11      	ldr	r3, [pc, #68]	; (800b47c <prvTaskExitError+0x50>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d009      	beq.n	800b454 <prvTaskExitError+0x28>
 800b440:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b444:	f383 8811 	msr	BASEPRI, r3
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	60fb      	str	r3, [r7, #12]
 800b452:	e7fe      	b.n	800b452 <prvTaskExitError+0x26>
 800b454:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b466:	bf00      	nop
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0fc      	beq.n	800b468 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b46e:	bf00      	nop
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	20000010 	.word	0x20000010

0800b480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b480:	4b07      	ldr	r3, [pc, #28]	; (800b4a0 <pxCurrentTCBConst2>)
 800b482:	6819      	ldr	r1, [r3, #0]
 800b484:	6808      	ldr	r0, [r1, #0]
 800b486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48a:	f380 8809 	msr	PSP, r0
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f04f 0000 	mov.w	r0, #0
 800b496:	f380 8811 	msr	BASEPRI, r0
 800b49a:	4770      	bx	lr
 800b49c:	f3af 8000 	nop.w

0800b4a0 <pxCurrentTCBConst2>:
 800b4a0:	20000b64 	.word	0x20000b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop

0800b4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4a8:	4808      	ldr	r0, [pc, #32]	; (800b4cc <prvPortStartFirstTask+0x24>)
 800b4aa:	6800      	ldr	r0, [r0, #0]
 800b4ac:	6800      	ldr	r0, [r0, #0]
 800b4ae:	f380 8808 	msr	MSP, r0
 800b4b2:	f04f 0000 	mov.w	r0, #0
 800b4b6:	f380 8814 	msr	CONTROL, r0
 800b4ba:	b662      	cpsie	i
 800b4bc:	b661      	cpsie	f
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	df00      	svc	0
 800b4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4ca:	bf00      	nop
 800b4cc:	e000ed08 	.word	0xe000ed08

0800b4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4d6:	4b44      	ldr	r3, [pc, #272]	; (800b5e8 <xPortStartScheduler+0x118>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a44      	ldr	r2, [pc, #272]	; (800b5ec <xPortStartScheduler+0x11c>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d109      	bne.n	800b4f4 <xPortStartScheduler+0x24>
 800b4e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	613b      	str	r3, [r7, #16]
 800b4f2:	e7fe      	b.n	800b4f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4f4:	4b3c      	ldr	r3, [pc, #240]	; (800b5e8 <xPortStartScheduler+0x118>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a3d      	ldr	r2, [pc, #244]	; (800b5f0 <xPortStartScheduler+0x120>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d109      	bne.n	800b512 <xPortStartScheduler+0x42>
 800b4fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60fb      	str	r3, [r7, #12]
 800b510:	e7fe      	b.n	800b510 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b512:	4b38      	ldr	r3, [pc, #224]	; (800b5f4 <xPortStartScheduler+0x124>)
 800b514:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	22ff      	movs	r2, #255	; 0xff
 800b522:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800b534:	b2da      	uxtb	r2, r3
 800b536:	4b30      	ldr	r3, [pc, #192]	; (800b5f8 <xPortStartScheduler+0x128>)
 800b538:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b53a:	4b30      	ldr	r3, [pc, #192]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b53c:	2207      	movs	r2, #7
 800b53e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b540:	e009      	b.n	800b556 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b542:	4b2e      	ldr	r3, [pc, #184]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3b01      	subs	r3, #1
 800b548:	4a2c      	ldr	r2, [pc, #176]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b54a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	b2db      	uxtb	r3, r3
 800b554:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b55e:	2b80      	cmp	r3, #128	; 0x80
 800b560:	d0ef      	beq.n	800b542 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b562:	4b26      	ldr	r3, [pc, #152]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f1c3 0307 	rsb	r3, r3, #7
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d009      	beq.n	800b582 <xPortStartScheduler+0xb2>
 800b56e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	60bb      	str	r3, [r7, #8]
 800b580:	e7fe      	b.n	800b580 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b582:	4b1e      	ldr	r3, [pc, #120]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	021b      	lsls	r3, r3, #8
 800b588:	4a1c      	ldr	r2, [pc, #112]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b58a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b58c:	4b1b      	ldr	r3, [pc, #108]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b594:	4a19      	ldr	r2, [pc, #100]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b596:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5a0:	4b17      	ldr	r3, [pc, #92]	; (800b600 <xPortStartScheduler+0x130>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a16      	ldr	r2, [pc, #88]	; (800b600 <xPortStartScheduler+0x130>)
 800b5a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5ac:	4b14      	ldr	r3, [pc, #80]	; (800b600 <xPortStartScheduler+0x130>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a13      	ldr	r2, [pc, #76]	; (800b600 <xPortStartScheduler+0x130>)
 800b5b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5b8:	f000 f8d6 	bl	800b768 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5bc:	4b11      	ldr	r3, [pc, #68]	; (800b604 <xPortStartScheduler+0x134>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5c2:	f000 f8f5 	bl	800b7b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5c6:	4b10      	ldr	r3, [pc, #64]	; (800b608 <xPortStartScheduler+0x138>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a0f      	ldr	r2, [pc, #60]	; (800b608 <xPortStartScheduler+0x138>)
 800b5cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5d2:	f7ff ff69 	bl	800b4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5d6:	f7fe fd1b 	bl	800a010 <vTaskSwitchContext>
	prvTaskExitError();
 800b5da:	f7ff ff27 	bl	800b42c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	e000ed00 	.word	0xe000ed00
 800b5ec:	410fc271 	.word	0x410fc271
 800b5f0:	410fc270 	.word	0x410fc270
 800b5f4:	e000e400 	.word	0xe000e400
 800b5f8:	20001198 	.word	0x20001198
 800b5fc:	2000119c 	.word	0x2000119c
 800b600:	e000ed20 	.word	0xe000ed20
 800b604:	20000010 	.word	0x20000010
 800b608:	e000ef34 	.word	0xe000ef34

0800b60c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b624:	4b0e      	ldr	r3, [pc, #56]	; (800b660 <vPortEnterCritical+0x54>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3301      	adds	r3, #1
 800b62a:	4a0d      	ldr	r2, [pc, #52]	; (800b660 <vPortEnterCritical+0x54>)
 800b62c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b62e:	4b0c      	ldr	r3, [pc, #48]	; (800b660 <vPortEnterCritical+0x54>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d10e      	bne.n	800b654 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b636:	4b0b      	ldr	r3, [pc, #44]	; (800b664 <vPortEnterCritical+0x58>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d009      	beq.n	800b654 <vPortEnterCritical+0x48>
 800b640:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	603b      	str	r3, [r7, #0]
 800b652:	e7fe      	b.n	800b652 <vPortEnterCritical+0x46>
	}
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	20000010 	.word	0x20000010
 800b664:	e000ed04 	.word	0xe000ed04

0800b668 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b66e:	4b11      	ldr	r3, [pc, #68]	; (800b6b4 <vPortExitCritical+0x4c>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d109      	bne.n	800b68a <vPortExitCritical+0x22>
 800b676:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	607b      	str	r3, [r7, #4]
 800b688:	e7fe      	b.n	800b688 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b68a:	4b0a      	ldr	r3, [pc, #40]	; (800b6b4 <vPortExitCritical+0x4c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3b01      	subs	r3, #1
 800b690:	4a08      	ldr	r2, [pc, #32]	; (800b6b4 <vPortExitCritical+0x4c>)
 800b692:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b694:	4b07      	ldr	r3, [pc, #28]	; (800b6b4 <vPortExitCritical+0x4c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d104      	bne.n	800b6a6 <vPortExitCritical+0x3e>
 800b69c:	2300      	movs	r3, #0
 800b69e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20000010 	.word	0x20000010
	...

0800b6c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6c0:	f3ef 8009 	mrs	r0, PSP
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	4b15      	ldr	r3, [pc, #84]	; (800b720 <pxCurrentTCBConst>)
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	f01e 0f10 	tst.w	lr, #16
 800b6d0:	bf08      	it	eq
 800b6d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	6010      	str	r0, [r2, #0]
 800b6dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6e0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800b6e4:	f380 8811 	msr	BASEPRI, r0
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f7fe fc8e 	bl	800a010 <vTaskSwitchContext>
 800b6f4:	f04f 0000 	mov.w	r0, #0
 800b6f8:	f380 8811 	msr	BASEPRI, r0
 800b6fc:	bc09      	pop	{r0, r3}
 800b6fe:	6819      	ldr	r1, [r3, #0]
 800b700:	6808      	ldr	r0, [r1, #0]
 800b702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b706:	f01e 0f10 	tst.w	lr, #16
 800b70a:	bf08      	it	eq
 800b70c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b710:	f380 8809 	msr	PSP, r0
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	f3af 8000 	nop.w

0800b720 <pxCurrentTCBConst>:
 800b720:	20000b64 	.word	0x20000b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b724:	bf00      	nop
 800b726:	bf00      	nop

0800b728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
	__asm volatile
 800b72e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b740:	f7fe fbae 	bl	8009ea0 <xTaskIncrementTick>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d003      	beq.n	800b752 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b74a:	4b06      	ldr	r3, [pc, #24]	; (800b764 <SysTick_Handler+0x3c>)
 800b74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	2300      	movs	r3, #0
 800b754:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b75c:	bf00      	nop
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	e000ed04 	.word	0xe000ed04

0800b768 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b76c:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <vPortSetupTimerInterrupt+0x34>)
 800b76e:	2200      	movs	r2, #0
 800b770:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b772:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <vPortSetupTimerInterrupt+0x38>)
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b778:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <vPortSetupTimerInterrupt+0x3c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a0a      	ldr	r2, [pc, #40]	; (800b7a8 <vPortSetupTimerInterrupt+0x40>)
 800b77e:	fba2 2303 	umull	r2, r3, r2, r3
 800b782:	099b      	lsrs	r3, r3, #6
 800b784:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <vPortSetupTimerInterrupt+0x44>)
 800b786:	3b01      	subs	r3, #1
 800b788:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b78a:	4b04      	ldr	r3, [pc, #16]	; (800b79c <vPortSetupTimerInterrupt+0x34>)
 800b78c:	2207      	movs	r2, #7
 800b78e:	601a      	str	r2, [r3, #0]
}
 800b790:	bf00      	nop
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	e000e010 	.word	0xe000e010
 800b7a0:	e000e018 	.word	0xe000e018
 800b7a4:	20000004 	.word	0x20000004
 800b7a8:	10624dd3 	.word	0x10624dd3
 800b7ac:	e000e014 	.word	0xe000e014

0800b7b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7c0 <vPortEnableVFP+0x10>
 800b7b4:	6801      	ldr	r1, [r0, #0]
 800b7b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7ba:	6001      	str	r1, [r0, #0]
 800b7bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7be:	bf00      	nop
 800b7c0:	e000ed88 	.word	0xe000ed88

0800b7c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7ca:	f3ef 8305 	mrs	r3, IPSR
 800b7ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2b0f      	cmp	r3, #15
 800b7d4:	d913      	bls.n	800b7fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7d6:	4a16      	ldr	r2, [pc, #88]	; (800b830 <vPortValidateInterruptPriority+0x6c>)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4413      	add	r3, r2
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7e0:	4b14      	ldr	r3, [pc, #80]	; (800b834 <vPortValidateInterruptPriority+0x70>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	7afa      	ldrb	r2, [r7, #11]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d209      	bcs.n	800b7fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b7ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b7ee:	f383 8811 	msr	BASEPRI, r3
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	f3bf 8f4f 	dsb	sy
 800b7fa:	607b      	str	r3, [r7, #4]
 800b7fc:	e7fe      	b.n	800b7fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b7fe:	4b0e      	ldr	r3, [pc, #56]	; (800b838 <vPortValidateInterruptPriority+0x74>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b806:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <vPortValidateInterruptPriority+0x78>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d909      	bls.n	800b822 <vPortValidateInterruptPriority+0x5e>
 800b80e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	603b      	str	r3, [r7, #0]
 800b820:	e7fe      	b.n	800b820 <vPortValidateInterruptPriority+0x5c>
	}
 800b822:	bf00      	nop
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	e000e3f0 	.word	0xe000e3f0
 800b834:	20001198 	.word	0x20001198
 800b838:	e000ed0c 	.word	0xe000ed0c
 800b83c:	2000119c 	.word	0x2000119c

0800b840 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b08a      	sub	sp, #40	; 0x28
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b84c:	f7fe fa6e 	bl	8009d2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b850:	4b57      	ldr	r3, [pc, #348]	; (800b9b0 <pvPortMalloc+0x170>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b858:	f000 f90c 	bl	800ba74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b85c:	4b55      	ldr	r3, [pc, #340]	; (800b9b4 <pvPortMalloc+0x174>)
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4013      	ands	r3, r2
 800b864:	2b00      	cmp	r3, #0
 800b866:	f040 808c 	bne.w	800b982 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d01c      	beq.n	800b8aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b870:	2208      	movs	r2, #8
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4413      	add	r3, r2
 800b876:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d013      	beq.n	800b8aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f023 0307 	bic.w	r3, r3, #7
 800b888:	3308      	adds	r3, #8
 800b88a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	2b00      	cmp	r3, #0
 800b894:	d009      	beq.n	800b8aa <pvPortMalloc+0x6a>
 800b896:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	617b      	str	r3, [r7, #20]
 800b8a8:	e7fe      	b.n	800b8a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d068      	beq.n	800b982 <pvPortMalloc+0x142>
 800b8b0:	4b41      	ldr	r3, [pc, #260]	; (800b9b8 <pvPortMalloc+0x178>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d863      	bhi.n	800b982 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8ba:	4b40      	ldr	r3, [pc, #256]	; (800b9bc <pvPortMalloc+0x17c>)
 800b8bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8be:	4b3f      	ldr	r3, [pc, #252]	; (800b9bc <pvPortMalloc+0x17c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8c4:	e004      	b.n	800b8d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d903      	bls.n	800b8e2 <pvPortMalloc+0xa2>
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1f1      	bne.n	800b8c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b8e2:	4b33      	ldr	r3, [pc, #204]	; (800b9b0 <pvPortMalloc+0x170>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d04a      	beq.n	800b982 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2208      	movs	r2, #8
 800b8f2:	4413      	add	r3, r2
 800b8f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	6a3b      	ldr	r3, [r7, #32]
 800b8fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b900:	685a      	ldr	r2, [r3, #4]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	1ad2      	subs	r2, r2, r3
 800b906:	2308      	movs	r3, #8
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d91e      	bls.n	800b94c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4413      	add	r3, r2
 800b914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	f003 0307 	and.w	r3, r3, #7
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d009      	beq.n	800b934 <pvPortMalloc+0xf4>
 800b920:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	613b      	str	r3, [r7, #16]
 800b932:	e7fe      	b.n	800b932 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	1ad2      	subs	r2, r2, r3
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b946:	69b8      	ldr	r0, [r7, #24]
 800b948:	f000 f8f6 	bl	800bb38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b94c:	4b1a      	ldr	r3, [pc, #104]	; (800b9b8 <pvPortMalloc+0x178>)
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	4a18      	ldr	r2, [pc, #96]	; (800b9b8 <pvPortMalloc+0x178>)
 800b958:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b95a:	4b17      	ldr	r3, [pc, #92]	; (800b9b8 <pvPortMalloc+0x178>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	4b18      	ldr	r3, [pc, #96]	; (800b9c0 <pvPortMalloc+0x180>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	429a      	cmp	r2, r3
 800b964:	d203      	bcs.n	800b96e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b966:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <pvPortMalloc+0x178>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a15      	ldr	r2, [pc, #84]	; (800b9c0 <pvPortMalloc+0x180>)
 800b96c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	4b10      	ldr	r3, [pc, #64]	; (800b9b4 <pvPortMalloc+0x174>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	431a      	orrs	r2, r3
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	2200      	movs	r2, #0
 800b980:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b982:	f7fe f9e1 	bl	8009d48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	f003 0307 	and.w	r3, r3, #7
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d009      	beq.n	800b9a4 <pvPortMalloc+0x164>
 800b990:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	e7fe      	b.n	800b9a2 <pvPortMalloc+0x162>
	return pvReturn;
 800b9a4:	69fb      	ldr	r3, [r7, #28]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3728      	adds	r7, #40	; 0x28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	200038b8 	.word	0x200038b8
 800b9b4:	200038c4 	.word	0x200038c4
 800b9b8:	200038bc 	.word	0x200038bc
 800b9bc:	200038b0 	.word	0x200038b0
 800b9c0:	200038c0 	.word	0x200038c0

0800b9c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d046      	beq.n	800ba64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9d6:	2308      	movs	r3, #8
 800b9d8:	425b      	negs	r3, r3
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	4413      	add	r3, r2
 800b9de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	4b20      	ldr	r3, [pc, #128]	; (800ba6c <vPortFree+0xa8>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d109      	bne.n	800ba06 <vPortFree+0x42>
 800b9f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	e7fe      	b.n	800ba04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d009      	beq.n	800ba22 <vPortFree+0x5e>
 800ba0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	60bb      	str	r3, [r7, #8]
 800ba20:	e7fe      	b.n	800ba20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	4b11      	ldr	r3, [pc, #68]	; (800ba6c <vPortFree+0xa8>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d019      	beq.n	800ba64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d115      	bne.n	800ba64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	4b0b      	ldr	r3, [pc, #44]	; (800ba6c <vPortFree+0xa8>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	43db      	mvns	r3, r3
 800ba42:	401a      	ands	r2, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba48:	f7fe f970 	bl	8009d2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <vPortFree+0xac>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4413      	add	r3, r2
 800ba56:	4a06      	ldr	r2, [pc, #24]	; (800ba70 <vPortFree+0xac>)
 800ba58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba5a:	6938      	ldr	r0, [r7, #16]
 800ba5c:	f000 f86c 	bl	800bb38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ba60:	f7fe f972 	bl	8009d48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba64:	bf00      	nop
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	200038c4 	.word	0x200038c4
 800ba70:	200038bc 	.word	0x200038bc

0800ba74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba7a:	f242 7310 	movw	r3, #10000	; 0x2710
 800ba7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba80:	4b27      	ldr	r3, [pc, #156]	; (800bb20 <prvHeapInit+0xac>)
 800ba82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f003 0307 	and.w	r3, r3, #7
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00c      	beq.n	800baa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3307      	adds	r3, #7
 800ba92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f023 0307 	bic.w	r3, r3, #7
 800ba9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	4a1f      	ldr	r2, [pc, #124]	; (800bb20 <prvHeapInit+0xac>)
 800baa4:	4413      	add	r3, r2
 800baa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800baac:	4a1d      	ldr	r2, [pc, #116]	; (800bb24 <prvHeapInit+0xb0>)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bab2:	4b1c      	ldr	r3, [pc, #112]	; (800bb24 <prvHeapInit+0xb0>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	4413      	add	r3, r2
 800babe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bac0:	2208      	movs	r2, #8
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	1a9b      	subs	r3, r3, r2
 800bac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 0307 	bic.w	r3, r3, #7
 800bace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	4a15      	ldr	r2, [pc, #84]	; (800bb28 <prvHeapInit+0xb4>)
 800bad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bad6:	4b14      	ldr	r3, [pc, #80]	; (800bb28 <prvHeapInit+0xb4>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2200      	movs	r2, #0
 800badc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bade:	4b12      	ldr	r3, [pc, #72]	; (800bb28 <prvHeapInit+0xb4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	1ad2      	subs	r2, r2, r3
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800baf4:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <prvHeapInit+0xb4>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	4a0a      	ldr	r2, [pc, #40]	; (800bb2c <prvHeapInit+0xb8>)
 800bb02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	4a09      	ldr	r2, [pc, #36]	; (800bb30 <prvHeapInit+0xbc>)
 800bb0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb0c:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <prvHeapInit+0xc0>)
 800bb0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb12:	601a      	str	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	200011a0 	.word	0x200011a0
 800bb24:	200038b0 	.word	0x200038b0
 800bb28:	200038b8 	.word	0x200038b8
 800bb2c:	200038c0 	.word	0x200038c0
 800bb30:	200038bc 	.word	0x200038bc
 800bb34:	200038c4 	.word	0x200038c4

0800bb38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb40:	4b28      	ldr	r3, [pc, #160]	; (800bbe4 <prvInsertBlockIntoFreeList+0xac>)
 800bb42:	60fb      	str	r3, [r7, #12]
 800bb44:	e002      	b.n	800bb4c <prvInsertBlockIntoFreeList+0x14>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d8f7      	bhi.n	800bb46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	4413      	add	r3, r2
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d108      	bne.n	800bb7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	441a      	add	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	441a      	add	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d118      	bne.n	800bbc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	4b15      	ldr	r3, [pc, #84]	; (800bbe8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d00d      	beq.n	800bbb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	441a      	add	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	e008      	b.n	800bbc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bbb6:	4b0c      	ldr	r3, [pc, #48]	; (800bbe8 <prvInsertBlockIntoFreeList+0xb0>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	e003      	b.n	800bbc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d002      	beq.n	800bbd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbd6:	bf00      	nop
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	200038b0 	.word	0x200038b0
 800bbe8:	200038b8 	.word	0x200038b8

0800bbec <__errno>:
 800bbec:	4b01      	ldr	r3, [pc, #4]	; (800bbf4 <__errno+0x8>)
 800bbee:	6818      	ldr	r0, [r3, #0]
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	20000014 	.word	0x20000014

0800bbf8 <__libc_init_array>:
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	4e0d      	ldr	r6, [pc, #52]	; (800bc30 <__libc_init_array+0x38>)
 800bbfc:	4c0d      	ldr	r4, [pc, #52]	; (800bc34 <__libc_init_array+0x3c>)
 800bbfe:	1ba4      	subs	r4, r4, r6
 800bc00:	10a4      	asrs	r4, r4, #2
 800bc02:	2500      	movs	r5, #0
 800bc04:	42a5      	cmp	r5, r4
 800bc06:	d109      	bne.n	800bc1c <__libc_init_array+0x24>
 800bc08:	4e0b      	ldr	r6, [pc, #44]	; (800bc38 <__libc_init_array+0x40>)
 800bc0a:	4c0c      	ldr	r4, [pc, #48]	; (800bc3c <__libc_init_array+0x44>)
 800bc0c:	f000 fc90 	bl	800c530 <_init>
 800bc10:	1ba4      	subs	r4, r4, r6
 800bc12:	10a4      	asrs	r4, r4, #2
 800bc14:	2500      	movs	r5, #0
 800bc16:	42a5      	cmp	r5, r4
 800bc18:	d105      	bne.n	800bc26 <__libc_init_array+0x2e>
 800bc1a:	bd70      	pop	{r4, r5, r6, pc}
 800bc1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc20:	4798      	blx	r3
 800bc22:	3501      	adds	r5, #1
 800bc24:	e7ee      	b.n	800bc04 <__libc_init_array+0xc>
 800bc26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc2a:	4798      	blx	r3
 800bc2c:	3501      	adds	r5, #1
 800bc2e:	e7f2      	b.n	800bc16 <__libc_init_array+0x1e>
 800bc30:	0800d934 	.word	0x0800d934
 800bc34:	0800d934 	.word	0x0800d934
 800bc38:	0800d934 	.word	0x0800d934
 800bc3c:	0800d938 	.word	0x0800d938

0800bc40 <malloc>:
 800bc40:	4b02      	ldr	r3, [pc, #8]	; (800bc4c <malloc+0xc>)
 800bc42:	4601      	mov	r1, r0
 800bc44:	6818      	ldr	r0, [r3, #0]
 800bc46:	f000 b865 	b.w	800bd14 <_malloc_r>
 800bc4a:	bf00      	nop
 800bc4c:	20000014 	.word	0x20000014

0800bc50 <memcpy>:
 800bc50:	b510      	push	{r4, lr}
 800bc52:	1e43      	subs	r3, r0, #1
 800bc54:	440a      	add	r2, r1
 800bc56:	4291      	cmp	r1, r2
 800bc58:	d100      	bne.n	800bc5c <memcpy+0xc>
 800bc5a:	bd10      	pop	{r4, pc}
 800bc5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc64:	e7f7      	b.n	800bc56 <memcpy+0x6>

0800bc66 <memset>:
 800bc66:	4402      	add	r2, r0
 800bc68:	4603      	mov	r3, r0
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d100      	bne.n	800bc70 <memset+0xa>
 800bc6e:	4770      	bx	lr
 800bc70:	f803 1b01 	strb.w	r1, [r3], #1
 800bc74:	e7f9      	b.n	800bc6a <memset+0x4>
	...

0800bc78 <_free_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4605      	mov	r5, r0
 800bc7c:	2900      	cmp	r1, #0
 800bc7e:	d045      	beq.n	800bd0c <_free_r+0x94>
 800bc80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc84:	1f0c      	subs	r4, r1, #4
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	bfb8      	it	lt
 800bc8a:	18e4      	addlt	r4, r4, r3
 800bc8c:	f000 f8e1 	bl	800be52 <__malloc_lock>
 800bc90:	4a1f      	ldr	r2, [pc, #124]	; (800bd10 <_free_r+0x98>)
 800bc92:	6813      	ldr	r3, [r2, #0]
 800bc94:	4610      	mov	r0, r2
 800bc96:	b933      	cbnz	r3, 800bca6 <_free_r+0x2e>
 800bc98:	6063      	str	r3, [r4, #4]
 800bc9a:	6014      	str	r4, [r2, #0]
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bca2:	f000 b8d7 	b.w	800be54 <__malloc_unlock>
 800bca6:	42a3      	cmp	r3, r4
 800bca8:	d90c      	bls.n	800bcc4 <_free_r+0x4c>
 800bcaa:	6821      	ldr	r1, [r4, #0]
 800bcac:	1862      	adds	r2, r4, r1
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	bf04      	itt	eq
 800bcb2:	681a      	ldreq	r2, [r3, #0]
 800bcb4:	685b      	ldreq	r3, [r3, #4]
 800bcb6:	6063      	str	r3, [r4, #4]
 800bcb8:	bf04      	itt	eq
 800bcba:	1852      	addeq	r2, r2, r1
 800bcbc:	6022      	streq	r2, [r4, #0]
 800bcbe:	6004      	str	r4, [r0, #0]
 800bcc0:	e7ec      	b.n	800bc9c <_free_r+0x24>
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	b10a      	cbz	r2, 800bccc <_free_r+0x54>
 800bcc8:	42a2      	cmp	r2, r4
 800bcca:	d9fa      	bls.n	800bcc2 <_free_r+0x4a>
 800bccc:	6819      	ldr	r1, [r3, #0]
 800bcce:	1858      	adds	r0, r3, r1
 800bcd0:	42a0      	cmp	r0, r4
 800bcd2:	d10b      	bne.n	800bcec <_free_r+0x74>
 800bcd4:	6820      	ldr	r0, [r4, #0]
 800bcd6:	4401      	add	r1, r0
 800bcd8:	1858      	adds	r0, r3, r1
 800bcda:	4282      	cmp	r2, r0
 800bcdc:	6019      	str	r1, [r3, #0]
 800bcde:	d1dd      	bne.n	800bc9c <_free_r+0x24>
 800bce0:	6810      	ldr	r0, [r2, #0]
 800bce2:	6852      	ldr	r2, [r2, #4]
 800bce4:	605a      	str	r2, [r3, #4]
 800bce6:	4401      	add	r1, r0
 800bce8:	6019      	str	r1, [r3, #0]
 800bcea:	e7d7      	b.n	800bc9c <_free_r+0x24>
 800bcec:	d902      	bls.n	800bcf4 <_free_r+0x7c>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	602b      	str	r3, [r5, #0]
 800bcf2:	e7d3      	b.n	800bc9c <_free_r+0x24>
 800bcf4:	6820      	ldr	r0, [r4, #0]
 800bcf6:	1821      	adds	r1, r4, r0
 800bcf8:	428a      	cmp	r2, r1
 800bcfa:	bf04      	itt	eq
 800bcfc:	6811      	ldreq	r1, [r2, #0]
 800bcfe:	6852      	ldreq	r2, [r2, #4]
 800bd00:	6062      	str	r2, [r4, #4]
 800bd02:	bf04      	itt	eq
 800bd04:	1809      	addeq	r1, r1, r0
 800bd06:	6021      	streq	r1, [r4, #0]
 800bd08:	605c      	str	r4, [r3, #4]
 800bd0a:	e7c7      	b.n	800bc9c <_free_r+0x24>
 800bd0c:	bd38      	pop	{r3, r4, r5, pc}
 800bd0e:	bf00      	nop
 800bd10:	200038c8 	.word	0x200038c8

0800bd14 <_malloc_r>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	1ccd      	adds	r5, r1, #3
 800bd18:	f025 0503 	bic.w	r5, r5, #3
 800bd1c:	3508      	adds	r5, #8
 800bd1e:	2d0c      	cmp	r5, #12
 800bd20:	bf38      	it	cc
 800bd22:	250c      	movcc	r5, #12
 800bd24:	2d00      	cmp	r5, #0
 800bd26:	4606      	mov	r6, r0
 800bd28:	db01      	blt.n	800bd2e <_malloc_r+0x1a>
 800bd2a:	42a9      	cmp	r1, r5
 800bd2c:	d903      	bls.n	800bd36 <_malloc_r+0x22>
 800bd2e:	230c      	movs	r3, #12
 800bd30:	6033      	str	r3, [r6, #0]
 800bd32:	2000      	movs	r0, #0
 800bd34:	bd70      	pop	{r4, r5, r6, pc}
 800bd36:	f000 f88c 	bl	800be52 <__malloc_lock>
 800bd3a:	4a21      	ldr	r2, [pc, #132]	; (800bdc0 <_malloc_r+0xac>)
 800bd3c:	6814      	ldr	r4, [r2, #0]
 800bd3e:	4621      	mov	r1, r4
 800bd40:	b991      	cbnz	r1, 800bd68 <_malloc_r+0x54>
 800bd42:	4c20      	ldr	r4, [pc, #128]	; (800bdc4 <_malloc_r+0xb0>)
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	b91b      	cbnz	r3, 800bd50 <_malloc_r+0x3c>
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f000 f83d 	bl	800bdc8 <_sbrk_r>
 800bd4e:	6020      	str	r0, [r4, #0]
 800bd50:	4629      	mov	r1, r5
 800bd52:	4630      	mov	r0, r6
 800bd54:	f000 f838 	bl	800bdc8 <_sbrk_r>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d124      	bne.n	800bda6 <_malloc_r+0x92>
 800bd5c:	230c      	movs	r3, #12
 800bd5e:	6033      	str	r3, [r6, #0]
 800bd60:	4630      	mov	r0, r6
 800bd62:	f000 f877 	bl	800be54 <__malloc_unlock>
 800bd66:	e7e4      	b.n	800bd32 <_malloc_r+0x1e>
 800bd68:	680b      	ldr	r3, [r1, #0]
 800bd6a:	1b5b      	subs	r3, r3, r5
 800bd6c:	d418      	bmi.n	800bda0 <_malloc_r+0x8c>
 800bd6e:	2b0b      	cmp	r3, #11
 800bd70:	d90f      	bls.n	800bd92 <_malloc_r+0x7e>
 800bd72:	600b      	str	r3, [r1, #0]
 800bd74:	50cd      	str	r5, [r1, r3]
 800bd76:	18cc      	adds	r4, r1, r3
 800bd78:	4630      	mov	r0, r6
 800bd7a:	f000 f86b 	bl	800be54 <__malloc_unlock>
 800bd7e:	f104 000b 	add.w	r0, r4, #11
 800bd82:	1d23      	adds	r3, r4, #4
 800bd84:	f020 0007 	bic.w	r0, r0, #7
 800bd88:	1ac3      	subs	r3, r0, r3
 800bd8a:	d0d3      	beq.n	800bd34 <_malloc_r+0x20>
 800bd8c:	425a      	negs	r2, r3
 800bd8e:	50e2      	str	r2, [r4, r3]
 800bd90:	e7d0      	b.n	800bd34 <_malloc_r+0x20>
 800bd92:	428c      	cmp	r4, r1
 800bd94:	684b      	ldr	r3, [r1, #4]
 800bd96:	bf16      	itet	ne
 800bd98:	6063      	strne	r3, [r4, #4]
 800bd9a:	6013      	streq	r3, [r2, #0]
 800bd9c:	460c      	movne	r4, r1
 800bd9e:	e7eb      	b.n	800bd78 <_malloc_r+0x64>
 800bda0:	460c      	mov	r4, r1
 800bda2:	6849      	ldr	r1, [r1, #4]
 800bda4:	e7cc      	b.n	800bd40 <_malloc_r+0x2c>
 800bda6:	1cc4      	adds	r4, r0, #3
 800bda8:	f024 0403 	bic.w	r4, r4, #3
 800bdac:	42a0      	cmp	r0, r4
 800bdae:	d005      	beq.n	800bdbc <_malloc_r+0xa8>
 800bdb0:	1a21      	subs	r1, r4, r0
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f000 f808 	bl	800bdc8 <_sbrk_r>
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d0cf      	beq.n	800bd5c <_malloc_r+0x48>
 800bdbc:	6025      	str	r5, [r4, #0]
 800bdbe:	e7db      	b.n	800bd78 <_malloc_r+0x64>
 800bdc0:	200038c8 	.word	0x200038c8
 800bdc4:	200038cc 	.word	0x200038cc

0800bdc8 <_sbrk_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4c06      	ldr	r4, [pc, #24]	; (800bde4 <_sbrk_r+0x1c>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4605      	mov	r5, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	6023      	str	r3, [r4, #0]
 800bdd4:	f7f7 f80e 	bl	8002df4 <_sbrk>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_sbrk_r+0x1a>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_sbrk_r+0x1a>
 800bde0:	602b      	str	r3, [r5, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20003b50 	.word	0x20003b50

0800bde8 <siprintf>:
 800bde8:	b40e      	push	{r1, r2, r3}
 800bdea:	b500      	push	{lr}
 800bdec:	b09c      	sub	sp, #112	; 0x70
 800bdee:	ab1d      	add	r3, sp, #116	; 0x74
 800bdf0:	9002      	str	r0, [sp, #8]
 800bdf2:	9006      	str	r0, [sp, #24]
 800bdf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bdf8:	4809      	ldr	r0, [pc, #36]	; (800be20 <siprintf+0x38>)
 800bdfa:	9107      	str	r1, [sp, #28]
 800bdfc:	9104      	str	r1, [sp, #16]
 800bdfe:	4909      	ldr	r1, [pc, #36]	; (800be24 <siprintf+0x3c>)
 800be00:	f853 2b04 	ldr.w	r2, [r3], #4
 800be04:	9105      	str	r1, [sp, #20]
 800be06:	6800      	ldr	r0, [r0, #0]
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	a902      	add	r1, sp, #8
 800be0c:	f000 f87e 	bl	800bf0c <_svfiprintf_r>
 800be10:	9b02      	ldr	r3, [sp, #8]
 800be12:	2200      	movs	r2, #0
 800be14:	701a      	strb	r2, [r3, #0]
 800be16:	b01c      	add	sp, #112	; 0x70
 800be18:	f85d eb04 	ldr.w	lr, [sp], #4
 800be1c:	b003      	add	sp, #12
 800be1e:	4770      	bx	lr
 800be20:	20000014 	.word	0x20000014
 800be24:	ffff0208 	.word	0xffff0208

0800be28 <strncpy>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	3901      	subs	r1, #1
 800be2c:	4604      	mov	r4, r0
 800be2e:	b902      	cbnz	r2, 800be32 <strncpy+0xa>
 800be30:	bd70      	pop	{r4, r5, r6, pc}
 800be32:	4623      	mov	r3, r4
 800be34:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800be38:	f803 5b01 	strb.w	r5, [r3], #1
 800be3c:	1e56      	subs	r6, r2, #1
 800be3e:	b92d      	cbnz	r5, 800be4c <strncpy+0x24>
 800be40:	4414      	add	r4, r2
 800be42:	42a3      	cmp	r3, r4
 800be44:	d0f4      	beq.n	800be30 <strncpy+0x8>
 800be46:	f803 5b01 	strb.w	r5, [r3], #1
 800be4a:	e7fa      	b.n	800be42 <strncpy+0x1a>
 800be4c:	461c      	mov	r4, r3
 800be4e:	4632      	mov	r2, r6
 800be50:	e7ed      	b.n	800be2e <strncpy+0x6>

0800be52 <__malloc_lock>:
 800be52:	4770      	bx	lr

0800be54 <__malloc_unlock>:
 800be54:	4770      	bx	lr

0800be56 <__ssputs_r>:
 800be56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be5a:	688e      	ldr	r6, [r1, #8]
 800be5c:	429e      	cmp	r6, r3
 800be5e:	4682      	mov	sl, r0
 800be60:	460c      	mov	r4, r1
 800be62:	4690      	mov	r8, r2
 800be64:	4699      	mov	r9, r3
 800be66:	d837      	bhi.n	800bed8 <__ssputs_r+0x82>
 800be68:	898a      	ldrh	r2, [r1, #12]
 800be6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be6e:	d031      	beq.n	800bed4 <__ssputs_r+0x7e>
 800be70:	6825      	ldr	r5, [r4, #0]
 800be72:	6909      	ldr	r1, [r1, #16]
 800be74:	1a6f      	subs	r7, r5, r1
 800be76:	6965      	ldr	r5, [r4, #20]
 800be78:	2302      	movs	r3, #2
 800be7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be7e:	fb95 f5f3 	sdiv	r5, r5, r3
 800be82:	f109 0301 	add.w	r3, r9, #1
 800be86:	443b      	add	r3, r7
 800be88:	429d      	cmp	r5, r3
 800be8a:	bf38      	it	cc
 800be8c:	461d      	movcc	r5, r3
 800be8e:	0553      	lsls	r3, r2, #21
 800be90:	d530      	bpl.n	800bef4 <__ssputs_r+0x9e>
 800be92:	4629      	mov	r1, r5
 800be94:	f7ff ff3e 	bl	800bd14 <_malloc_r>
 800be98:	4606      	mov	r6, r0
 800be9a:	b950      	cbnz	r0, 800beb2 <__ssputs_r+0x5c>
 800be9c:	230c      	movs	r3, #12
 800be9e:	f8ca 3000 	str.w	r3, [sl]
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bea8:	81a3      	strh	r3, [r4, #12]
 800beaa:	f04f 30ff 	mov.w	r0, #4294967295
 800beae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb2:	463a      	mov	r2, r7
 800beb4:	6921      	ldr	r1, [r4, #16]
 800beb6:	f7ff fecb 	bl	800bc50 <memcpy>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec4:	81a3      	strh	r3, [r4, #12]
 800bec6:	6126      	str	r6, [r4, #16]
 800bec8:	6165      	str	r5, [r4, #20]
 800beca:	443e      	add	r6, r7
 800becc:	1bed      	subs	r5, r5, r7
 800bece:	6026      	str	r6, [r4, #0]
 800bed0:	60a5      	str	r5, [r4, #8]
 800bed2:	464e      	mov	r6, r9
 800bed4:	454e      	cmp	r6, r9
 800bed6:	d900      	bls.n	800beda <__ssputs_r+0x84>
 800bed8:	464e      	mov	r6, r9
 800beda:	4632      	mov	r2, r6
 800bedc:	4641      	mov	r1, r8
 800bede:	6820      	ldr	r0, [r4, #0]
 800bee0:	f000 fa94 	bl	800c40c <memmove>
 800bee4:	68a3      	ldr	r3, [r4, #8]
 800bee6:	1b9b      	subs	r3, r3, r6
 800bee8:	60a3      	str	r3, [r4, #8]
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	441e      	add	r6, r3
 800beee:	6026      	str	r6, [r4, #0]
 800bef0:	2000      	movs	r0, #0
 800bef2:	e7dc      	b.n	800beae <__ssputs_r+0x58>
 800bef4:	462a      	mov	r2, r5
 800bef6:	f000 faa2 	bl	800c43e <_realloc_r>
 800befa:	4606      	mov	r6, r0
 800befc:	2800      	cmp	r0, #0
 800befe:	d1e2      	bne.n	800bec6 <__ssputs_r+0x70>
 800bf00:	6921      	ldr	r1, [r4, #16]
 800bf02:	4650      	mov	r0, sl
 800bf04:	f7ff feb8 	bl	800bc78 <_free_r>
 800bf08:	e7c8      	b.n	800be9c <__ssputs_r+0x46>
	...

0800bf0c <_svfiprintf_r>:
 800bf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf10:	461d      	mov	r5, r3
 800bf12:	898b      	ldrh	r3, [r1, #12]
 800bf14:	061f      	lsls	r7, r3, #24
 800bf16:	b09d      	sub	sp, #116	; 0x74
 800bf18:	4680      	mov	r8, r0
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	4616      	mov	r6, r2
 800bf1e:	d50f      	bpl.n	800bf40 <_svfiprintf_r+0x34>
 800bf20:	690b      	ldr	r3, [r1, #16]
 800bf22:	b96b      	cbnz	r3, 800bf40 <_svfiprintf_r+0x34>
 800bf24:	2140      	movs	r1, #64	; 0x40
 800bf26:	f7ff fef5 	bl	800bd14 <_malloc_r>
 800bf2a:	6020      	str	r0, [r4, #0]
 800bf2c:	6120      	str	r0, [r4, #16]
 800bf2e:	b928      	cbnz	r0, 800bf3c <_svfiprintf_r+0x30>
 800bf30:	230c      	movs	r3, #12
 800bf32:	f8c8 3000 	str.w	r3, [r8]
 800bf36:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3a:	e0c8      	b.n	800c0ce <_svfiprintf_r+0x1c2>
 800bf3c:	2340      	movs	r3, #64	; 0x40
 800bf3e:	6163      	str	r3, [r4, #20]
 800bf40:	2300      	movs	r3, #0
 800bf42:	9309      	str	r3, [sp, #36]	; 0x24
 800bf44:	2320      	movs	r3, #32
 800bf46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf4a:	2330      	movs	r3, #48	; 0x30
 800bf4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf50:	9503      	str	r5, [sp, #12]
 800bf52:	f04f 0b01 	mov.w	fp, #1
 800bf56:	4637      	mov	r7, r6
 800bf58:	463d      	mov	r5, r7
 800bf5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf5e:	b10b      	cbz	r3, 800bf64 <_svfiprintf_r+0x58>
 800bf60:	2b25      	cmp	r3, #37	; 0x25
 800bf62:	d13e      	bne.n	800bfe2 <_svfiprintf_r+0xd6>
 800bf64:	ebb7 0a06 	subs.w	sl, r7, r6
 800bf68:	d00b      	beq.n	800bf82 <_svfiprintf_r+0x76>
 800bf6a:	4653      	mov	r3, sl
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4640      	mov	r0, r8
 800bf72:	f7ff ff70 	bl	800be56 <__ssputs_r>
 800bf76:	3001      	adds	r0, #1
 800bf78:	f000 80a4 	beq.w	800c0c4 <_svfiprintf_r+0x1b8>
 800bf7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf7e:	4453      	add	r3, sl
 800bf80:	9309      	str	r3, [sp, #36]	; 0x24
 800bf82:	783b      	ldrb	r3, [r7, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 809d 	beq.w	800c0c4 <_svfiprintf_r+0x1b8>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf94:	9304      	str	r3, [sp, #16]
 800bf96:	9307      	str	r3, [sp, #28]
 800bf98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf9c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf9e:	462f      	mov	r7, r5
 800bfa0:	2205      	movs	r2, #5
 800bfa2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bfa6:	4850      	ldr	r0, [pc, #320]	; (800c0e8 <_svfiprintf_r+0x1dc>)
 800bfa8:	f7f4 f8ea 	bl	8000180 <memchr>
 800bfac:	9b04      	ldr	r3, [sp, #16]
 800bfae:	b9d0      	cbnz	r0, 800bfe6 <_svfiprintf_r+0xda>
 800bfb0:	06d9      	lsls	r1, r3, #27
 800bfb2:	bf44      	itt	mi
 800bfb4:	2220      	movmi	r2, #32
 800bfb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bfba:	071a      	lsls	r2, r3, #28
 800bfbc:	bf44      	itt	mi
 800bfbe:	222b      	movmi	r2, #43	; 0x2b
 800bfc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bfc4:	782a      	ldrb	r2, [r5, #0]
 800bfc6:	2a2a      	cmp	r2, #42	; 0x2a
 800bfc8:	d015      	beq.n	800bff6 <_svfiprintf_r+0xea>
 800bfca:	9a07      	ldr	r2, [sp, #28]
 800bfcc:	462f      	mov	r7, r5
 800bfce:	2000      	movs	r0, #0
 800bfd0:	250a      	movs	r5, #10
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfd8:	3b30      	subs	r3, #48	; 0x30
 800bfda:	2b09      	cmp	r3, #9
 800bfdc:	d94d      	bls.n	800c07a <_svfiprintf_r+0x16e>
 800bfde:	b1b8      	cbz	r0, 800c010 <_svfiprintf_r+0x104>
 800bfe0:	e00f      	b.n	800c002 <_svfiprintf_r+0xf6>
 800bfe2:	462f      	mov	r7, r5
 800bfe4:	e7b8      	b.n	800bf58 <_svfiprintf_r+0x4c>
 800bfe6:	4a40      	ldr	r2, [pc, #256]	; (800c0e8 <_svfiprintf_r+0x1dc>)
 800bfe8:	1a80      	subs	r0, r0, r2
 800bfea:	fa0b f000 	lsl.w	r0, fp, r0
 800bfee:	4318      	orrs	r0, r3
 800bff0:	9004      	str	r0, [sp, #16]
 800bff2:	463d      	mov	r5, r7
 800bff4:	e7d3      	b.n	800bf9e <_svfiprintf_r+0x92>
 800bff6:	9a03      	ldr	r2, [sp, #12]
 800bff8:	1d11      	adds	r1, r2, #4
 800bffa:	6812      	ldr	r2, [r2, #0]
 800bffc:	9103      	str	r1, [sp, #12]
 800bffe:	2a00      	cmp	r2, #0
 800c000:	db01      	blt.n	800c006 <_svfiprintf_r+0xfa>
 800c002:	9207      	str	r2, [sp, #28]
 800c004:	e004      	b.n	800c010 <_svfiprintf_r+0x104>
 800c006:	4252      	negs	r2, r2
 800c008:	f043 0302 	orr.w	r3, r3, #2
 800c00c:	9207      	str	r2, [sp, #28]
 800c00e:	9304      	str	r3, [sp, #16]
 800c010:	783b      	ldrb	r3, [r7, #0]
 800c012:	2b2e      	cmp	r3, #46	; 0x2e
 800c014:	d10c      	bne.n	800c030 <_svfiprintf_r+0x124>
 800c016:	787b      	ldrb	r3, [r7, #1]
 800c018:	2b2a      	cmp	r3, #42	; 0x2a
 800c01a:	d133      	bne.n	800c084 <_svfiprintf_r+0x178>
 800c01c:	9b03      	ldr	r3, [sp, #12]
 800c01e:	1d1a      	adds	r2, r3, #4
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	9203      	str	r2, [sp, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	bfb8      	it	lt
 800c028:	f04f 33ff 	movlt.w	r3, #4294967295
 800c02c:	3702      	adds	r7, #2
 800c02e:	9305      	str	r3, [sp, #20]
 800c030:	4d2e      	ldr	r5, [pc, #184]	; (800c0ec <_svfiprintf_r+0x1e0>)
 800c032:	7839      	ldrb	r1, [r7, #0]
 800c034:	2203      	movs	r2, #3
 800c036:	4628      	mov	r0, r5
 800c038:	f7f4 f8a2 	bl	8000180 <memchr>
 800c03c:	b138      	cbz	r0, 800c04e <_svfiprintf_r+0x142>
 800c03e:	2340      	movs	r3, #64	; 0x40
 800c040:	1b40      	subs	r0, r0, r5
 800c042:	fa03 f000 	lsl.w	r0, r3, r0
 800c046:	9b04      	ldr	r3, [sp, #16]
 800c048:	4303      	orrs	r3, r0
 800c04a:	3701      	adds	r7, #1
 800c04c:	9304      	str	r3, [sp, #16]
 800c04e:	7839      	ldrb	r1, [r7, #0]
 800c050:	4827      	ldr	r0, [pc, #156]	; (800c0f0 <_svfiprintf_r+0x1e4>)
 800c052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c056:	2206      	movs	r2, #6
 800c058:	1c7e      	adds	r6, r7, #1
 800c05a:	f7f4 f891 	bl	8000180 <memchr>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d038      	beq.n	800c0d4 <_svfiprintf_r+0x1c8>
 800c062:	4b24      	ldr	r3, [pc, #144]	; (800c0f4 <_svfiprintf_r+0x1e8>)
 800c064:	bb13      	cbnz	r3, 800c0ac <_svfiprintf_r+0x1a0>
 800c066:	9b03      	ldr	r3, [sp, #12]
 800c068:	3307      	adds	r3, #7
 800c06a:	f023 0307 	bic.w	r3, r3, #7
 800c06e:	3308      	adds	r3, #8
 800c070:	9303      	str	r3, [sp, #12]
 800c072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c074:	444b      	add	r3, r9
 800c076:	9309      	str	r3, [sp, #36]	; 0x24
 800c078:	e76d      	b.n	800bf56 <_svfiprintf_r+0x4a>
 800c07a:	fb05 3202 	mla	r2, r5, r2, r3
 800c07e:	2001      	movs	r0, #1
 800c080:	460f      	mov	r7, r1
 800c082:	e7a6      	b.n	800bfd2 <_svfiprintf_r+0xc6>
 800c084:	2300      	movs	r3, #0
 800c086:	3701      	adds	r7, #1
 800c088:	9305      	str	r3, [sp, #20]
 800c08a:	4619      	mov	r1, r3
 800c08c:	250a      	movs	r5, #10
 800c08e:	4638      	mov	r0, r7
 800c090:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c094:	3a30      	subs	r2, #48	; 0x30
 800c096:	2a09      	cmp	r2, #9
 800c098:	d903      	bls.n	800c0a2 <_svfiprintf_r+0x196>
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d0c8      	beq.n	800c030 <_svfiprintf_r+0x124>
 800c09e:	9105      	str	r1, [sp, #20]
 800c0a0:	e7c6      	b.n	800c030 <_svfiprintf_r+0x124>
 800c0a2:	fb05 2101 	mla	r1, r5, r1, r2
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	e7f0      	b.n	800c08e <_svfiprintf_r+0x182>
 800c0ac:	ab03      	add	r3, sp, #12
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	4622      	mov	r2, r4
 800c0b2:	4b11      	ldr	r3, [pc, #68]	; (800c0f8 <_svfiprintf_r+0x1ec>)
 800c0b4:	a904      	add	r1, sp, #16
 800c0b6:	4640      	mov	r0, r8
 800c0b8:	f3af 8000 	nop.w
 800c0bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c0c0:	4681      	mov	r9, r0
 800c0c2:	d1d6      	bne.n	800c072 <_svfiprintf_r+0x166>
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	065b      	lsls	r3, r3, #25
 800c0c8:	f53f af35 	bmi.w	800bf36 <_svfiprintf_r+0x2a>
 800c0cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0ce:	b01d      	add	sp, #116	; 0x74
 800c0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d4:	ab03      	add	r3, sp, #12
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	4622      	mov	r2, r4
 800c0da:	4b07      	ldr	r3, [pc, #28]	; (800c0f8 <_svfiprintf_r+0x1ec>)
 800c0dc:	a904      	add	r1, sp, #16
 800c0de:	4640      	mov	r0, r8
 800c0e0:	f000 f882 	bl	800c1e8 <_printf_i>
 800c0e4:	e7ea      	b.n	800c0bc <_svfiprintf_r+0x1b0>
 800c0e6:	bf00      	nop
 800c0e8:	0800d900 	.word	0x0800d900
 800c0ec:	0800d906 	.word	0x0800d906
 800c0f0:	0800d90a 	.word	0x0800d90a
 800c0f4:	00000000 	.word	0x00000000
 800c0f8:	0800be57 	.word	0x0800be57

0800c0fc <_printf_common>:
 800c0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c100:	4691      	mov	r9, r2
 800c102:	461f      	mov	r7, r3
 800c104:	688a      	ldr	r2, [r1, #8]
 800c106:	690b      	ldr	r3, [r1, #16]
 800c108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c10c:	4293      	cmp	r3, r2
 800c10e:	bfb8      	it	lt
 800c110:	4613      	movlt	r3, r2
 800c112:	f8c9 3000 	str.w	r3, [r9]
 800c116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c11a:	4606      	mov	r6, r0
 800c11c:	460c      	mov	r4, r1
 800c11e:	b112      	cbz	r2, 800c126 <_printf_common+0x2a>
 800c120:	3301      	adds	r3, #1
 800c122:	f8c9 3000 	str.w	r3, [r9]
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	0699      	lsls	r1, r3, #26
 800c12a:	bf42      	ittt	mi
 800c12c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c130:	3302      	addmi	r3, #2
 800c132:	f8c9 3000 	strmi.w	r3, [r9]
 800c136:	6825      	ldr	r5, [r4, #0]
 800c138:	f015 0506 	ands.w	r5, r5, #6
 800c13c:	d107      	bne.n	800c14e <_printf_common+0x52>
 800c13e:	f104 0a19 	add.w	sl, r4, #25
 800c142:	68e3      	ldr	r3, [r4, #12]
 800c144:	f8d9 2000 	ldr.w	r2, [r9]
 800c148:	1a9b      	subs	r3, r3, r2
 800c14a:	42ab      	cmp	r3, r5
 800c14c:	dc28      	bgt.n	800c1a0 <_printf_common+0xa4>
 800c14e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c152:	6822      	ldr	r2, [r4, #0]
 800c154:	3300      	adds	r3, #0
 800c156:	bf18      	it	ne
 800c158:	2301      	movne	r3, #1
 800c15a:	0692      	lsls	r2, r2, #26
 800c15c:	d42d      	bmi.n	800c1ba <_printf_common+0xbe>
 800c15e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c162:	4639      	mov	r1, r7
 800c164:	4630      	mov	r0, r6
 800c166:	47c0      	blx	r8
 800c168:	3001      	adds	r0, #1
 800c16a:	d020      	beq.n	800c1ae <_printf_common+0xb2>
 800c16c:	6823      	ldr	r3, [r4, #0]
 800c16e:	68e5      	ldr	r5, [r4, #12]
 800c170:	f8d9 2000 	ldr.w	r2, [r9]
 800c174:	f003 0306 	and.w	r3, r3, #6
 800c178:	2b04      	cmp	r3, #4
 800c17a:	bf08      	it	eq
 800c17c:	1aad      	subeq	r5, r5, r2
 800c17e:	68a3      	ldr	r3, [r4, #8]
 800c180:	6922      	ldr	r2, [r4, #16]
 800c182:	bf0c      	ite	eq
 800c184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c188:	2500      	movne	r5, #0
 800c18a:	4293      	cmp	r3, r2
 800c18c:	bfc4      	itt	gt
 800c18e:	1a9b      	subgt	r3, r3, r2
 800c190:	18ed      	addgt	r5, r5, r3
 800c192:	f04f 0900 	mov.w	r9, #0
 800c196:	341a      	adds	r4, #26
 800c198:	454d      	cmp	r5, r9
 800c19a:	d11a      	bne.n	800c1d2 <_printf_common+0xd6>
 800c19c:	2000      	movs	r0, #0
 800c19e:	e008      	b.n	800c1b2 <_printf_common+0xb6>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	4652      	mov	r2, sl
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	47c0      	blx	r8
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	d103      	bne.n	800c1b6 <_printf_common+0xba>
 800c1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b6:	3501      	adds	r5, #1
 800c1b8:	e7c3      	b.n	800c142 <_printf_common+0x46>
 800c1ba:	18e1      	adds	r1, r4, r3
 800c1bc:	1c5a      	adds	r2, r3, #1
 800c1be:	2030      	movs	r0, #48	; 0x30
 800c1c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1c4:	4422      	add	r2, r4
 800c1c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1ce:	3302      	adds	r3, #2
 800c1d0:	e7c5      	b.n	800c15e <_printf_common+0x62>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	4639      	mov	r1, r7
 800c1d8:	4630      	mov	r0, r6
 800c1da:	47c0      	blx	r8
 800c1dc:	3001      	adds	r0, #1
 800c1de:	d0e6      	beq.n	800c1ae <_printf_common+0xb2>
 800c1e0:	f109 0901 	add.w	r9, r9, #1
 800c1e4:	e7d8      	b.n	800c198 <_printf_common+0x9c>
	...

0800c1e8 <_printf_i>:
 800c1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c1f0:	460c      	mov	r4, r1
 800c1f2:	7e09      	ldrb	r1, [r1, #24]
 800c1f4:	b085      	sub	sp, #20
 800c1f6:	296e      	cmp	r1, #110	; 0x6e
 800c1f8:	4617      	mov	r7, r2
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	4698      	mov	r8, r3
 800c1fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c200:	f000 80b3 	beq.w	800c36a <_printf_i+0x182>
 800c204:	d822      	bhi.n	800c24c <_printf_i+0x64>
 800c206:	2963      	cmp	r1, #99	; 0x63
 800c208:	d036      	beq.n	800c278 <_printf_i+0x90>
 800c20a:	d80a      	bhi.n	800c222 <_printf_i+0x3a>
 800c20c:	2900      	cmp	r1, #0
 800c20e:	f000 80b9 	beq.w	800c384 <_printf_i+0x19c>
 800c212:	2958      	cmp	r1, #88	; 0x58
 800c214:	f000 8083 	beq.w	800c31e <_printf_i+0x136>
 800c218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c21c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c220:	e032      	b.n	800c288 <_printf_i+0xa0>
 800c222:	2964      	cmp	r1, #100	; 0x64
 800c224:	d001      	beq.n	800c22a <_printf_i+0x42>
 800c226:	2969      	cmp	r1, #105	; 0x69
 800c228:	d1f6      	bne.n	800c218 <_printf_i+0x30>
 800c22a:	6820      	ldr	r0, [r4, #0]
 800c22c:	6813      	ldr	r3, [r2, #0]
 800c22e:	0605      	lsls	r5, r0, #24
 800c230:	f103 0104 	add.w	r1, r3, #4
 800c234:	d52a      	bpl.n	800c28c <_printf_i+0xa4>
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6011      	str	r1, [r2, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	da03      	bge.n	800c246 <_printf_i+0x5e>
 800c23e:	222d      	movs	r2, #45	; 0x2d
 800c240:	425b      	negs	r3, r3
 800c242:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c246:	486f      	ldr	r0, [pc, #444]	; (800c404 <_printf_i+0x21c>)
 800c248:	220a      	movs	r2, #10
 800c24a:	e039      	b.n	800c2c0 <_printf_i+0xd8>
 800c24c:	2973      	cmp	r1, #115	; 0x73
 800c24e:	f000 809d 	beq.w	800c38c <_printf_i+0x1a4>
 800c252:	d808      	bhi.n	800c266 <_printf_i+0x7e>
 800c254:	296f      	cmp	r1, #111	; 0x6f
 800c256:	d020      	beq.n	800c29a <_printf_i+0xb2>
 800c258:	2970      	cmp	r1, #112	; 0x70
 800c25a:	d1dd      	bne.n	800c218 <_printf_i+0x30>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	f043 0320 	orr.w	r3, r3, #32
 800c262:	6023      	str	r3, [r4, #0]
 800c264:	e003      	b.n	800c26e <_printf_i+0x86>
 800c266:	2975      	cmp	r1, #117	; 0x75
 800c268:	d017      	beq.n	800c29a <_printf_i+0xb2>
 800c26a:	2978      	cmp	r1, #120	; 0x78
 800c26c:	d1d4      	bne.n	800c218 <_printf_i+0x30>
 800c26e:	2378      	movs	r3, #120	; 0x78
 800c270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c274:	4864      	ldr	r0, [pc, #400]	; (800c408 <_printf_i+0x220>)
 800c276:	e055      	b.n	800c324 <_printf_i+0x13c>
 800c278:	6813      	ldr	r3, [r2, #0]
 800c27a:	1d19      	adds	r1, r3, #4
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	6011      	str	r1, [r2, #0]
 800c280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c288:	2301      	movs	r3, #1
 800c28a:	e08c      	b.n	800c3a6 <_printf_i+0x1be>
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6011      	str	r1, [r2, #0]
 800c290:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c294:	bf18      	it	ne
 800c296:	b21b      	sxthne	r3, r3
 800c298:	e7cf      	b.n	800c23a <_printf_i+0x52>
 800c29a:	6813      	ldr	r3, [r2, #0]
 800c29c:	6825      	ldr	r5, [r4, #0]
 800c29e:	1d18      	adds	r0, r3, #4
 800c2a0:	6010      	str	r0, [r2, #0]
 800c2a2:	0628      	lsls	r0, r5, #24
 800c2a4:	d501      	bpl.n	800c2aa <_printf_i+0xc2>
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	e002      	b.n	800c2b0 <_printf_i+0xc8>
 800c2aa:	0668      	lsls	r0, r5, #25
 800c2ac:	d5fb      	bpl.n	800c2a6 <_printf_i+0xbe>
 800c2ae:	881b      	ldrh	r3, [r3, #0]
 800c2b0:	4854      	ldr	r0, [pc, #336]	; (800c404 <_printf_i+0x21c>)
 800c2b2:	296f      	cmp	r1, #111	; 0x6f
 800c2b4:	bf14      	ite	ne
 800c2b6:	220a      	movne	r2, #10
 800c2b8:	2208      	moveq	r2, #8
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2c0:	6865      	ldr	r5, [r4, #4]
 800c2c2:	60a5      	str	r5, [r4, #8]
 800c2c4:	2d00      	cmp	r5, #0
 800c2c6:	f2c0 8095 	blt.w	800c3f4 <_printf_i+0x20c>
 800c2ca:	6821      	ldr	r1, [r4, #0]
 800c2cc:	f021 0104 	bic.w	r1, r1, #4
 800c2d0:	6021      	str	r1, [r4, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d13d      	bne.n	800c352 <_printf_i+0x16a>
 800c2d6:	2d00      	cmp	r5, #0
 800c2d8:	f040 808e 	bne.w	800c3f8 <_printf_i+0x210>
 800c2dc:	4665      	mov	r5, ip
 800c2de:	2a08      	cmp	r2, #8
 800c2e0:	d10b      	bne.n	800c2fa <_printf_i+0x112>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	07db      	lsls	r3, r3, #31
 800c2e6:	d508      	bpl.n	800c2fa <_printf_i+0x112>
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	6862      	ldr	r2, [r4, #4]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	bfde      	ittt	le
 800c2f0:	2330      	movle	r3, #48	; 0x30
 800c2f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2fa:	ebac 0305 	sub.w	r3, ip, r5
 800c2fe:	6123      	str	r3, [r4, #16]
 800c300:	f8cd 8000 	str.w	r8, [sp]
 800c304:	463b      	mov	r3, r7
 800c306:	aa03      	add	r2, sp, #12
 800c308:	4621      	mov	r1, r4
 800c30a:	4630      	mov	r0, r6
 800c30c:	f7ff fef6 	bl	800c0fc <_printf_common>
 800c310:	3001      	adds	r0, #1
 800c312:	d14d      	bne.n	800c3b0 <_printf_i+0x1c8>
 800c314:	f04f 30ff 	mov.w	r0, #4294967295
 800c318:	b005      	add	sp, #20
 800c31a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c31e:	4839      	ldr	r0, [pc, #228]	; (800c404 <_printf_i+0x21c>)
 800c320:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c324:	6813      	ldr	r3, [r2, #0]
 800c326:	6821      	ldr	r1, [r4, #0]
 800c328:	1d1d      	adds	r5, r3, #4
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	6015      	str	r5, [r2, #0]
 800c32e:	060a      	lsls	r2, r1, #24
 800c330:	d50b      	bpl.n	800c34a <_printf_i+0x162>
 800c332:	07ca      	lsls	r2, r1, #31
 800c334:	bf44      	itt	mi
 800c336:	f041 0120 	orrmi.w	r1, r1, #32
 800c33a:	6021      	strmi	r1, [r4, #0]
 800c33c:	b91b      	cbnz	r3, 800c346 <_printf_i+0x15e>
 800c33e:	6822      	ldr	r2, [r4, #0]
 800c340:	f022 0220 	bic.w	r2, r2, #32
 800c344:	6022      	str	r2, [r4, #0]
 800c346:	2210      	movs	r2, #16
 800c348:	e7b7      	b.n	800c2ba <_printf_i+0xd2>
 800c34a:	064d      	lsls	r5, r1, #25
 800c34c:	bf48      	it	mi
 800c34e:	b29b      	uxthmi	r3, r3
 800c350:	e7ef      	b.n	800c332 <_printf_i+0x14a>
 800c352:	4665      	mov	r5, ip
 800c354:	fbb3 f1f2 	udiv	r1, r3, r2
 800c358:	fb02 3311 	mls	r3, r2, r1, r3
 800c35c:	5cc3      	ldrb	r3, [r0, r3]
 800c35e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c362:	460b      	mov	r3, r1
 800c364:	2900      	cmp	r1, #0
 800c366:	d1f5      	bne.n	800c354 <_printf_i+0x16c>
 800c368:	e7b9      	b.n	800c2de <_printf_i+0xf6>
 800c36a:	6813      	ldr	r3, [r2, #0]
 800c36c:	6825      	ldr	r5, [r4, #0]
 800c36e:	6961      	ldr	r1, [r4, #20]
 800c370:	1d18      	adds	r0, r3, #4
 800c372:	6010      	str	r0, [r2, #0]
 800c374:	0628      	lsls	r0, r5, #24
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	d501      	bpl.n	800c37e <_printf_i+0x196>
 800c37a:	6019      	str	r1, [r3, #0]
 800c37c:	e002      	b.n	800c384 <_printf_i+0x19c>
 800c37e:	066a      	lsls	r2, r5, #25
 800c380:	d5fb      	bpl.n	800c37a <_printf_i+0x192>
 800c382:	8019      	strh	r1, [r3, #0]
 800c384:	2300      	movs	r3, #0
 800c386:	6123      	str	r3, [r4, #16]
 800c388:	4665      	mov	r5, ip
 800c38a:	e7b9      	b.n	800c300 <_printf_i+0x118>
 800c38c:	6813      	ldr	r3, [r2, #0]
 800c38e:	1d19      	adds	r1, r3, #4
 800c390:	6011      	str	r1, [r2, #0]
 800c392:	681d      	ldr	r5, [r3, #0]
 800c394:	6862      	ldr	r2, [r4, #4]
 800c396:	2100      	movs	r1, #0
 800c398:	4628      	mov	r0, r5
 800c39a:	f7f3 fef1 	bl	8000180 <memchr>
 800c39e:	b108      	cbz	r0, 800c3a4 <_printf_i+0x1bc>
 800c3a0:	1b40      	subs	r0, r0, r5
 800c3a2:	6060      	str	r0, [r4, #4]
 800c3a4:	6863      	ldr	r3, [r4, #4]
 800c3a6:	6123      	str	r3, [r4, #16]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3ae:	e7a7      	b.n	800c300 <_printf_i+0x118>
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	4639      	mov	r1, r7
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	47c0      	blx	r8
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d0aa      	beq.n	800c314 <_printf_i+0x12c>
 800c3be:	6823      	ldr	r3, [r4, #0]
 800c3c0:	079b      	lsls	r3, r3, #30
 800c3c2:	d413      	bmi.n	800c3ec <_printf_i+0x204>
 800c3c4:	68e0      	ldr	r0, [r4, #12]
 800c3c6:	9b03      	ldr	r3, [sp, #12]
 800c3c8:	4298      	cmp	r0, r3
 800c3ca:	bfb8      	it	lt
 800c3cc:	4618      	movlt	r0, r3
 800c3ce:	e7a3      	b.n	800c318 <_printf_i+0x130>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	464a      	mov	r2, r9
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	47c0      	blx	r8
 800c3da:	3001      	adds	r0, #1
 800c3dc:	d09a      	beq.n	800c314 <_printf_i+0x12c>
 800c3de:	3501      	adds	r5, #1
 800c3e0:	68e3      	ldr	r3, [r4, #12]
 800c3e2:	9a03      	ldr	r2, [sp, #12]
 800c3e4:	1a9b      	subs	r3, r3, r2
 800c3e6:	42ab      	cmp	r3, r5
 800c3e8:	dcf2      	bgt.n	800c3d0 <_printf_i+0x1e8>
 800c3ea:	e7eb      	b.n	800c3c4 <_printf_i+0x1dc>
 800c3ec:	2500      	movs	r5, #0
 800c3ee:	f104 0919 	add.w	r9, r4, #25
 800c3f2:	e7f5      	b.n	800c3e0 <_printf_i+0x1f8>
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1ac      	bne.n	800c352 <_printf_i+0x16a>
 800c3f8:	7803      	ldrb	r3, [r0, #0]
 800c3fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c402:	e76c      	b.n	800c2de <_printf_i+0xf6>
 800c404:	0800d911 	.word	0x0800d911
 800c408:	0800d922 	.word	0x0800d922

0800c40c <memmove>:
 800c40c:	4288      	cmp	r0, r1
 800c40e:	b510      	push	{r4, lr}
 800c410:	eb01 0302 	add.w	r3, r1, r2
 800c414:	d807      	bhi.n	800c426 <memmove+0x1a>
 800c416:	1e42      	subs	r2, r0, #1
 800c418:	4299      	cmp	r1, r3
 800c41a:	d00a      	beq.n	800c432 <memmove+0x26>
 800c41c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c420:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c424:	e7f8      	b.n	800c418 <memmove+0xc>
 800c426:	4283      	cmp	r3, r0
 800c428:	d9f5      	bls.n	800c416 <memmove+0xa>
 800c42a:	1881      	adds	r1, r0, r2
 800c42c:	1ad2      	subs	r2, r2, r3
 800c42e:	42d3      	cmn	r3, r2
 800c430:	d100      	bne.n	800c434 <memmove+0x28>
 800c432:	bd10      	pop	{r4, pc}
 800c434:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c438:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c43c:	e7f7      	b.n	800c42e <memmove+0x22>

0800c43e <_realloc_r>:
 800c43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c440:	4607      	mov	r7, r0
 800c442:	4614      	mov	r4, r2
 800c444:	460e      	mov	r6, r1
 800c446:	b921      	cbnz	r1, 800c452 <_realloc_r+0x14>
 800c448:	4611      	mov	r1, r2
 800c44a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c44e:	f7ff bc61 	b.w	800bd14 <_malloc_r>
 800c452:	b922      	cbnz	r2, 800c45e <_realloc_r+0x20>
 800c454:	f7ff fc10 	bl	800bc78 <_free_r>
 800c458:	4625      	mov	r5, r4
 800c45a:	4628      	mov	r0, r5
 800c45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c45e:	f000 f814 	bl	800c48a <_malloc_usable_size_r>
 800c462:	42a0      	cmp	r0, r4
 800c464:	d20f      	bcs.n	800c486 <_realloc_r+0x48>
 800c466:	4621      	mov	r1, r4
 800c468:	4638      	mov	r0, r7
 800c46a:	f7ff fc53 	bl	800bd14 <_malloc_r>
 800c46e:	4605      	mov	r5, r0
 800c470:	2800      	cmp	r0, #0
 800c472:	d0f2      	beq.n	800c45a <_realloc_r+0x1c>
 800c474:	4631      	mov	r1, r6
 800c476:	4622      	mov	r2, r4
 800c478:	f7ff fbea 	bl	800bc50 <memcpy>
 800c47c:	4631      	mov	r1, r6
 800c47e:	4638      	mov	r0, r7
 800c480:	f7ff fbfa 	bl	800bc78 <_free_r>
 800c484:	e7e9      	b.n	800c45a <_realloc_r+0x1c>
 800c486:	4635      	mov	r5, r6
 800c488:	e7e7      	b.n	800c45a <_realloc_r+0x1c>

0800c48a <_malloc_usable_size_r>:
 800c48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c48e:	1f18      	subs	r0, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	bfbc      	itt	lt
 800c494:	580b      	ldrlt	r3, [r1, r0]
 800c496:	18c0      	addlt	r0, r0, r3
 800c498:	4770      	bx	lr
	...

0800c49c <round>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	ec57 6b10 	vmov	r6, r7, d0
 800c4a2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800c4a6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800c4aa:	2c13      	cmp	r4, #19
 800c4ac:	463b      	mov	r3, r7
 800c4ae:	463d      	mov	r5, r7
 800c4b0:	dc17      	bgt.n	800c4e2 <round+0x46>
 800c4b2:	2c00      	cmp	r4, #0
 800c4b4:	da09      	bge.n	800c4ca <round+0x2e>
 800c4b6:	3401      	adds	r4, #1
 800c4b8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800c4bc:	d103      	bne.n	800c4c6 <round+0x2a>
 800c4be:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	e02c      	b.n	800c524 <round+0x88>
 800c4ca:	4a18      	ldr	r2, [pc, #96]	; (800c52c <round+0x90>)
 800c4cc:	4122      	asrs	r2, r4
 800c4ce:	4217      	tst	r7, r2
 800c4d0:	d100      	bne.n	800c4d4 <round+0x38>
 800c4d2:	b19e      	cbz	r6, 800c4fc <round+0x60>
 800c4d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4d8:	4123      	asrs	r3, r4
 800c4da:	442b      	add	r3, r5
 800c4dc:	ea23 0302 	bic.w	r3, r3, r2
 800c4e0:	e7f1      	b.n	800c4c6 <round+0x2a>
 800c4e2:	2c33      	cmp	r4, #51	; 0x33
 800c4e4:	dd0d      	ble.n	800c502 <round+0x66>
 800c4e6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c4ea:	d107      	bne.n	800c4fc <round+0x60>
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	4639      	mov	r1, r7
 800c4f0:	ee10 2a10 	vmov	r2, s0
 800c4f4:	f7f3 fe9a 	bl	800022c <__adddf3>
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	460f      	mov	r7, r1
 800c4fc:	ec47 6b10 	vmov	d0, r6, r7
 800c500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c502:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800c506:	f04f 30ff 	mov.w	r0, #4294967295
 800c50a:	40d0      	lsrs	r0, r2
 800c50c:	4206      	tst	r6, r0
 800c50e:	d0f5      	beq.n	800c4fc <round+0x60>
 800c510:	2201      	movs	r2, #1
 800c512:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c516:	fa02 f404 	lsl.w	r4, r2, r4
 800c51a:	1931      	adds	r1, r6, r4
 800c51c:	bf28      	it	cs
 800c51e:	189b      	addcs	r3, r3, r2
 800c520:	ea21 0100 	bic.w	r1, r1, r0
 800c524:	461f      	mov	r7, r3
 800c526:	460e      	mov	r6, r1
 800c528:	e7e8      	b.n	800c4fc <round+0x60>
 800c52a:	bf00      	nop
 800c52c:	000fffff 	.word	0x000fffff

0800c530 <_init>:
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	bf00      	nop
 800c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c536:	bc08      	pop	{r3}
 800c538:	469e      	mov	lr, r3
 800c53a:	4770      	bx	lr

0800c53c <_fini>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	bf00      	nop
 800c540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c542:	bc08      	pop	{r3}
 800c544:	469e      	mov	lr, r3
 800c546:	4770      	bx	lr
